"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Login = void 0;

var _jxhelper = require("/js/helper/jxhelper.js");

var _fetchHelper = require("/js/helper/fetchHelper.js");

class Login {
  //show login page
  static renderLoginPage() {
    //empty main-content child elements
    const mainContent = _jxhelper.JxHelper.getMainContent();

    _jxhelper.JxHelper.emptyElementChildren(mainContent);

    _jxhelper.JxHelper.getSpecialLoading().innerText = 'redirecting to login page...';

    _jxhelper.JxHelper.showSpecialLoading();

    _fetchHelper.FetchHelper.text('/js/login/partial.html').then(text => {
      _jxhelper.JxHelper.getSpecialContent().innerHTML = text; //setup event handler

      Login.setupEventHandler();

      _jxhelper.JxHelper.showSpecialContent();

      _jxhelper.JxHelper.hideSpecialLoading();

      setTimeout(function () {
        const xx = document.querySelector('.login-placeholder');
        xx.classList.add('show-login');
      }, 100);
    }).catch(err => {
      console.error(err);

      _jxhelper.JxHelper.showServerErrorMessage();
    });
  }

  static setupEventHandler() {
    //implement event handler
    const form = document.querySelector('#loginForm');
    form.addEventListener('submit', e => {
      console.log('entering login form submit handler...');
      var jsonData = {
        username: document.querySelector('#usernameCtl').value,
        pwd: document.querySelector('#pwdCtl').value
      };
      var loginMsg = document.querySelector('#loginFailMsg');
      loginMsg.classList.remove('text-danger');
      loginMsg.innerHTML = "try login...";
      console.log('start send POST request');

      _fetchHelper.FetchHelper.postJson('/api/login', jsonData).then(responseJson => {
        if (responseJson.statusCode === 0) {
          loginMsg.innerHTML = "login success";
          window.location = "/"; //redirect to default page
        } else {
          loginMsg.innerHTML = responseJson.statusMsg;
          loginMsg.classList.add('text-danger');
        }
      }).catch(err => {
        console.error("failed to login: ".concat(err.message));

        _jxhelper.JxHelper.showServerErrorMessage();
      });

      e.preventDefault();
    });
  }

  static logout() {
    //handle logout
    _fetchHelper.FetchHelper.postJson('/api/logout', {}).then(jsonData => {
      if (jsonData.statusCode === 0) {
        //logout success
        window.location = "#login";
      } else {
        //logout failed
        console.error(jsonData.statusMsg);

        const specialError = _jxhelper.JxHelper.getSpecialError();

        specialError.innerHTML = "<h3>opps, failed to logout...</h3><p>".concat(jsonData.statusMsg, "</p>");

        _jxhelper.JxHelper.showSpecialError();
      }
    }).catch(err => {
      console.error("failed to logout: ".concat(err.message));

      _jxhelper.JxHelper.showServerErrorMessage();
    });
  }

} //# sourceURL=login/login.js


exports.Login = Login;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,