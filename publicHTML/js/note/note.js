"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Note = void 0;

var _jxhelper = require("/js/helper/jxhelper.js");

var _fetchHelper = require("/js/helper/fetchHelper.js");

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Note {
  static async renderPage() {
    _jxhelper.JxHelper.showLoadingPanel();

    try {
      const fragment = await Note.fetchPartial();
      const todoPlaceHolder = fragment.querySelector('.todo-holder');
      Note.reloadTodoList(todoPlaceHolder);

      const contentPanel = _jxhelper.JxHelper.getContentPanel();

      _jxhelper.JxHelper.emptyElementChildren(contentPanel);

      contentPanel.appendChild(fragment);
    } catch (err) {
      console.error(err);

      const specialError = _jxhelper.JxHelper.getSpecialError();

      specialError.innerHTML = "<h2>Opps, something wrong happen :(</h2>";
      specialError.classList.add("visible");
    }

    _jxhelper.JxHelper.hideLoadingPanel();
  }

  static async fetchPartial(resolve, reject) {
    if (!Note.placeHolder) {
      const partialText = await _fetchHelper.FetchHelper.text('/js/note/partial.html');
      Note.placeHolder = _jxhelper.JxHelper.parseHTMLString(partialText);
    }

    return Note.placeHolder;
  }

  static reloadTodoList(todoPlaceHolder) {
    _jxhelper.JxHelper.emptyElementChildren(todoPlaceHolder);

    todoPlaceHolder.appendChild(Note.generateToDoItem("buy lunch"));
    todoPlaceHolder.appendChild(Note.generateToDoItem("mop floor"));
    todoPlaceHolder.appendChild(Note.generateToDoItem("clean dishes")); //TODO: bind event for each todo item
  }

  static generateToDoItem(message) {
    let element = document.createElement('li');
    element.classList.add('todo-item');
    element.textContent = message;
    return element;
  }

} //# sourceURL=note/note.js


exports.Note = Note;

_defineProperty(Note, "placeHolder", void 0);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2NsaWVudC9qcy9ub3RlL25vdGUuanMiXSwibmFtZXMiOlsiTm90ZSIsInJlbmRlclBhZ2UiLCJKeEhlbHBlciIsInNob3dMb2FkaW5nUGFuZWwiLCJmcmFnbWVudCIsImZldGNoUGFydGlhbCIsInRvZG9QbGFjZUhvbGRlciIsInF1ZXJ5U2VsZWN0b3IiLCJyZWxvYWRUb2RvTGlzdCIsImNvbnRlbnRQYW5lbCIsImdldENvbnRlbnRQYW5lbCIsImVtcHR5RWxlbWVudENoaWxkcmVuIiwiYXBwZW5kQ2hpbGQiLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJzcGVjaWFsRXJyb3IiLCJnZXRTcGVjaWFsRXJyb3IiLCJpbm5lckhUTUwiLCJjbGFzc0xpc3QiLCJhZGQiLCJoaWRlTG9hZGluZ1BhbmVsIiwicmVzb2x2ZSIsInJlamVjdCIsInBsYWNlSG9sZGVyIiwicGFydGlhbFRleHQiLCJGZXRjaEhlbHBlciIsInRleHQiLCJwYXJzZUhUTUxTdHJpbmciLCJnZW5lcmF0ZVRvRG9JdGVtIiwibWVzc2FnZSIsImVsZW1lbnQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ0ZXh0Q29udGVudCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7O0FBRU8sTUFBTUEsSUFBTixDQUFXO0FBR2QsZUFBYUMsVUFBYixHQUEwQjtBQUN0QkMsdUJBQVNDLGdCQUFUOztBQUVBLFFBQ0E7QUFDSSxZQUFNQyxRQUFRLEdBQUcsTUFBTUosSUFBSSxDQUFDSyxZQUFMLEVBQXZCO0FBQ0EsWUFBTUMsZUFBZSxHQUFHRixRQUFRLENBQUNHLGFBQVQsQ0FBdUIsY0FBdkIsQ0FBeEI7QUFDQVAsTUFBQUEsSUFBSSxDQUFDUSxjQUFMLENBQW9CRixlQUFwQjs7QUFFQSxZQUFNRyxZQUFZLEdBQUdQLG1CQUFTUSxlQUFULEVBQXJCOztBQUNBUix5QkFBU1Msb0JBQVQsQ0FBOEJGLFlBQTlCOztBQUVBQSxNQUFBQSxZQUFZLENBQUNHLFdBQWIsQ0FBeUJSLFFBQXpCO0FBQ0gsS0FWRCxDQVVFLE9BQU1TLEdBQU4sRUFBVztBQUNUQyxNQUFBQSxPQUFPLENBQUNDLEtBQVIsQ0FBY0YsR0FBZDs7QUFDQSxZQUFNRyxZQUFZLEdBQUdkLG1CQUFTZSxlQUFULEVBQXJCOztBQUNBRCxNQUFBQSxZQUFZLENBQUNFLFNBQWIsR0FBeUIsMENBQXpCO0FBQ0FGLE1BQUFBLFlBQVksQ0FBQ0csU0FBYixDQUF1QkMsR0FBdkIsQ0FBMkIsU0FBM0I7QUFDSDs7QUFFRGxCLHVCQUFTbUIsZ0JBQVQ7QUFDSDs7QUFFRCxlQUFhaEIsWUFBYixDQUEwQmlCLE9BQTFCLEVBQW1DQyxNQUFuQyxFQUEyQztBQUN2QyxRQUFJLENBQUN2QixJQUFJLENBQUN3QixXQUFWLEVBQXVCO0FBQ25CLFlBQU1DLFdBQVcsR0FBRyxNQUFNQyx5QkFBWUMsSUFBWixDQUFpQix1QkFBakIsQ0FBMUI7QUFFQTNCLE1BQUFBLElBQUksQ0FBQ3dCLFdBQUwsR0FBbUJ0QixtQkFBUzBCLGVBQVQsQ0FBeUJILFdBQXpCLENBQW5CO0FBQ0g7O0FBRUQsV0FBT3pCLElBQUksQ0FBQ3dCLFdBQVo7QUFDSDs7QUFFRCxTQUFPaEIsY0FBUCxDQUFzQkYsZUFBdEIsRUFBdUM7QUFDbkNKLHVCQUFTUyxvQkFBVCxDQUE4QkwsZUFBOUI7O0FBRUFBLElBQUFBLGVBQWUsQ0FBQ00sV0FBaEIsQ0FBNEJaLElBQUksQ0FBQzZCLGdCQUFMLENBQXNCLFdBQXRCLENBQTVCO0FBQ0F2QixJQUFBQSxlQUFlLENBQUNNLFdBQWhCLENBQTRCWixJQUFJLENBQUM2QixnQkFBTCxDQUFzQixXQUF0QixDQUE1QjtBQUNBdkIsSUFBQUEsZUFBZSxDQUFDTSxXQUFoQixDQUE0QlosSUFBSSxDQUFDNkIsZ0JBQUwsQ0FBc0IsY0FBdEIsQ0FBNUIsRUFMbUMsQ0FPbkM7QUFDSDs7QUFFRCxTQUFPQSxnQkFBUCxDQUF3QkMsT0FBeEIsRUFBaUM7QUFDN0IsUUFBSUMsT0FBTyxHQUFHQyxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsSUFBdkIsQ0FBZDtBQUNBRixJQUFBQSxPQUFPLENBQUNaLFNBQVIsQ0FBa0JDLEdBQWxCLENBQXNCLFdBQXRCO0FBQ0FXLElBQUFBLE9BQU8sQ0FBQ0csV0FBUixHQUFzQkosT0FBdEI7QUFFQSxXQUFPQyxPQUFQO0FBQ0g7O0FBcERhLEMsQ0FzRGxCOzs7OztnQkF0RGEvQixJIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSnhIZWxwZXIgfSBmcm9tICcvanMvaGVscGVyL2p4aGVscGVyLmpzJ1xyXG5pbXBvcnQgeyBGZXRjaEhlbHBlciB9IGZyb20gJy9qcy9oZWxwZXIvZmV0Y2hIZWxwZXIuanMnXHJcblxyXG5leHBvcnQgY2xhc3MgTm90ZSB7XHJcbiAgICBzdGF0aWMgcGxhY2VIb2xkZXJcclxuXHJcbiAgICBzdGF0aWMgYXN5bmMgcmVuZGVyUGFnZSgpIHtcclxuICAgICAgICBKeEhlbHBlci5zaG93TG9hZGluZ1BhbmVsKClcclxuXHJcbiAgICAgICAgdHJ5XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjb25zdCBmcmFnbWVudCA9IGF3YWl0IE5vdGUuZmV0Y2hQYXJ0aWFsKClcclxuICAgICAgICAgICAgY29uc3QgdG9kb1BsYWNlSG9sZGVyID0gZnJhZ21lbnQucXVlcnlTZWxlY3RvcignLnRvZG8taG9sZGVyJylcclxuICAgICAgICAgICAgTm90ZS5yZWxvYWRUb2RvTGlzdCh0b2RvUGxhY2VIb2xkZXIpXHJcblxyXG4gICAgICAgICAgICBjb25zdCBjb250ZW50UGFuZWwgPSBKeEhlbHBlci5nZXRDb250ZW50UGFuZWwoKVxyXG4gICAgICAgICAgICBKeEhlbHBlci5lbXB0eUVsZW1lbnRDaGlsZHJlbihjb250ZW50UGFuZWwpXHJcblxyXG4gICAgICAgICAgICBjb250ZW50UGFuZWwuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpXHJcbiAgICAgICAgfSBjYXRjaChlcnIpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpXHJcbiAgICAgICAgICAgIGNvbnN0IHNwZWNpYWxFcnJvciA9IEp4SGVscGVyLmdldFNwZWNpYWxFcnJvcigpXHJcbiAgICAgICAgICAgIHNwZWNpYWxFcnJvci5pbm5lckhUTUwgPSBcIjxoMj5PcHBzLCBzb21ldGhpbmcgd3JvbmcgaGFwcGVuIDooPC9oMj5cIlxyXG4gICAgICAgICAgICBzcGVjaWFsRXJyb3IuY2xhc3NMaXN0LmFkZChcInZpc2libGVcIilcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIEp4SGVscGVyLmhpZGVMb2FkaW5nUGFuZWwoKVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBhc3luYyBmZXRjaFBhcnRpYWwocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgaWYgKCFOb3RlLnBsYWNlSG9sZGVyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcnRpYWxUZXh0ID0gYXdhaXQgRmV0Y2hIZWxwZXIudGV4dCgnL2pzL25vdGUvcGFydGlhbC5odG1sJylcclxuXHJcbiAgICAgICAgICAgIE5vdGUucGxhY2VIb2xkZXIgPSBKeEhlbHBlci5wYXJzZUhUTUxTdHJpbmcocGFydGlhbFRleHQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gTm90ZS5wbGFjZUhvbGRlclxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyByZWxvYWRUb2RvTGlzdCh0b2RvUGxhY2VIb2xkZXIpIHtcclxuICAgICAgICBKeEhlbHBlci5lbXB0eUVsZW1lbnRDaGlsZHJlbih0b2RvUGxhY2VIb2xkZXIpXHJcblxyXG4gICAgICAgIHRvZG9QbGFjZUhvbGRlci5hcHBlbmRDaGlsZChOb3RlLmdlbmVyYXRlVG9Eb0l0ZW0oXCJidXkgbHVuY2hcIikpXHJcbiAgICAgICAgdG9kb1BsYWNlSG9sZGVyLmFwcGVuZENoaWxkKE5vdGUuZ2VuZXJhdGVUb0RvSXRlbShcIm1vcCBmbG9vclwiKSlcclxuICAgICAgICB0b2RvUGxhY2VIb2xkZXIuYXBwZW5kQ2hpbGQoTm90ZS5nZW5lcmF0ZVRvRG9JdGVtKFwiY2xlYW4gZGlzaGVzXCIpKVxyXG5cclxuICAgICAgICAvL1RPRE86IGJpbmQgZXZlbnQgZm9yIGVhY2ggdG9kbyBpdGVtXHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdlbmVyYXRlVG9Eb0l0ZW0obWVzc2FnZSkge1xyXG4gICAgICAgIGxldCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGknKVxyXG4gICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgndG9kby1pdGVtJylcclxuICAgICAgICBlbGVtZW50LnRleHRDb250ZW50ID0gbWVzc2FnZVxyXG5cclxuICAgICAgICByZXR1cm4gZWxlbWVudDtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlVVJMPW5vdGUvbm90ZS5qcyJdfQ==