"use strict";

var _jxhelper = require("/js/helper/jxhelper.js");

var _fetchHelper = require("/js/helper/fetchHelper.js");

var _router = require("/js/router.js");

//run script
(async function () {
  try {
    //1. load dependencies
    const jsfiles = await _fetchHelper.FetchHelper.texts(['/libs/jquery-3.2.1.min.js', '/libs/popper.min.js', '/libs/bootstrap.min.js']);
    jsfiles.forEach(file => addJSTag(file));
    const cssFiles = await _fetchHelper.FetchHelper.texts(['/css/bootstrap.min.css', '/css/bootstrap-grid.min.css', '/css/bootstrap-reboot.min.css']);
    cssFiles.forEach(file => addCSSTag(file)); //2. load webpage layout

    const partial = await _fetchHelper.FetchHelper.text('/js/mainContent/partial.html');
    _jxhelper.JxHelper.getMainContent().innerHTML = partial; //3. listen URL hash(#) change and swap content accordingly

    window.onhashchange = function () {
      try {
        _router.Router.resolve(decodeURI(window.location.hash));
      } catch (err) {
        _jxhelper.JxHelper.showServerErrorMessage();
      }
    }; //4. start resolve path


    _router.Router.resolve(decodeURI(window.location.hash));
  } catch (err) {
    console.error(err);
    triggerFailMessage();
  }
})();

function addCSSTag(source) {
  const element = document.createElement("style");
  element.setAttribute('rel', 'stylesheet');
  element.setAttribute('type', 'text/css');
  element.innerHTML = source;
  document.getElementsByTagName("body")[0].appendChild(element);
}

function addJSTag(innerHTML) {
  const element = document.createElement('script');
  element.type = 'text/javascript';
  element.innerHTML = innerHTML;
  document.getElementsByTagName("body")[0].appendChild(element);
}

function appendElement(body, tagName, innerHTML) {
  var element = document.createElement(tagName);
  element.innerHTML = innerHTML;
  body.appendChild(element);
}

function triggerFailMessage() {
  //handle error exception
  _jxhelper.JxHelper.getSpecialLoading().innerHTML = "<p>Ops, something going wrong :(</p>";

  _jxhelper.JxHelper.showSpecialLoading();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2NsaWVudC9qcy9pbmRleC5qcyJdLCJuYW1lcyI6WyJqc2ZpbGVzIiwiRmV0Y2hIZWxwZXIiLCJ0ZXh0cyIsImZvckVhY2giLCJmaWxlIiwiYWRkSlNUYWciLCJjc3NGaWxlcyIsImFkZENTU1RhZyIsInBhcnRpYWwiLCJ0ZXh0IiwiSnhIZWxwZXIiLCJnZXRNYWluQ29udGVudCIsImlubmVySFRNTCIsIndpbmRvdyIsIm9uaGFzaGNoYW5nZSIsIlJvdXRlciIsInJlc29sdmUiLCJkZWNvZGVVUkkiLCJsb2NhdGlvbiIsImhhc2giLCJlcnIiLCJzaG93U2VydmVyRXJyb3JNZXNzYWdlIiwiY29uc29sZSIsImVycm9yIiwidHJpZ2dlckZhaWxNZXNzYWdlIiwic291cmNlIiwiZWxlbWVudCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiYXBwZW5kQ2hpbGQiLCJ0eXBlIiwiYXBwZW5kRWxlbWVudCIsImJvZHkiLCJ0YWdOYW1lIiwiZ2V0U3BlY2lhbExvYWRpbmciLCJzaG93U3BlY2lhbExvYWRpbmciXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBRUE7QUFDQSxDQUFDLGtCQUFpQjtBQUNkLE1BQUk7QUFDQTtBQUNBLFVBQU1BLE9BQU8sR0FBRyxNQUFNQyx5QkFBWUMsS0FBWixDQUNsQixDQUFDLDJCQUFELEVBQThCLHFCQUE5QixFQUFxRCx3QkFBckQsQ0FEa0IsQ0FBdEI7QUFFQUYsSUFBQUEsT0FBTyxDQUFDRyxPQUFSLENBQWdCQyxJQUFJLElBQUlDLFFBQVEsQ0FBQ0QsSUFBRCxDQUFoQztBQUVBLFVBQU1FLFFBQVEsR0FBRyxNQUFNTCx5QkFBWUMsS0FBWixDQUNuQixDQUFDLHdCQUFELEVBQTJCLDZCQUEzQixFQUEwRCwrQkFBMUQsQ0FEbUIsQ0FBdkI7QUFFQUksSUFBQUEsUUFBUSxDQUFDSCxPQUFULENBQWlCQyxJQUFJLElBQUlHLFNBQVMsQ0FBQ0gsSUFBRCxDQUFsQyxFQVJBLENBVUE7O0FBQ0EsVUFBTUksT0FBTyxHQUFHLE1BQU1QLHlCQUFZUSxJQUFaLENBQWlCLDhCQUFqQixDQUF0QjtBQUNBQyx1QkFBU0MsY0FBVCxHQUEwQkMsU0FBMUIsR0FBc0NKLE9BQXRDLENBWkEsQ0FjQTs7QUFDQUssSUFBQUEsTUFBTSxDQUFDQyxZQUFQLEdBQXNCLFlBQVc7QUFDN0IsVUFBSTtBQUNBQyx1QkFBT0MsT0FBUCxDQUFlQyxTQUFTLENBQUNKLE1BQU0sQ0FBQ0ssUUFBUCxDQUFnQkMsSUFBakIsQ0FBeEI7QUFDSCxPQUZELENBRUUsT0FBT0MsR0FBUCxFQUFZO0FBQ1ZWLDJCQUFTVyxzQkFBVDtBQUNIO0FBQ0osS0FORCxDQWZBLENBdUJBOzs7QUFDQU4sbUJBQU9DLE9BQVAsQ0FBZUMsU0FBUyxDQUFDSixNQUFNLENBQUNLLFFBQVAsQ0FBZ0JDLElBQWpCLENBQXhCO0FBRUgsR0ExQkQsQ0EwQkUsT0FBT0MsR0FBUCxFQUFZO0FBQ1ZFLElBQUFBLE9BQU8sQ0FBQ0MsS0FBUixDQUFjSCxHQUFkO0FBQ0FJLElBQUFBLGtCQUFrQjtBQUNyQjtBQUNKLENBL0JEOztBQWlDQSxTQUFTakIsU0FBVCxDQUFtQmtCLE1BQW5CLEVBQTJCO0FBQ3ZCLFFBQU1DLE9BQU8sR0FBR0MsUUFBUSxDQUFDQyxhQUFULENBQXVCLE9BQXZCLENBQWhCO0FBQ0FGLEVBQUFBLE9BQU8sQ0FBQ0csWUFBUixDQUFxQixLQUFyQixFQUE0QixZQUE1QjtBQUNBSCxFQUFBQSxPQUFPLENBQUNHLFlBQVIsQ0FBcUIsTUFBckIsRUFBNkIsVUFBN0I7QUFDQUgsRUFBQUEsT0FBTyxDQUFDZCxTQUFSLEdBQW9CYSxNQUFwQjtBQUVBRSxFQUFBQSxRQUFRLENBQUNHLG9CQUFULENBQThCLE1BQTlCLEVBQXNDLENBQXRDLEVBQXlDQyxXQUF6QyxDQUFxREwsT0FBckQ7QUFDSDs7QUFFRCxTQUFTckIsUUFBVCxDQUFrQk8sU0FBbEIsRUFBNkI7QUFDekIsUUFBTWMsT0FBTyxHQUFHQyxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBaEI7QUFDQUYsRUFBQUEsT0FBTyxDQUFDTSxJQUFSLEdBQWUsaUJBQWY7QUFDQU4sRUFBQUEsT0FBTyxDQUFDZCxTQUFSLEdBQW9CQSxTQUFwQjtBQUVBZSxFQUFBQSxRQUFRLENBQUNHLG9CQUFULENBQThCLE1BQTlCLEVBQXNDLENBQXRDLEVBQXlDQyxXQUF6QyxDQUFxREwsT0FBckQ7QUFDSDs7QUFFRCxTQUFTTyxhQUFULENBQXVCQyxJQUF2QixFQUE2QkMsT0FBN0IsRUFBc0N2QixTQUF0QyxFQUFpRDtBQUM3QyxNQUFJYyxPQUFPLEdBQUdDLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1Qk8sT0FBdkIsQ0FBZDtBQUNBVCxFQUFBQSxPQUFPLENBQUNkLFNBQVIsR0FBb0JBLFNBQXBCO0FBRUFzQixFQUFBQSxJQUFJLENBQUNILFdBQUwsQ0FBaUJMLE9BQWpCO0FBQ0g7O0FBRUQsU0FBU0Ysa0JBQVQsR0FBOEI7QUFDMUI7QUFDQWQscUJBQVMwQixpQkFBVCxHQUE2QnhCLFNBQTdCLEdBQXlDLHNDQUF6Qzs7QUFDQUYscUJBQVMyQixrQkFBVDtBQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSnhIZWxwZXIgfSBmcm9tICcvanMvaGVscGVyL2p4aGVscGVyLmpzJ1xyXG5pbXBvcnQgeyBGZXRjaEhlbHBlciB9IGZyb20gJy9qcy9oZWxwZXIvZmV0Y2hIZWxwZXIuanMnXHJcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gJy9qcy9yb3V0ZXIuanMnXHJcblxyXG4vL3J1biBzY3JpcHRcclxuKGFzeW5jIGZ1bmN0aW9uKCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICAvLzEuIGxvYWQgZGVwZW5kZW5jaWVzXHJcbiAgICAgICAgY29uc3QganNmaWxlcyA9IGF3YWl0IEZldGNoSGVscGVyLnRleHRzKFxyXG4gICAgICAgICAgICBbJy9saWJzL2pxdWVyeS0zLjIuMS5taW4uanMnLCAnL2xpYnMvcG9wcGVyLm1pbi5qcycsICcvbGlicy9ib290c3RyYXAubWluLmpzJ10pXHJcbiAgICAgICAganNmaWxlcy5mb3JFYWNoKGZpbGUgPT4gYWRkSlNUYWcoZmlsZSkpXHJcblxyXG4gICAgICAgIGNvbnN0IGNzc0ZpbGVzID0gYXdhaXQgRmV0Y2hIZWxwZXIudGV4dHMoXHJcbiAgICAgICAgICAgIFsnL2Nzcy9ib290c3RyYXAubWluLmNzcycsICcvY3NzL2Jvb3RzdHJhcC1ncmlkLm1pbi5jc3MnLCAnL2Nzcy9ib290c3RyYXAtcmVib290Lm1pbi5jc3MnXSlcclxuICAgICAgICBjc3NGaWxlcy5mb3JFYWNoKGZpbGUgPT4gYWRkQ1NTVGFnKGZpbGUpKVxyXG5cclxuICAgICAgICAvLzIuIGxvYWQgd2VicGFnZSBsYXlvdXRcclxuICAgICAgICBjb25zdCBwYXJ0aWFsID0gYXdhaXQgRmV0Y2hIZWxwZXIudGV4dCgnL2pzL21haW5Db250ZW50L3BhcnRpYWwuaHRtbCcpXHJcbiAgICAgICAgSnhIZWxwZXIuZ2V0TWFpbkNvbnRlbnQoKS5pbm5lckhUTUwgPSBwYXJ0aWFsXHJcblxyXG4gICAgICAgIC8vMy4gbGlzdGVuIFVSTCBoYXNoKCMpIGNoYW5nZSBhbmQgc3dhcCBjb250ZW50IGFjY29yZGluZ2x5XHJcbiAgICAgICAgd2luZG93Lm9uaGFzaGNoYW5nZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgUm91dGVyLnJlc29sdmUoZGVjb2RlVVJJKHdpbmRvdy5sb2NhdGlvbi5oYXNoKSlcclxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICBKeEhlbHBlci5zaG93U2VydmVyRXJyb3JNZXNzYWdlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vNC4gc3RhcnQgcmVzb2x2ZSBwYXRoXHJcbiAgICAgICAgUm91dGVyLnJlc29sdmUoZGVjb2RlVVJJKHdpbmRvdy5sb2NhdGlvbi5oYXNoKSlcclxuXHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKGVycilcclxuICAgICAgICB0cmlnZ2VyRmFpbE1lc3NhZ2UoKVxyXG4gICAgfVxyXG59KSgpXHJcblxyXG5mdW5jdGlvbiBhZGRDU1NUYWcoc291cmNlKSB7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpXHJcbiAgICBlbGVtZW50LnNldEF0dHJpYnV0ZSgncmVsJywgJ3N0eWxlc2hlZXQnKVxyXG4gICAgZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCAndGV4dC9jc3MnKVxyXG4gICAgZWxlbWVudC5pbm5lckhUTUwgPSBzb3VyY2VcclxuXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImJvZHlcIilbMF0uYXBwZW5kQ2hpbGQoZWxlbWVudClcclxufVxyXG5cclxuZnVuY3Rpb24gYWRkSlNUYWcoaW5uZXJIVE1MKSB7XHJcbiAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JylcclxuICAgIGVsZW1lbnQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnXHJcbiAgICBlbGVtZW50LmlubmVySFRNTCA9IGlubmVySFRNTFxyXG5cclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYm9keVwiKVswXS5hcHBlbmRDaGlsZChlbGVtZW50KVxyXG59XHJcblxyXG5mdW5jdGlvbiBhcHBlbmRFbGVtZW50KGJvZHksIHRhZ05hbWUsIGlubmVySFRNTCkge1xyXG4gICAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xyXG4gICAgZWxlbWVudC5pbm5lckhUTUwgPSBpbm5lckhUTUw7XHJcblxyXG4gICAgYm9keS5hcHBlbmRDaGlsZChlbGVtZW50KTtcclxufVxyXG5cclxuZnVuY3Rpb24gdHJpZ2dlckZhaWxNZXNzYWdlKCkge1xyXG4gICAgLy9oYW5kbGUgZXJyb3IgZXhjZXB0aW9uXHJcbiAgICBKeEhlbHBlci5nZXRTcGVjaWFsTG9hZGluZygpLmlubmVySFRNTCA9IFwiPHA+T3BzLCBzb21ldGhpbmcgZ29pbmcgd3JvbmcgOig8L3A+XCI7XHJcbiAgICBKeEhlbHBlci5zaG93U3BlY2lhbExvYWRpbmcoKVxyXG59Il19