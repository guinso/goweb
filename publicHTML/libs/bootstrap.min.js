"use strict";

require("core-js/modules/es6.array.sort");

require("core-js/modules/es6.regexp.constructor");

require("core-js/modules/es6.regexp.to-string");

require("core-js/modules/es6.regexp.match");

require("core-js/modules/es7.symbol.async-iterator");

require("core-js/modules/es6.symbol");

require("core-js/modules/es6.regexp.split");

/*!
 * Bootstrap v4.0.0-beta (https://getbootstrap.com)
 * Copyright 2011-2017 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
 * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
 */
if ("undefined" == typeof jQuery) throw new Error("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");
!function (t) {
  var e = jQuery.fn.jquery.split(" ")[0].split(".");
  if (e[0] < 2 && e[1] < 9 || 1 == e[0] && 9 == e[1] && e[2] < 1 || e[0] >= 4) throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0");
}(), function () {
  function t(t, e) {
    if (!t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return !e || "object" != typeof e && "function" != typeof e ? t : e;
  }

  function e(t, e) {
    if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function, not " + typeof e);
    t.prototype = Object.create(e && e.prototype, {
      constructor: {
        value: t,
        enumerable: !1,
        writable: !0,
        configurable: !0
      }
    }), e && (Object.setPrototypeOf ? Object.setPrototypeOf(t, e) : t.__proto__ = e);
  }

  function n(t, e) {
    if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function");
  }

  var i = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (t) {
    return typeof t;
  } : function (t) {
    return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  },
      o = function () {
    function t(t, e) {
      for (var n = 0; n < e.length; n++) {
        var i = e[n];
        i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
      }
    }

    return function (e, n, i) {
      return n && t(e.prototype, n), i && t(e, i), e;
    };
  }(),
      r = function (t) {
    function e(t) {
      return {}.toString.call(t).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
    }

    function n(t) {
      return (t[0] || t).nodeType;
    }

    function i() {
      return {
        bindType: s.end,
        delegateType: s.end,
        handle: function handle(e) {
          if (t(e.target).is(this)) return e.handleObj.handler.apply(this, arguments);
        }
      };
    }

    function o() {
      if (window.QUnit) return !1;
      var t = document.createElement("bootstrap");

      for (var e in a) if (void 0 !== t.style[e]) return {
        end: a[e]
      };

      return !1;
    }

    function r(e) {
      var n = this,
          i = !1;
      return t(this).one(l.TRANSITION_END, function () {
        i = !0;
      }), setTimeout(function () {
        i || l.triggerTransitionEnd(n);
      }, e), this;
    }

    var s = !1,
        a = {
      WebkitTransition: "webkitTransitionEnd",
      MozTransition: "transitionend",
      OTransition: "oTransitionEnd otransitionend",
      transition: "transitionend"
    },
        l = {
      TRANSITION_END: "bsTransitionEnd",
      getUID: function getUID(t) {
        do {
          t += ~~(1e6 * Math.random());
        } while (document.getElementById(t));

        return t;
      },
      getSelectorFromElement: function getSelectorFromElement(e) {
        var n = e.getAttribute("data-target");
        n && "#" !== n || (n = e.getAttribute("href") || "");

        try {
          return t(n).length > 0 ? n : null;
        } catch (t) {
          return null;
        }
      },
      reflow: function reflow(t) {
        return t.offsetHeight;
      },
      triggerTransitionEnd: function triggerTransitionEnd(e) {
        t(e).trigger(s.end);
      },
      supportsTransitionEnd: function supportsTransitionEnd() {
        return Boolean(s);
      },
      typeCheckConfig: function typeCheckConfig(t, i, o) {
        for (var r in o) if (o.hasOwnProperty(r)) {
          var s = o[r],
              a = i[r],
              l = a && n(a) ? "element" : e(a);
          if (!new RegExp(s).test(l)) throw new Error(t.toUpperCase() + ': Option "' + r + '" provided type "' + l + '" but expected type "' + s + '".');
        }
      }
    };
    return s = o(), t.fn.emulateTransitionEnd = r, l.supportsTransitionEnd() && (t.event.special[l.TRANSITION_END] = i()), l;
  }(jQuery),
      s = (function (t) {
    var e = "alert",
        i = t.fn[e],
        s = {
      DISMISS: '[data-dismiss="alert"]'
    },
        a = {
      CLOSE: "close.bs.alert",
      CLOSED: "closed.bs.alert",
      CLICK_DATA_API: "click.bs.alert.data-api"
    },
        l = {
      ALERT: "alert",
      FADE: "fade",
      SHOW: "show"
    },
        h = function () {
      function e(t) {
        n(this, e), this._element = t;
      }

      return e.prototype.close = function (t) {
        t = t || this._element;

        var e = this._getRootElement(t);

        this._triggerCloseEvent(e).isDefaultPrevented() || this._removeElement(e);
      }, e.prototype.dispose = function () {
        t.removeData(this._element, "bs.alert"), this._element = null;
      }, e.prototype._getRootElement = function (e) {
        var n = r.getSelectorFromElement(e),
            i = !1;
        return n && (i = t(n)[0]), i || (i = t(e).closest("." + l.ALERT)[0]), i;
      }, e.prototype._triggerCloseEvent = function (e) {
        var n = t.Event(a.CLOSE);
        return t(e).trigger(n), n;
      }, e.prototype._removeElement = function (e) {
        var n = this;
        t(e).removeClass(l.SHOW), r.supportsTransitionEnd() && t(e).hasClass(l.FADE) ? t(e).one(r.TRANSITION_END, function (t) {
          return n._destroyElement(e, t);
        }).emulateTransitionEnd(150) : this._destroyElement(e);
      }, e.prototype._destroyElement = function (e) {
        t(e).detach().trigger(a.CLOSED).remove();
      }, e._jQueryInterface = function (n) {
        return this.each(function () {
          var i = t(this),
              o = i.data("bs.alert");
          o || (o = new e(this), i.data("bs.alert", o)), "close" === n && o[n](this);
        });
      }, e._handleDismiss = function (t) {
        return function (e) {
          e && e.preventDefault(), t.close(this);
        };
      }, o(e, null, [{
        key: "VERSION",
        get: function get() {
          return "4.0.0-beta";
        }
      }]), e;
    }();

    t(document).on(a.CLICK_DATA_API, s.DISMISS, h._handleDismiss(new h())), t.fn[e] = h._jQueryInterface, t.fn[e].Constructor = h, t.fn[e].noConflict = function () {
      return t.fn[e] = i, h._jQueryInterface;
    };
  }(jQuery), function (t) {
    var e = "button",
        i = t.fn[e],
        r = {
      ACTIVE: "active",
      BUTTON: "btn",
      FOCUS: "focus"
    },
        s = {
      DATA_TOGGLE_CARROT: '[data-toggle^="button"]',
      DATA_TOGGLE: '[data-toggle="buttons"]',
      INPUT: "input",
      ACTIVE: ".active",
      BUTTON: ".btn"
    },
        a = {
      CLICK_DATA_API: "click.bs.button.data-api",
      FOCUS_BLUR_DATA_API: "focus.bs.button.data-api blur.bs.button.data-api"
    },
        l = function () {
      function e(t) {
        n(this, e), this._element = t;
      }

      return e.prototype.toggle = function () {
        var e = !0,
            n = !0,
            i = t(this._element).closest(s.DATA_TOGGLE)[0];

        if (i) {
          var o = t(this._element).find(s.INPUT)[0];

          if (o) {
            if ("radio" === o.type) if (o.checked && t(this._element).hasClass(r.ACTIVE)) e = !1;else {
              var a = t(i).find(s.ACTIVE)[0];
              a && t(a).removeClass(r.ACTIVE);
            }

            if (e) {
              if (o.hasAttribute("disabled") || i.hasAttribute("disabled") || o.classList.contains("disabled") || i.classList.contains("disabled")) return;
              o.checked = !t(this._element).hasClass(r.ACTIVE), t(o).trigger("change");
            }

            o.focus(), n = !1;
          }
        }

        n && this._element.setAttribute("aria-pressed", !t(this._element).hasClass(r.ACTIVE)), e && t(this._element).toggleClass(r.ACTIVE);
      }, e.prototype.dispose = function () {
        t.removeData(this._element, "bs.button"), this._element = null;
      }, e._jQueryInterface = function (n) {
        return this.each(function () {
          var i = t(this).data("bs.button");
          i || (i = new e(this), t(this).data("bs.button", i)), "toggle" === n && i[n]();
        });
      }, o(e, null, [{
        key: "VERSION",
        get: function get() {
          return "4.0.0-beta";
        }
      }]), e;
    }();

    t(document).on(a.CLICK_DATA_API, s.DATA_TOGGLE_CARROT, function (e) {
      e.preventDefault();
      var n = e.target;
      t(n).hasClass(r.BUTTON) || (n = t(n).closest(s.BUTTON)), l._jQueryInterface.call(t(n), "toggle");
    }).on(a.FOCUS_BLUR_DATA_API, s.DATA_TOGGLE_CARROT, function (e) {
      var n = t(e.target).closest(s.BUTTON)[0];
      t(n).toggleClass(r.FOCUS, /^focus(in)?$/.test(e.type));
    }), t.fn[e] = l._jQueryInterface, t.fn[e].Constructor = l, t.fn[e].noConflict = function () {
      return t.fn[e] = i, l._jQueryInterface;
    };
  }(jQuery), function (t) {
    var e = "carousel",
        s = "bs.carousel",
        a = "." + s,
        l = t.fn[e],
        h = {
      interval: 5e3,
      keyboard: !0,
      slide: !1,
      pause: "hover",
      wrap: !0
    },
        c = {
      interval: "(number|boolean)",
      keyboard: "boolean",
      slide: "(boolean|string)",
      pause: "(string|boolean)",
      wrap: "boolean"
    },
        u = {
      NEXT: "next",
      PREV: "prev",
      LEFT: "left",
      RIGHT: "right"
    },
        d = {
      SLIDE: "slide" + a,
      SLID: "slid" + a,
      KEYDOWN: "keydown" + a,
      MOUSEENTER: "mouseenter" + a,
      MOUSELEAVE: "mouseleave" + a,
      TOUCHEND: "touchend" + a,
      LOAD_DATA_API: "load.bs.carousel.data-api",
      CLICK_DATA_API: "click.bs.carousel.data-api"
    },
        f = {
      CAROUSEL: "carousel",
      ACTIVE: "active",
      SLIDE: "slide",
      RIGHT: "carousel-item-right",
      LEFT: "carousel-item-left",
      NEXT: "carousel-item-next",
      PREV: "carousel-item-prev",
      ITEM: "carousel-item"
    },
        p = {
      ACTIVE: ".active",
      ACTIVE_ITEM: ".active.carousel-item",
      ITEM: ".carousel-item",
      NEXT_PREV: ".carousel-item-next, .carousel-item-prev",
      INDICATORS: ".carousel-indicators",
      DATA_SLIDE: "[data-slide], [data-slide-to]",
      DATA_RIDE: '[data-ride="carousel"]'
    },
        _ = function () {
      function l(e, i) {
        n(this, l), this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this._config = this._getConfig(i), this._element = t(e)[0], this._indicatorsElement = t(this._element).find(p.INDICATORS)[0], this._addEventListeners();
      }

      return l.prototype.next = function () {
        this._isSliding || this._slide(u.NEXT);
      }, l.prototype.nextWhenVisible = function () {
        document.hidden || this.next();
      }, l.prototype.prev = function () {
        this._isSliding || this._slide(u.PREV);
      }, l.prototype.pause = function (e) {
        e || (this._isPaused = !0), t(this._element).find(p.NEXT_PREV)[0] && r.supportsTransitionEnd() && (r.triggerTransitionEnd(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null;
      }, l.prototype.cycle = function (t) {
        t || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config.interval && !this._isPaused && (this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval));
      }, l.prototype.to = function (e) {
        var n = this;
        this._activeElement = t(this._element).find(p.ACTIVE_ITEM)[0];

        var i = this._getItemIndex(this._activeElement);

        if (!(e > this._items.length - 1 || e < 0)) if (this._isSliding) t(this._element).one(d.SLID, function () {
          return n.to(e);
        });else {
          if (i === e) return this.pause(), void this.cycle();
          var o = e > i ? u.NEXT : u.PREV;

          this._slide(o, this._items[e]);
        }
      }, l.prototype.dispose = function () {
        t(this._element).off(a), t.removeData(this._element, s), this._items = null, this._config = null, this._element = null, this._interval = null, this._isPaused = null, this._isSliding = null, this._activeElement = null, this._indicatorsElement = null;
      }, l.prototype._getConfig = function (n) {
        return n = t.extend({}, h, n), r.typeCheckConfig(e, n, c), n;
      }, l.prototype._addEventListeners = function () {
        var e = this;
        this._config.keyboard && t(this._element).on(d.KEYDOWN, function (t) {
          return e._keydown(t);
        }), "hover" === this._config.pause && (t(this._element).on(d.MOUSEENTER, function (t) {
          return e.pause(t);
        }).on(d.MOUSELEAVE, function (t) {
          return e.cycle(t);
        }), "ontouchstart" in document.documentElement && t(this._element).on(d.TOUCHEND, function () {
          e.pause(), e.touchTimeout && clearTimeout(e.touchTimeout), e.touchTimeout = setTimeout(function (t) {
            return e.cycle(t);
          }, 500 + e._config.interval);
        }));
      }, l.prototype._keydown = function (t) {
        if (!/input|textarea/i.test(t.target.tagName)) switch (t.which) {
          case 37:
            t.preventDefault(), this.prev();
            break;

          case 39:
            t.preventDefault(), this.next();
            break;

          default:
            return;
        }
      }, l.prototype._getItemIndex = function (e) {
        return this._items = t.makeArray(t(e).parent().find(p.ITEM)), this._items.indexOf(e);
      }, l.prototype._getItemByDirection = function (t, e) {
        var n = t === u.NEXT,
            i = t === u.PREV,
            o = this._getItemIndex(e),
            r = this._items.length - 1;

        if ((i && 0 === o || n && o === r) && !this._config.wrap) return e;
        var s = (o + (t === u.PREV ? -1 : 1)) % this._items.length;
        return -1 === s ? this._items[this._items.length - 1] : this._items[s];
      }, l.prototype._triggerSlideEvent = function (e, n) {
        var i = this._getItemIndex(e),
            o = this._getItemIndex(t(this._element).find(p.ACTIVE_ITEM)[0]),
            r = t.Event(d.SLIDE, {
          relatedTarget: e,
          direction: n,
          from: o,
          to: i
        });

        return t(this._element).trigger(r), r;
      }, l.prototype._setActiveIndicatorElement = function (e) {
        if (this._indicatorsElement) {
          t(this._indicatorsElement).find(p.ACTIVE).removeClass(f.ACTIVE);

          var n = this._indicatorsElement.children[this._getItemIndex(e)];

          n && t(n).addClass(f.ACTIVE);
        }
      }, l.prototype._slide = function (e, n) {
        var i = this,
            o = t(this._element).find(p.ACTIVE_ITEM)[0],
            s = this._getItemIndex(o),
            a = n || o && this._getItemByDirection(e, o),
            l = this._getItemIndex(a),
            h = Boolean(this._interval),
            c = void 0,
            _ = void 0,
            g = void 0;

        if (e === u.NEXT ? (c = f.LEFT, _ = f.NEXT, g = u.LEFT) : (c = f.RIGHT, _ = f.PREV, g = u.RIGHT), a && t(a).hasClass(f.ACTIVE)) this._isSliding = !1;else if (!this._triggerSlideEvent(a, g).isDefaultPrevented() && o && a) {
          this._isSliding = !0, h && this.pause(), this._setActiveIndicatorElement(a);
          var m = t.Event(d.SLID, {
            relatedTarget: a,
            direction: g,
            from: s,
            to: l
          });
          r.supportsTransitionEnd() && t(this._element).hasClass(f.SLIDE) ? (t(a).addClass(_), r.reflow(a), t(o).addClass(c), t(a).addClass(c), t(o).one(r.TRANSITION_END, function () {
            t(a).removeClass(c + " " + _).addClass(f.ACTIVE), t(o).removeClass(f.ACTIVE + " " + _ + " " + c), i._isSliding = !1, setTimeout(function () {
              return t(i._element).trigger(m);
            }, 0);
          }).emulateTransitionEnd(600)) : (t(o).removeClass(f.ACTIVE), t(a).addClass(f.ACTIVE), this._isSliding = !1, t(this._element).trigger(m)), h && this.cycle();
        }
      }, l._jQueryInterface = function (e) {
        return this.each(function () {
          var n = t(this).data(s),
              o = t.extend({}, h, t(this).data());
          "object" === (void 0 === e ? "undefined" : i(e)) && t.extend(o, e);
          var r = "string" == typeof e ? e : o.slide;
          if (n || (n = new l(this, o), t(this).data(s, n)), "number" == typeof e) n.to(e);else if ("string" == typeof r) {
            if (void 0 === n[r]) throw new Error('No method named "' + r + '"');
            n[r]();
          } else o.interval && (n.pause(), n.cycle());
        });
      }, l._dataApiClickHandler = function (e) {
        var n = r.getSelectorFromElement(this);

        if (n) {
          var i = t(n)[0];

          if (i && t(i).hasClass(f.CAROUSEL)) {
            var o = t.extend({}, t(i).data(), t(this).data()),
                a = this.getAttribute("data-slide-to");
            a && (o.interval = !1), l._jQueryInterface.call(t(i), o), a && t(i).data(s).to(a), e.preventDefault();
          }
        }
      }, o(l, null, [{
        key: "VERSION",
        get: function get() {
          return "4.0.0-beta";
        }
      }, {
        key: "Default",
        get: function get() {
          return h;
        }
      }]), l;
    }();

    t(document).on(d.CLICK_DATA_API, p.DATA_SLIDE, _._dataApiClickHandler), t(window).on(d.LOAD_DATA_API, function () {
      t(p.DATA_RIDE).each(function () {
        var e = t(this);

        _._jQueryInterface.call(e, e.data());
      });
    }), t.fn[e] = _._jQueryInterface, t.fn[e].Constructor = _, t.fn[e].noConflict = function () {
      return t.fn[e] = l, _._jQueryInterface;
    };
  }(jQuery), function (t) {
    var e = "collapse",
        s = "bs.collapse",
        a = t.fn[e],
        l = {
      toggle: !0,
      parent: ""
    },
        h = {
      toggle: "boolean",
      parent: "string"
    },
        c = {
      SHOW: "show.bs.collapse",
      SHOWN: "shown.bs.collapse",
      HIDE: "hide.bs.collapse",
      HIDDEN: "hidden.bs.collapse",
      CLICK_DATA_API: "click.bs.collapse.data-api"
    },
        u = {
      SHOW: "show",
      COLLAPSE: "collapse",
      COLLAPSING: "collapsing",
      COLLAPSED: "collapsed"
    },
        d = {
      WIDTH: "width",
      HEIGHT: "height"
    },
        f = {
      ACTIVES: ".show, .collapsing",
      DATA_TOGGLE: '[data-toggle="collapse"]'
    },
        p = function () {
      function a(e, i) {
        n(this, a), this._isTransitioning = !1, this._element = e, this._config = this._getConfig(i), this._triggerArray = t.makeArray(t('[data-toggle="collapse"][href="#' + e.id + '"],[data-toggle="collapse"][data-target="#' + e.id + '"]'));

        for (var o = t(f.DATA_TOGGLE), s = 0; s < o.length; s++) {
          var l = o[s],
              h = r.getSelectorFromElement(l);
          null !== h && t(h).filter(e).length > 0 && this._triggerArray.push(l);
        }

        this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), this._config.toggle && this.toggle();
      }

      return a.prototype.toggle = function () {
        t(this._element).hasClass(u.SHOW) ? this.hide() : this.show();
      }, a.prototype.show = function () {
        var e = this;

        if (!this._isTransitioning && !t(this._element).hasClass(u.SHOW)) {
          var n = void 0,
              i = void 0;

          if (this._parent && ((n = t.makeArray(t(this._parent).children().children(f.ACTIVES))).length || (n = null)), !(n && (i = t(n).data(s)) && i._isTransitioning)) {
            var o = t.Event(c.SHOW);

            if (t(this._element).trigger(o), !o.isDefaultPrevented()) {
              n && (a._jQueryInterface.call(t(n), "hide"), i || t(n).data(s, null));

              var l = this._getDimension();

              t(this._element).removeClass(u.COLLAPSE).addClass(u.COLLAPSING), this._element.style[l] = 0, this._triggerArray.length && t(this._triggerArray).removeClass(u.COLLAPSED).attr("aria-expanded", !0), this.setTransitioning(!0);

              var h = function h() {
                t(e._element).removeClass(u.COLLAPSING).addClass(u.COLLAPSE).addClass(u.SHOW), e._element.style[l] = "", e.setTransitioning(!1), t(e._element).trigger(c.SHOWN);
              };

              if (r.supportsTransitionEnd()) {
                var d = "scroll" + (l[0].toUpperCase() + l.slice(1));
                t(this._element).one(r.TRANSITION_END, h).emulateTransitionEnd(600), this._element.style[l] = this._element[d] + "px";
              } else h();
            }
          }
        }
      }, a.prototype.hide = function () {
        var e = this;

        if (!this._isTransitioning && t(this._element).hasClass(u.SHOW)) {
          var n = t.Event(c.HIDE);

          if (t(this._element).trigger(n), !n.isDefaultPrevented()) {
            var i = this._getDimension();

            if (this._element.style[i] = this._element.getBoundingClientRect()[i] + "px", r.reflow(this._element), t(this._element).addClass(u.COLLAPSING).removeClass(u.COLLAPSE).removeClass(u.SHOW), this._triggerArray.length) for (var o = 0; o < this._triggerArray.length; o++) {
              var s = this._triggerArray[o],
                  a = r.getSelectorFromElement(s);
              null !== a && (t(a).hasClass(u.SHOW) || t(s).addClass(u.COLLAPSED).attr("aria-expanded", !1));
            }
            this.setTransitioning(!0);

            var l = function l() {
              e.setTransitioning(!1), t(e._element).removeClass(u.COLLAPSING).addClass(u.COLLAPSE).trigger(c.HIDDEN);
            };

            this._element.style[i] = "", r.supportsTransitionEnd() ? t(this._element).one(r.TRANSITION_END, l).emulateTransitionEnd(600) : l();
          }
        }
      }, a.prototype.setTransitioning = function (t) {
        this._isTransitioning = t;
      }, a.prototype.dispose = function () {
        t.removeData(this._element, s), this._config = null, this._parent = null, this._element = null, this._triggerArray = null, this._isTransitioning = null;
      }, a.prototype._getConfig = function (n) {
        return n = t.extend({}, l, n), n.toggle = Boolean(n.toggle), r.typeCheckConfig(e, n, h), n;
      }, a.prototype._getDimension = function () {
        return t(this._element).hasClass(d.WIDTH) ? d.WIDTH : d.HEIGHT;
      }, a.prototype._getParent = function () {
        var e = this,
            n = t(this._config.parent)[0],
            i = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]';
        return t(n).find(i).each(function (t, n) {
          e._addAriaAndCollapsedClass(a._getTargetFromElement(n), [n]);
        }), n;
      }, a.prototype._addAriaAndCollapsedClass = function (e, n) {
        if (e) {
          var i = t(e).hasClass(u.SHOW);
          n.length && t(n).toggleClass(u.COLLAPSED, !i).attr("aria-expanded", i);
        }
      }, a._getTargetFromElement = function (e) {
        var n = r.getSelectorFromElement(e);
        return n ? t(n)[0] : null;
      }, a._jQueryInterface = function (e) {
        return this.each(function () {
          var n = t(this),
              o = n.data(s),
              r = t.extend({}, l, n.data(), "object" === (void 0 === e ? "undefined" : i(e)) && e);

          if (!o && r.toggle && /show|hide/.test(e) && (r.toggle = !1), o || (o = new a(this, r), n.data(s, o)), "string" == typeof e) {
            if (void 0 === o[e]) throw new Error('No method named "' + e + '"');
            o[e]();
          }
        });
      }, o(a, null, [{
        key: "VERSION",
        get: function get() {
          return "4.0.0-beta";
        }
      }, {
        key: "Default",
        get: function get() {
          return l;
        }
      }]), a;
    }();

    t(document).on(c.CLICK_DATA_API, f.DATA_TOGGLE, function (e) {
      /input|textarea/i.test(e.target.tagName) || e.preventDefault();
      var n = t(this),
          i = r.getSelectorFromElement(this);
      t(i).each(function () {
        var e = t(this),
            i = e.data(s) ? "toggle" : n.data();

        p._jQueryInterface.call(e, i);
      });
    }), t.fn[e] = p._jQueryInterface, t.fn[e].Constructor = p, t.fn[e].noConflict = function () {
      return t.fn[e] = a, p._jQueryInterface;
    };
  }(jQuery), function (t) {
    if ("undefined" == typeof Popper) throw new Error("Bootstrap dropdown require Popper.js (https://popper.js.org)");

    var e = "dropdown",
        s = "bs.dropdown",
        a = "." + s,
        l = t.fn[e],
        h = new RegExp("38|40|27"),
        c = {
      HIDE: "hide" + a,
      HIDDEN: "hidden" + a,
      SHOW: "show" + a,
      SHOWN: "shown" + a,
      CLICK: "click" + a,
      CLICK_DATA_API: "click.bs.dropdown.data-api",
      KEYDOWN_DATA_API: "keydown.bs.dropdown.data-api",
      KEYUP_DATA_API: "keyup.bs.dropdown.data-api"
    },
        u = {
      DISABLED: "disabled",
      SHOW: "show",
      DROPUP: "dropup",
      MENURIGHT: "dropdown-menu-right",
      MENULEFT: "dropdown-menu-left"
    },
        d = {
      DATA_TOGGLE: '[data-toggle="dropdown"]',
      FORM_CHILD: ".dropdown form",
      MENU: ".dropdown-menu",
      NAVBAR_NAV: ".navbar-nav",
      VISIBLE_ITEMS: ".dropdown-menu .dropdown-item:not(.disabled)"
    },
        f = {
      TOP: "top-start",
      TOPEND: "top-end",
      BOTTOM: "bottom-start",
      BOTTOMEND: "bottom-end"
    },
        p = {
      placement: f.BOTTOM,
      offset: 0,
      flip: !0
    },
        _ = {
      placement: "string",
      offset: "(number|string)",
      flip: "boolean"
    },
        g = function () {
      function l(t, e) {
        n(this, l), this._element = t, this._popper = null, this._config = this._getConfig(e), this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar(), this._addEventListeners();
      }

      return l.prototype.toggle = function () {
        if (!this._element.disabled && !t(this._element).hasClass(u.DISABLED)) {
          var e = l._getParentFromElement(this._element),
              n = t(this._menu).hasClass(u.SHOW);

          if (l._clearMenus(), !n) {
            var i = {
              relatedTarget: this._element
            },
                o = t.Event(c.SHOW, i);

            if (t(e).trigger(o), !o.isDefaultPrevented()) {
              var r = this._element;
              t(e).hasClass(u.DROPUP) && (t(this._menu).hasClass(u.MENULEFT) || t(this._menu).hasClass(u.MENURIGHT)) && (r = e), this._popper = new Popper(r, this._menu, this._getPopperConfig()), "ontouchstart" in document.documentElement && !t(e).closest(d.NAVBAR_NAV).length && t("body").children().on("mouseover", null, t.noop), this._element.focus(), this._element.setAttribute("aria-expanded", !0), t(this._menu).toggleClass(u.SHOW), t(e).toggleClass(u.SHOW).trigger(t.Event(c.SHOWN, i));
            }
          }
        }
      }, l.prototype.dispose = function () {
        t.removeData(this._element, s), t(this._element).off(a), this._element = null, this._menu = null, null !== this._popper && this._popper.destroy(), this._popper = null;
      }, l.prototype.update = function () {
        this._inNavbar = this._detectNavbar(), null !== this._popper && this._popper.scheduleUpdate();
      }, l.prototype._addEventListeners = function () {
        var e = this;
        t(this._element).on(c.CLICK, function (t) {
          t.preventDefault(), t.stopPropagation(), e.toggle();
        });
      }, l.prototype._getConfig = function (n) {
        var i = t(this._element).data();
        return void 0 !== i.placement && (i.placement = f[i.placement.toUpperCase()]), n = t.extend({}, this.constructor.Default, t(this._element).data(), n), r.typeCheckConfig(e, n, this.constructor.DefaultType), n;
      }, l.prototype._getMenuElement = function () {
        if (!this._menu) {
          var e = l._getParentFromElement(this._element);

          this._menu = t(e).find(d.MENU)[0];
        }

        return this._menu;
      }, l.prototype._getPlacement = function () {
        var e = t(this._element).parent(),
            n = this._config.placement;
        return e.hasClass(u.DROPUP) || this._config.placement === f.TOP ? (n = f.TOP, t(this._menu).hasClass(u.MENURIGHT) && (n = f.TOPEND)) : t(this._menu).hasClass(u.MENURIGHT) && (n = f.BOTTOMEND), n;
      }, l.prototype._detectNavbar = function () {
        return t(this._element).closest(".navbar").length > 0;
      }, l.prototype._getPopperConfig = function () {
        var t = {
          placement: this._getPlacement(),
          modifiers: {
            offset: {
              offset: this._config.offset
            },
            flip: {
              enabled: this._config.flip
            }
          }
        };
        return this._inNavbar && (t.modifiers.applyStyle = {
          enabled: !this._inNavbar
        }), t;
      }, l._jQueryInterface = function (e) {
        return this.each(function () {
          var n = t(this).data(s),
              o = "object" === (void 0 === e ? "undefined" : i(e)) ? e : null;

          if (n || (n = new l(this, o), t(this).data(s, n)), "string" == typeof e) {
            if (void 0 === n[e]) throw new Error('No method named "' + e + '"');
            n[e]();
          }
        });
      }, l._clearMenus = function (e) {
        if (!e || 3 !== e.which && ("keyup" !== e.type || 9 === e.which)) for (var n = t.makeArray(t(d.DATA_TOGGLE)), i = 0; i < n.length; i++) {
          var o = l._getParentFromElement(n[i]),
              r = t(n[i]).data(s),
              a = {
            relatedTarget: n[i]
          };

          if (r) {
            var h = r._menu;

            if (t(o).hasClass(u.SHOW) && !(e && ("click" === e.type && /input|textarea/i.test(e.target.tagName) || "keyup" === e.type && 9 === e.which) && t.contains(o, e.target))) {
              var f = t.Event(c.HIDE, a);
              t(o).trigger(f), f.isDefaultPrevented() || ("ontouchstart" in document.documentElement && t("body").children().off("mouseover", null, t.noop), n[i].setAttribute("aria-expanded", "false"), t(h).removeClass(u.SHOW), t(o).removeClass(u.SHOW).trigger(t.Event(c.HIDDEN, a)));
            }
          }
        }
      }, l._getParentFromElement = function (e) {
        var n = void 0,
            i = r.getSelectorFromElement(e);
        return i && (n = t(i)[0]), n || e.parentNode;
      }, l._dataApiKeydownHandler = function (e) {
        if (!(!h.test(e.which) || /button/i.test(e.target.tagName) && 32 === e.which || /input|textarea/i.test(e.target.tagName) || (e.preventDefault(), e.stopPropagation(), this.disabled || t(this).hasClass(u.DISABLED)))) {
          var n = l._getParentFromElement(this),
              i = t(n).hasClass(u.SHOW);

          if ((i || 27 === e.which && 32 === e.which) && (!i || 27 !== e.which && 32 !== e.which)) {
            var o = t(n).find(d.VISIBLE_ITEMS).get();

            if (o.length) {
              var r = o.indexOf(e.target);
              38 === e.which && r > 0 && r--, 40 === e.which && r < o.length - 1 && r++, r < 0 && (r = 0), o[r].focus();
            }
          } else {
            if (27 === e.which) {
              var s = t(n).find(d.DATA_TOGGLE)[0];
              t(s).trigger("focus");
            }

            t(this).trigger("click");
          }
        }
      }, o(l, null, [{
        key: "VERSION",
        get: function get() {
          return "4.0.0-beta";
        }
      }, {
        key: "Default",
        get: function get() {
          return p;
        }
      }, {
        key: "DefaultType",
        get: function get() {
          return _;
        }
      }]), l;
    }();

    t(document).on(c.KEYDOWN_DATA_API, d.DATA_TOGGLE, g._dataApiKeydownHandler).on(c.KEYDOWN_DATA_API, d.MENU, g._dataApiKeydownHandler).on(c.CLICK_DATA_API + " " + c.KEYUP_DATA_API, g._clearMenus).on(c.CLICK_DATA_API, d.DATA_TOGGLE, function (e) {
      e.preventDefault(), e.stopPropagation(), g._jQueryInterface.call(t(this), "toggle");
    }).on(c.CLICK_DATA_API, d.FORM_CHILD, function (t) {
      t.stopPropagation();
    }), t.fn[e] = g._jQueryInterface, t.fn[e].Constructor = g, t.fn[e].noConflict = function () {
      return t.fn[e] = l, g._jQueryInterface;
    };
  }(jQuery), function (t) {
    var e = "modal",
        s = ".bs.modal",
        a = t.fn[e],
        l = {
      backdrop: !0,
      keyboard: !0,
      focus: !0,
      show: !0
    },
        h = {
      backdrop: "(boolean|string)",
      keyboard: "boolean",
      focus: "boolean",
      show: "boolean"
    },
        c = {
      HIDE: "hide.bs.modal",
      HIDDEN: "hidden.bs.modal",
      SHOW: "show.bs.modal",
      SHOWN: "shown.bs.modal",
      FOCUSIN: "focusin.bs.modal",
      RESIZE: "resize.bs.modal",
      CLICK_DISMISS: "click.dismiss.bs.modal",
      KEYDOWN_DISMISS: "keydown.dismiss.bs.modal",
      MOUSEUP_DISMISS: "mouseup.dismiss.bs.modal",
      MOUSEDOWN_DISMISS: "mousedown.dismiss.bs.modal",
      CLICK_DATA_API: "click.bs.modal.data-api"
    },
        u = {
      SCROLLBAR_MEASURER: "modal-scrollbar-measure",
      BACKDROP: "modal-backdrop",
      OPEN: "modal-open",
      FADE: "fade",
      SHOW: "show"
    },
        d = {
      DIALOG: ".modal-dialog",
      DATA_TOGGLE: '[data-toggle="modal"]',
      DATA_DISMISS: '[data-dismiss="modal"]',
      FIXED_CONTENT: ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top",
      NAVBAR_TOGGLER: ".navbar-toggler"
    },
        f = function () {
      function a(e, i) {
        n(this, a), this._config = this._getConfig(i), this._element = e, this._dialog = t(e).find(d.DIALOG)[0], this._backdrop = null, this._isShown = !1, this._isBodyOverflowing = !1, this._ignoreBackdropClick = !1, this._originalBodyPadding = 0, this._scrollbarWidth = 0;
      }

      return a.prototype.toggle = function (t) {
        return this._isShown ? this.hide() : this.show(t);
      }, a.prototype.show = function (e) {
        var n = this;

        if (!this._isTransitioning) {
          r.supportsTransitionEnd() && t(this._element).hasClass(u.FADE) && (this._isTransitioning = !0);
          var i = t.Event(c.SHOW, {
            relatedTarget: e
          });
          t(this._element).trigger(i), this._isShown || i.isDefaultPrevented() || (this._isShown = !0, this._checkScrollbar(), this._setScrollbar(), t(document.body).addClass(u.OPEN), this._setEscapeEvent(), this._setResizeEvent(), t(this._element).on(c.CLICK_DISMISS, d.DATA_DISMISS, function (t) {
            return n.hide(t);
          }), t(this._dialog).on(c.MOUSEDOWN_DISMISS, function () {
            t(n._element).one(c.MOUSEUP_DISMISS, function (e) {
              t(e.target).is(n._element) && (n._ignoreBackdropClick = !0);
            });
          }), this._showBackdrop(function () {
            return n._showElement(e);
          }));
        }
      }, a.prototype.hide = function (e) {
        var n = this;

        if (e && e.preventDefault(), !this._isTransitioning && this._isShown) {
          var i = r.supportsTransitionEnd() && t(this._element).hasClass(u.FADE);
          i && (this._isTransitioning = !0);
          var o = t.Event(c.HIDE);
          t(this._element).trigger(o), this._isShown && !o.isDefaultPrevented() && (this._isShown = !1, this._setEscapeEvent(), this._setResizeEvent(), t(document).off(c.FOCUSIN), t(this._element).removeClass(u.SHOW), t(this._element).off(c.CLICK_DISMISS), t(this._dialog).off(c.MOUSEDOWN_DISMISS), i ? t(this._element).one(r.TRANSITION_END, function (t) {
            return n._hideModal(t);
          }).emulateTransitionEnd(300) : this._hideModal());
        }
      }, a.prototype.dispose = function () {
        t.removeData(this._element, "bs.modal"), t(window, document, this._element, this._backdrop).off(s), this._config = null, this._element = null, this._dialog = null, this._backdrop = null, this._isShown = null, this._isBodyOverflowing = null, this._ignoreBackdropClick = null, this._scrollbarWidth = null;
      }, a.prototype.handleUpdate = function () {
        this._adjustDialog();
      }, a.prototype._getConfig = function (n) {
        return n = t.extend({}, l, n), r.typeCheckConfig(e, n, h), n;
      }, a.prototype._showElement = function (e) {
        var n = this,
            i = r.supportsTransitionEnd() && t(this._element).hasClass(u.FADE);
        this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), this._element.style.display = "block", this._element.removeAttribute("aria-hidden"), this._element.scrollTop = 0, i && r.reflow(this._element), t(this._element).addClass(u.SHOW), this._config.focus && this._enforceFocus();

        var o = t.Event(c.SHOWN, {
          relatedTarget: e
        }),
            s = function s() {
          n._config.focus && n._element.focus(), n._isTransitioning = !1, t(n._element).trigger(o);
        };

        i ? t(this._dialog).one(r.TRANSITION_END, s).emulateTransitionEnd(300) : s();
      }, a.prototype._enforceFocus = function () {
        var e = this;
        t(document).off(c.FOCUSIN).on(c.FOCUSIN, function (n) {
          document === n.target || e._element === n.target || t(e._element).has(n.target).length || e._element.focus();
        });
      }, a.prototype._setEscapeEvent = function () {
        var e = this;
        this._isShown && this._config.keyboard ? t(this._element).on(c.KEYDOWN_DISMISS, function (t) {
          27 === t.which && (t.preventDefault(), e.hide());
        }) : this._isShown || t(this._element).off(c.KEYDOWN_DISMISS);
      }, a.prototype._setResizeEvent = function () {
        var e = this;
        this._isShown ? t(window).on(c.RESIZE, function (t) {
          return e.handleUpdate(t);
        }) : t(window).off(c.RESIZE);
      }, a.prototype._hideModal = function () {
        var e = this;
        this._element.style.display = "none", this._element.setAttribute("aria-hidden", !0), this._isTransitioning = !1, this._showBackdrop(function () {
          t(document.body).removeClass(u.OPEN), e._resetAdjustments(), e._resetScrollbar(), t(e._element).trigger(c.HIDDEN);
        });
      }, a.prototype._removeBackdrop = function () {
        this._backdrop && (t(this._backdrop).remove(), this._backdrop = null);
      }, a.prototype._showBackdrop = function (e) {
        var n = this,
            i = t(this._element).hasClass(u.FADE) ? u.FADE : "";

        if (this._isShown && this._config.backdrop) {
          var o = r.supportsTransitionEnd() && i;
          if (this._backdrop = document.createElement("div"), this._backdrop.className = u.BACKDROP, i && t(this._backdrop).addClass(i), t(this._backdrop).appendTo(document.body), t(this._element).on(c.CLICK_DISMISS, function (t) {
            n._ignoreBackdropClick ? n._ignoreBackdropClick = !1 : t.target === t.currentTarget && ("static" === n._config.backdrop ? n._element.focus() : n.hide());
          }), o && r.reflow(this._backdrop), t(this._backdrop).addClass(u.SHOW), !e) return;
          if (!o) return void e();
          t(this._backdrop).one(r.TRANSITION_END, e).emulateTransitionEnd(150);
        } else if (!this._isShown && this._backdrop) {
          t(this._backdrop).removeClass(u.SHOW);

          var s = function s() {
            n._removeBackdrop(), e && e();
          };

          r.supportsTransitionEnd() && t(this._element).hasClass(u.FADE) ? t(this._backdrop).one(r.TRANSITION_END, s).emulateTransitionEnd(150) : s();
        } else e && e();
      }, a.prototype._adjustDialog = function () {
        var t = this._element.scrollHeight > document.documentElement.clientHeight;
        !this._isBodyOverflowing && t && (this._element.style.paddingLeft = this._scrollbarWidth + "px"), this._isBodyOverflowing && !t && (this._element.style.paddingRight = this._scrollbarWidth + "px");
      }, a.prototype._resetAdjustments = function () {
        this._element.style.paddingLeft = "", this._element.style.paddingRight = "";
      }, a.prototype._checkScrollbar = function () {
        this._isBodyOverflowing = document.body.clientWidth < window.innerWidth, this._scrollbarWidth = this._getScrollbarWidth();
      }, a.prototype._setScrollbar = function () {
        var e = this;

        if (this._isBodyOverflowing) {
          t(d.FIXED_CONTENT).each(function (n, i) {
            var o = t(i)[0].style.paddingRight,
                r = t(i).css("padding-right");
            t(i).data("padding-right", o).css("padding-right", parseFloat(r) + e._scrollbarWidth + "px");
          }), t(d.NAVBAR_TOGGLER).each(function (n, i) {
            var o = t(i)[0].style.marginRight,
                r = t(i).css("margin-right");
            t(i).data("margin-right", o).css("margin-right", parseFloat(r) + e._scrollbarWidth + "px");
          });
          var n = document.body.style.paddingRight,
              i = t("body").css("padding-right");
          t("body").data("padding-right", n).css("padding-right", parseFloat(i) + this._scrollbarWidth + "px");
        }
      }, a.prototype._resetScrollbar = function () {
        t(d.FIXED_CONTENT).each(function (e, n) {
          var i = t(n).data("padding-right");
          void 0 !== i && t(n).css("padding-right", i).removeData("padding-right");
        }), t(d.NAVBAR_TOGGLER).each(function (e, n) {
          var i = t(n).data("margin-right");
          void 0 !== i && t(n).css("margin-right", i).removeData("margin-right");
        });
        var e = t("body").data("padding-right");
        void 0 !== e && t("body").css("padding-right", e).removeData("padding-right");
      }, a.prototype._getScrollbarWidth = function () {
        var t = document.createElement("div");
        t.className = u.SCROLLBAR_MEASURER, document.body.appendChild(t);
        var e = t.getBoundingClientRect().width - t.clientWidth;
        return document.body.removeChild(t), e;
      }, a._jQueryInterface = function (e, n) {
        return this.each(function () {
          var o = t(this).data("bs.modal"),
              r = t.extend({}, a.Default, t(this).data(), "object" === (void 0 === e ? "undefined" : i(e)) && e);

          if (o || (o = new a(this, r), t(this).data("bs.modal", o)), "string" == typeof e) {
            if (void 0 === o[e]) throw new Error('No method named "' + e + '"');
            o[e](n);
          } else r.show && o.show(n);
        });
      }, o(a, null, [{
        key: "VERSION",
        get: function get() {
          return "4.0.0-beta";
        }
      }, {
        key: "Default",
        get: function get() {
          return l;
        }
      }]), a;
    }();

    t(document).on(c.CLICK_DATA_API, d.DATA_TOGGLE, function (e) {
      var n = this,
          i = void 0,
          o = r.getSelectorFromElement(this);
      o && (i = t(o)[0]);
      var s = t(i).data("bs.modal") ? "toggle" : t.extend({}, t(i).data(), t(this).data());
      "A" !== this.tagName && "AREA" !== this.tagName || e.preventDefault();
      var a = t(i).one(c.SHOW, function (e) {
        e.isDefaultPrevented() || a.one(c.HIDDEN, function () {
          t(n).is(":visible") && n.focus();
        });
      });

      f._jQueryInterface.call(t(i), s, this);
    }), t.fn[e] = f._jQueryInterface, t.fn[e].Constructor = f, t.fn[e].noConflict = function () {
      return t.fn[e] = a, f._jQueryInterface;
    };
  }(jQuery), function (t) {
    var e = "scrollspy",
        s = t.fn[e],
        a = {
      offset: 10,
      method: "auto",
      target: ""
    },
        l = {
      offset: "number",
      method: "string",
      target: "(string|element)"
    },
        h = {
      ACTIVATE: "activate.bs.scrollspy",
      SCROLL: "scroll.bs.scrollspy",
      LOAD_DATA_API: "load.bs.scrollspy.data-api"
    },
        c = {
      DROPDOWN_ITEM: "dropdown-item",
      DROPDOWN_MENU: "dropdown-menu",
      ACTIVE: "active"
    },
        u = {
      DATA_SPY: '[data-spy="scroll"]',
      ACTIVE: ".active",
      NAV_LIST_GROUP: ".nav, .list-group",
      NAV_LINKS: ".nav-link",
      LIST_ITEMS: ".list-group-item",
      DROPDOWN: ".dropdown",
      DROPDOWN_ITEMS: ".dropdown-item",
      DROPDOWN_TOGGLE: ".dropdown-toggle"
    },
        d = {
      OFFSET: "offset",
      POSITION: "position"
    },
        f = function () {
      function s(e, i) {
        var o = this;
        n(this, s), this._element = e, this._scrollElement = "BODY" === e.tagName ? window : e, this._config = this._getConfig(i), this._selector = this._config.target + " " + u.NAV_LINKS + "," + this._config.target + " " + u.LIST_ITEMS + "," + this._config.target + " " + u.DROPDOWN_ITEMS, this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, t(this._scrollElement).on(h.SCROLL, function (t) {
          return o._process(t);
        }), this.refresh(), this._process();
      }

      return s.prototype.refresh = function () {
        var e = this,
            n = this._scrollElement !== this._scrollElement.window ? d.POSITION : d.OFFSET,
            i = "auto" === this._config.method ? n : this._config.method,
            o = i === d.POSITION ? this._getScrollTop() : 0;
        this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), t.makeArray(t(this._selector)).map(function (e) {
          var n = void 0,
              s = r.getSelectorFromElement(e);

          if (s && (n = t(s)[0]), n) {
            var a = n.getBoundingClientRect();
            if (a.width || a.height) return [t(n)[i]().top + o, s];
          }

          return null;
        }).filter(function (t) {
          return t;
        }).sort(function (t, e) {
          return t[0] - e[0];
        }).forEach(function (t) {
          e._offsets.push(t[0]), e._targets.push(t[1]);
        });
      }, s.prototype.dispose = function () {
        t.removeData(this._element, "bs.scrollspy"), t(this._scrollElement).off(".bs.scrollspy"), this._element = null, this._scrollElement = null, this._config = null, this._selector = null, this._offsets = null, this._targets = null, this._activeTarget = null, this._scrollHeight = null;
      }, s.prototype._getConfig = function (n) {
        if ("string" != typeof (n = t.extend({}, a, n)).target) {
          var i = t(n.target).attr("id");
          i || (i = r.getUID(e), t(n.target).attr("id", i)), n.target = "#" + i;
        }

        return r.typeCheckConfig(e, n, l), n;
      }, s.prototype._getScrollTop = function () {
        return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
      }, s.prototype._getScrollHeight = function () {
        return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
      }, s.prototype._getOffsetHeight = function () {
        return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
      }, s.prototype._process = function () {
        var t = this._getScrollTop() + this._config.offset,
            e = this._getScrollHeight(),
            n = this._config.offset + e - this._getOffsetHeight();

        if (this._scrollHeight !== e && this.refresh(), t >= n) {
          var i = this._targets[this._targets.length - 1];
          this._activeTarget !== i && this._activate(i);
        } else {
          if (this._activeTarget && t < this._offsets[0] && this._offsets[0] > 0) return this._activeTarget = null, void this._clear();

          for (var o = this._offsets.length; o--;) this._activeTarget !== this._targets[o] && t >= this._offsets[o] && (void 0 === this._offsets[o + 1] || t < this._offsets[o + 1]) && this._activate(this._targets[o]);
        }
      }, s.prototype._activate = function (e) {
        this._activeTarget = e, this._clear();

        var n = this._selector.split(",");

        n = n.map(function (t) {
          return t + '[data-target="' + e + '"],' + t + '[href="' + e + '"]';
        });
        var i = t(n.join(","));
        i.hasClass(c.DROPDOWN_ITEM) ? (i.closest(u.DROPDOWN).find(u.DROPDOWN_TOGGLE).addClass(c.ACTIVE), i.addClass(c.ACTIVE)) : (i.addClass(c.ACTIVE), i.parents(u.NAV_LIST_GROUP).prev(u.NAV_LINKS + ", " + u.LIST_ITEMS).addClass(c.ACTIVE)), t(this._scrollElement).trigger(h.ACTIVATE, {
          relatedTarget: e
        });
      }, s.prototype._clear = function () {
        t(this._selector).filter(u.ACTIVE).removeClass(c.ACTIVE);
      }, s._jQueryInterface = function (e) {
        return this.each(function () {
          var n = t(this).data("bs.scrollspy"),
              o = "object" === (void 0 === e ? "undefined" : i(e)) && e;

          if (n || (n = new s(this, o), t(this).data("bs.scrollspy", n)), "string" == typeof e) {
            if (void 0 === n[e]) throw new Error('No method named "' + e + '"');
            n[e]();
          }
        });
      }, o(s, null, [{
        key: "VERSION",
        get: function get() {
          return "4.0.0-beta";
        }
      }, {
        key: "Default",
        get: function get() {
          return a;
        }
      }]), s;
    }();

    t(window).on(h.LOAD_DATA_API, function () {
      for (var e = t.makeArray(t(u.DATA_SPY)), n = e.length; n--;) {
        var i = t(e[n]);

        f._jQueryInterface.call(i, i.data());
      }
    }), t.fn[e] = f._jQueryInterface, t.fn[e].Constructor = f, t.fn[e].noConflict = function () {
      return t.fn[e] = s, f._jQueryInterface;
    };
  }(jQuery), function (t) {
    var e = t.fn.tab,
        i = {
      HIDE: "hide.bs.tab",
      HIDDEN: "hidden.bs.tab",
      SHOW: "show.bs.tab",
      SHOWN: "shown.bs.tab",
      CLICK_DATA_API: "click.bs.tab.data-api"
    },
        s = {
      DROPDOWN_MENU: "dropdown-menu",
      ACTIVE: "active",
      DISABLED: "disabled",
      FADE: "fade",
      SHOW: "show"
    },
        a = {
      DROPDOWN: ".dropdown",
      NAV_LIST_GROUP: ".nav, .list-group",
      ACTIVE: ".active",
      DATA_TOGGLE: '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',
      DROPDOWN_TOGGLE: ".dropdown-toggle",
      DROPDOWN_ACTIVE_CHILD: "> .dropdown-menu .active"
    },
        l = function () {
      function e(t) {
        n(this, e), this._element = t;
      }

      return e.prototype.show = function () {
        var e = this;

        if (!(this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && t(this._element).hasClass(s.ACTIVE) || t(this._element).hasClass(s.DISABLED))) {
          var n = void 0,
              o = void 0,
              l = t(this._element).closest(a.NAV_LIST_GROUP)[0],
              h = r.getSelectorFromElement(this._element);
          l && (o = t.makeArray(t(l).find(a.ACTIVE)), o = o[o.length - 1]);
          var c = t.Event(i.HIDE, {
            relatedTarget: this._element
          }),
              u = t.Event(i.SHOW, {
            relatedTarget: o
          });

          if (o && t(o).trigger(c), t(this._element).trigger(u), !u.isDefaultPrevented() && !c.isDefaultPrevented()) {
            h && (n = t(h)[0]), this._activate(this._element, l);

            var d = function d() {
              var n = t.Event(i.HIDDEN, {
                relatedTarget: e._element
              }),
                  r = t.Event(i.SHOWN, {
                relatedTarget: o
              });
              t(o).trigger(n), t(e._element).trigger(r);
            };

            n ? this._activate(n, n.parentNode, d) : d();
          }
        }
      }, e.prototype.dispose = function () {
        t.removeData(this._element, "bs.tab"), this._element = null;
      }, e.prototype._activate = function (e, n, i) {
        var o = this,
            l = t(n).find(a.ACTIVE)[0],
            h = i && r.supportsTransitionEnd() && l && t(l).hasClass(s.FADE),
            c = function c() {
          return o._transitionComplete(e, l, h, i);
        };

        l && h ? t(l).one(r.TRANSITION_END, c).emulateTransitionEnd(150) : c(), l && t(l).removeClass(s.SHOW);
      }, e.prototype._transitionComplete = function (e, n, i, o) {
        if (n) {
          t(n).removeClass(s.ACTIVE);
          var l = t(n.parentNode).find(a.DROPDOWN_ACTIVE_CHILD)[0];
          l && t(l).removeClass(s.ACTIVE), n.setAttribute("aria-expanded", !1);
        }

        if (t(e).addClass(s.ACTIVE), e.setAttribute("aria-expanded", !0), i ? (r.reflow(e), t(e).addClass(s.SHOW)) : t(e).removeClass(s.FADE), e.parentNode && t(e.parentNode).hasClass(s.DROPDOWN_MENU)) {
          var h = t(e).closest(a.DROPDOWN)[0];
          h && t(h).find(a.DROPDOWN_TOGGLE).addClass(s.ACTIVE), e.setAttribute("aria-expanded", !0);
        }

        o && o();
      }, e._jQueryInterface = function (n) {
        return this.each(function () {
          var i = t(this),
              o = i.data("bs.tab");

          if (o || (o = new e(this), i.data("bs.tab", o)), "string" == typeof n) {
            if (void 0 === o[n]) throw new Error('No method named "' + n + '"');
            o[n]();
          }
        });
      }, o(e, null, [{
        key: "VERSION",
        get: function get() {
          return "4.0.0-beta";
        }
      }]), e;
    }();

    t(document).on(i.CLICK_DATA_API, a.DATA_TOGGLE, function (e) {
      e.preventDefault(), l._jQueryInterface.call(t(this), "show");
    }), t.fn.tab = l._jQueryInterface, t.fn.tab.Constructor = l, t.fn.tab.noConflict = function () {
      return t.fn.tab = e, l._jQueryInterface;
    };
  }(jQuery), function (t) {
    if ("undefined" == typeof Popper) throw new Error("Bootstrap tooltips require Popper.js (https://popper.js.org)");

    var e = "tooltip",
        s = ".bs.tooltip",
        a = t.fn[e],
        l = new RegExp("(^|\\s)bs-tooltip\\S+", "g"),
        h = {
      animation: "boolean",
      template: "string",
      title: "(string|element|function)",
      trigger: "string",
      delay: "(number|object)",
      html: "boolean",
      selector: "(string|boolean)",
      placement: "(string|function)",
      offset: "(number|string)",
      container: "(string|element|boolean)",
      fallbackPlacement: "(string|array)"
    },
        c = {
      AUTO: "auto",
      TOP: "top",
      RIGHT: "right",
      BOTTOM: "bottom",
      LEFT: "left"
    },
        u = {
      animation: !0,
      template: '<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>',
      trigger: "hover focus",
      title: "",
      delay: 0,
      html: !1,
      selector: !1,
      placement: "top",
      offset: 0,
      container: !1,
      fallbackPlacement: "flip"
    },
        d = {
      SHOW: "show",
      OUT: "out"
    },
        f = {
      HIDE: "hide" + s,
      HIDDEN: "hidden" + s,
      SHOW: "show" + s,
      SHOWN: "shown" + s,
      INSERTED: "inserted" + s,
      CLICK: "click" + s,
      FOCUSIN: "focusin" + s,
      FOCUSOUT: "focusout" + s,
      MOUSEENTER: "mouseenter" + s,
      MOUSELEAVE: "mouseleave" + s
    },
        p = {
      FADE: "fade",
      SHOW: "show"
    },
        _ = {
      TOOLTIP: ".tooltip",
      TOOLTIP_INNER: ".tooltip-inner",
      ARROW: ".arrow"
    },
        g = {
      HOVER: "hover",
      FOCUS: "focus",
      CLICK: "click",
      MANUAL: "manual"
    },
        m = function () {
      function a(t, e) {
        n(this, a), this._isEnabled = !0, this._timeout = 0, this._hoverState = "", this._activeTrigger = {}, this._popper = null, this.element = t, this.config = this._getConfig(e), this.tip = null, this._setListeners();
      }

      return a.prototype.enable = function () {
        this._isEnabled = !0;
      }, a.prototype.disable = function () {
        this._isEnabled = !1;
      }, a.prototype.toggleEnabled = function () {
        this._isEnabled = !this._isEnabled;
      }, a.prototype.toggle = function (e) {
        if (e) {
          var n = this.constructor.DATA_KEY,
              i = t(e.currentTarget).data(n);
          i || (i = new this.constructor(e.currentTarget, this._getDelegateConfig()), t(e.currentTarget).data(n, i)), i._activeTrigger.click = !i._activeTrigger.click, i._isWithActiveTrigger() ? i._enter(null, i) : i._leave(null, i);
        } else {
          if (t(this.getTipElement()).hasClass(p.SHOW)) return void this._leave(null, this);

          this._enter(null, this);
        }
      }, a.prototype.dispose = function () {
        clearTimeout(this._timeout), t.removeData(this.element, this.constructor.DATA_KEY), t(this.element).off(this.constructor.EVENT_KEY), t(this.element).closest(".modal").off("hide.bs.modal"), this.tip && t(this.tip).remove(), this._isEnabled = null, this._timeout = null, this._hoverState = null, this._activeTrigger = null, null !== this._popper && this._popper.destroy(), this._popper = null, this.element = null, this.config = null, this.tip = null;
      }, a.prototype.show = function () {
        var e = this;
        if ("none" === t(this.element).css("display")) throw new Error("Please use show on visible elements");
        var n = t.Event(this.constructor.Event.SHOW);

        if (this.isWithContent() && this._isEnabled) {
          t(this.element).trigger(n);
          var i = t.contains(this.element.ownerDocument.documentElement, this.element);
          if (n.isDefaultPrevented() || !i) return;
          var o = this.getTipElement(),
              s = r.getUID(this.constructor.NAME);
          o.setAttribute("id", s), this.element.setAttribute("aria-describedby", s), this.setContent(), this.config.animation && t(o).addClass(p.FADE);

          var l = "function" == typeof this.config.placement ? this.config.placement.call(this, o, this.element) : this.config.placement,
              h = this._getAttachment(l);

          this.addAttachmentClass(h);
          var c = !1 === this.config.container ? document.body : t(this.config.container);
          t(o).data(this.constructor.DATA_KEY, this), t.contains(this.element.ownerDocument.documentElement, this.tip) || t(o).appendTo(c), t(this.element).trigger(this.constructor.Event.INSERTED), this._popper = new Popper(this.element, o, {
            placement: h,
            modifiers: {
              offset: {
                offset: this.config.offset
              },
              flip: {
                behavior: this.config.fallbackPlacement
              },
              arrow: {
                element: _.ARROW
              }
            },
            onCreate: function onCreate(t) {
              t.originalPlacement !== t.placement && e._handlePopperPlacementChange(t);
            },
            onUpdate: function onUpdate(t) {
              e._handlePopperPlacementChange(t);
            }
          }), t(o).addClass(p.SHOW), "ontouchstart" in document.documentElement && t("body").children().on("mouseover", null, t.noop);

          var u = function u() {
            e.config.animation && e._fixTransition();
            var n = e._hoverState;
            e._hoverState = null, t(e.element).trigger(e.constructor.Event.SHOWN), n === d.OUT && e._leave(null, e);
          };

          r.supportsTransitionEnd() && t(this.tip).hasClass(p.FADE) ? t(this.tip).one(r.TRANSITION_END, u).emulateTransitionEnd(a._TRANSITION_DURATION) : u();
        }
      }, a.prototype.hide = function (e) {
        var n = this,
            i = this.getTipElement(),
            o = t.Event(this.constructor.Event.HIDE),
            s = function s() {
          n._hoverState !== d.SHOW && i.parentNode && i.parentNode.removeChild(i), n._cleanTipClass(), n.element.removeAttribute("aria-describedby"), t(n.element).trigger(n.constructor.Event.HIDDEN), null !== n._popper && n._popper.destroy(), e && e();
        };

        t(this.element).trigger(o), o.isDefaultPrevented() || (t(i).removeClass(p.SHOW), "ontouchstart" in document.documentElement && t("body").children().off("mouseover", null, t.noop), this._activeTrigger[g.CLICK] = !1, this._activeTrigger[g.FOCUS] = !1, this._activeTrigger[g.HOVER] = !1, r.supportsTransitionEnd() && t(this.tip).hasClass(p.FADE) ? t(i).one(r.TRANSITION_END, s).emulateTransitionEnd(150) : s(), this._hoverState = "");
      }, a.prototype.update = function () {
        null !== this._popper && this._popper.scheduleUpdate();
      }, a.prototype.isWithContent = function () {
        return Boolean(this.getTitle());
      }, a.prototype.addAttachmentClass = function (e) {
        t(this.getTipElement()).addClass("bs-tooltip-" + e);
      }, a.prototype.getTipElement = function () {
        return this.tip = this.tip || t(this.config.template)[0];
      }, a.prototype.setContent = function () {
        var e = t(this.getTipElement());
        this.setElementContent(e.find(_.TOOLTIP_INNER), this.getTitle()), e.removeClass(p.FADE + " " + p.SHOW);
      }, a.prototype.setElementContent = function (e, n) {
        var o = this.config.html;
        "object" === (void 0 === n ? "undefined" : i(n)) && (n.nodeType || n.jquery) ? o ? t(n).parent().is(e) || e.empty().append(n) : e.text(t(n).text()) : e[o ? "html" : "text"](n);
      }, a.prototype.getTitle = function () {
        var t = this.element.getAttribute("data-original-title");
        return t || (t = "function" == typeof this.config.title ? this.config.title.call(this.element) : this.config.title), t;
      }, a.prototype._getAttachment = function (t) {
        return c[t.toUpperCase()];
      }, a.prototype._setListeners = function () {
        var e = this;
        this.config.trigger.split(" ").forEach(function (n) {
          if ("click" === n) t(e.element).on(e.constructor.Event.CLICK, e.config.selector, function (t) {
            return e.toggle(t);
          });else if (n !== g.MANUAL) {
            var i = n === g.HOVER ? e.constructor.Event.MOUSEENTER : e.constructor.Event.FOCUSIN,
                o = n === g.HOVER ? e.constructor.Event.MOUSELEAVE : e.constructor.Event.FOCUSOUT;
            t(e.element).on(i, e.config.selector, function (t) {
              return e._enter(t);
            }).on(o, e.config.selector, function (t) {
              return e._leave(t);
            });
          }
          t(e.element).closest(".modal").on("hide.bs.modal", function () {
            return e.hide();
          });
        }), this.config.selector ? this.config = t.extend({}, this.config, {
          trigger: "manual",
          selector: ""
        }) : this._fixTitle();
      }, a.prototype._fixTitle = function () {
        var t = i(this.element.getAttribute("data-original-title"));
        (this.element.getAttribute("title") || "string" !== t) && (this.element.setAttribute("data-original-title", this.element.getAttribute("title") || ""), this.element.setAttribute("title", ""));
      }, a.prototype._enter = function (e, n) {
        var i = this.constructor.DATA_KEY;
        (n = n || t(e.currentTarget).data(i)) || (n = new this.constructor(e.currentTarget, this._getDelegateConfig()), t(e.currentTarget).data(i, n)), e && (n._activeTrigger["focusin" === e.type ? g.FOCUS : g.HOVER] = !0), t(n.getTipElement()).hasClass(p.SHOW) || n._hoverState === d.SHOW ? n._hoverState = d.SHOW : (clearTimeout(n._timeout), n._hoverState = d.SHOW, n.config.delay && n.config.delay.show ? n._timeout = setTimeout(function () {
          n._hoverState === d.SHOW && n.show();
        }, n.config.delay.show) : n.show());
      }, a.prototype._leave = function (e, n) {
        var i = this.constructor.DATA_KEY;
        (n = n || t(e.currentTarget).data(i)) || (n = new this.constructor(e.currentTarget, this._getDelegateConfig()), t(e.currentTarget).data(i, n)), e && (n._activeTrigger["focusout" === e.type ? g.FOCUS : g.HOVER] = !1), n._isWithActiveTrigger() || (clearTimeout(n._timeout), n._hoverState = d.OUT, n.config.delay && n.config.delay.hide ? n._timeout = setTimeout(function () {
          n._hoverState === d.OUT && n.hide();
        }, n.config.delay.hide) : n.hide());
      }, a.prototype._isWithActiveTrigger = function () {
        for (var t in this._activeTrigger) if (this._activeTrigger[t]) return !0;

        return !1;
      }, a.prototype._getConfig = function (n) {
        return (n = t.extend({}, this.constructor.Default, t(this.element).data(), n)).delay && "number" == typeof n.delay && (n.delay = {
          show: n.delay,
          hide: n.delay
        }), n.title && "number" == typeof n.title && (n.title = n.title.toString()), n.content && "number" == typeof n.content && (n.content = n.content.toString()), r.typeCheckConfig(e, n, this.constructor.DefaultType), n;
      }, a.prototype._getDelegateConfig = function () {
        var t = {};
        if (this.config) for (var e in this.config) this.constructor.Default[e] !== this.config[e] && (t[e] = this.config[e]);
        return t;
      }, a.prototype._cleanTipClass = function () {
        var e = t(this.getTipElement()),
            n = e.attr("class").match(l);
        null !== n && n.length > 0 && e.removeClass(n.join(""));
      }, a.prototype._handlePopperPlacementChange = function (t) {
        this._cleanTipClass(), this.addAttachmentClass(this._getAttachment(t.placement));
      }, a.prototype._fixTransition = function () {
        var e = this.getTipElement(),
            n = this.config.animation;
        null === e.getAttribute("x-placement") && (t(e).removeClass(p.FADE), this.config.animation = !1, this.hide(), this.show(), this.config.animation = n);
      }, a._jQueryInterface = function (e) {
        return this.each(function () {
          var n = t(this).data("bs.tooltip"),
              o = "object" === (void 0 === e ? "undefined" : i(e)) && e;

          if ((n || !/dispose|hide/.test(e)) && (n || (n = new a(this, o), t(this).data("bs.tooltip", n)), "string" == typeof e)) {
            if (void 0 === n[e]) throw new Error('No method named "' + e + '"');
            n[e]();
          }
        });
      }, o(a, null, [{
        key: "VERSION",
        get: function get() {
          return "4.0.0-beta";
        }
      }, {
        key: "Default",
        get: function get() {
          return u;
        }
      }, {
        key: "NAME",
        get: function get() {
          return e;
        }
      }, {
        key: "DATA_KEY",
        get: function get() {
          return "bs.tooltip";
        }
      }, {
        key: "Event",
        get: function get() {
          return f;
        }
      }, {
        key: "EVENT_KEY",
        get: function get() {
          return s;
        }
      }, {
        key: "DefaultType",
        get: function get() {
          return h;
        }
      }]), a;
    }();

    return t.fn[e] = m._jQueryInterface, t.fn[e].Constructor = m, t.fn[e].noConflict = function () {
      return t.fn[e] = a, m._jQueryInterface;
    }, m;
  }(jQuery));

  !function (r) {
    var a = "popover",
        l = ".bs.popover",
        h = r.fn[a],
        c = new RegExp("(^|\\s)bs-popover\\S+", "g"),
        u = r.extend({}, s.Default, {
      placement: "right",
      trigger: "click",
      content: "",
      template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>'
    }),
        d = r.extend({}, s.DefaultType, {
      content: "(string|element|function)"
    }),
        f = {
      FADE: "fade",
      SHOW: "show"
    },
        p = {
      TITLE: ".popover-header",
      CONTENT: ".popover-body"
    },
        _ = {
      HIDE: "hide" + l,
      HIDDEN: "hidden" + l,
      SHOW: "show" + l,
      SHOWN: "shown" + l,
      INSERTED: "inserted" + l,
      CLICK: "click" + l,
      FOCUSIN: "focusin" + l,
      FOCUSOUT: "focusout" + l,
      MOUSEENTER: "mouseenter" + l,
      MOUSELEAVE: "mouseleave" + l
    },
        g = function (s) {
      function h() {
        return n(this, h), t(this, s.apply(this, arguments));
      }

      return e(h, s), h.prototype.isWithContent = function () {
        return this.getTitle() || this._getContent();
      }, h.prototype.addAttachmentClass = function (t) {
        r(this.getTipElement()).addClass("bs-popover-" + t);
      }, h.prototype.getTipElement = function () {
        return this.tip = this.tip || r(this.config.template)[0];
      }, h.prototype.setContent = function () {
        var t = r(this.getTipElement());
        this.setElementContent(t.find(p.TITLE), this.getTitle()), this.setElementContent(t.find(p.CONTENT), this._getContent()), t.removeClass(f.FADE + " " + f.SHOW);
      }, h.prototype._getContent = function () {
        return this.element.getAttribute("data-content") || ("function" == typeof this.config.content ? this.config.content.call(this.element) : this.config.content);
      }, h.prototype._cleanTipClass = function () {
        var t = r(this.getTipElement()),
            e = t.attr("class").match(c);
        null !== e && e.length > 0 && t.removeClass(e.join(""));
      }, h._jQueryInterface = function (t) {
        return this.each(function () {
          var e = r(this).data("bs.popover"),
              n = "object" === (void 0 === t ? "undefined" : i(t)) ? t : null;

          if ((e || !/destroy|hide/.test(t)) && (e || (e = new h(this, n), r(this).data("bs.popover", e)), "string" == typeof t)) {
            if (void 0 === e[t]) throw new Error('No method named "' + t + '"');
            e[t]();
          }
        });
      }, o(h, null, [{
        key: "VERSION",
        get: function get() {
          return "4.0.0-beta";
        }
      }, {
        key: "Default",
        get: function get() {
          return u;
        }
      }, {
        key: "NAME",
        get: function get() {
          return a;
        }
      }, {
        key: "DATA_KEY",
        get: function get() {
          return "bs.popover";
        }
      }, {
        key: "Event",
        get: function get() {
          return _;
        }
      }, {
        key: "EVENT_KEY",
        get: function get() {
          return l;
        }
      }, {
        key: "DefaultType",
        get: function get() {
          return d;
        }
      }]), h;
    }(s);

    r.fn[a] = g._jQueryInterface, r.fn[a].Constructor = g, r.fn[a].noConflict = function () {
      return r.fn[a] = h, g._jQueryInterface;
    };
  }(jQuery);
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2NsaWVudC9saWJzL2Jvb3RzdHJhcC5taW4uanMiXSwibmFtZXMiOlsialF1ZXJ5IiwiRXJyb3IiLCJ0IiwiZSIsImZuIiwianF1ZXJ5Iiwic3BsaXQiLCJSZWZlcmVuY2VFcnJvciIsIlR5cGVFcnJvciIsInByb3RvdHlwZSIsIk9iamVjdCIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwidmFsdWUiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIm4iLCJpIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJvIiwibGVuZ3RoIiwiZGVmaW5lUHJvcGVydHkiLCJrZXkiLCJyIiwidG9TdHJpbmciLCJjYWxsIiwibWF0Y2giLCJ0b0xvd2VyQ2FzZSIsIm5vZGVUeXBlIiwiYmluZFR5cGUiLCJzIiwiZW5kIiwiZGVsZWdhdGVUeXBlIiwiaGFuZGxlIiwidGFyZ2V0IiwiaXMiLCJoYW5kbGVPYmoiLCJoYW5kbGVyIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJ3aW5kb3ciLCJRVW5pdCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImEiLCJzdHlsZSIsIm9uZSIsImwiLCJUUkFOU0lUSU9OX0VORCIsInNldFRpbWVvdXQiLCJ0cmlnZ2VyVHJhbnNpdGlvbkVuZCIsIldlYmtpdFRyYW5zaXRpb24iLCJNb3pUcmFuc2l0aW9uIiwiT1RyYW5zaXRpb24iLCJ0cmFuc2l0aW9uIiwiZ2V0VUlEIiwiTWF0aCIsInJhbmRvbSIsImdldEVsZW1lbnRCeUlkIiwiZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCIsImdldEF0dHJpYnV0ZSIsInJlZmxvdyIsIm9mZnNldEhlaWdodCIsInRyaWdnZXIiLCJzdXBwb3J0c1RyYW5zaXRpb25FbmQiLCJCb29sZWFuIiwidHlwZUNoZWNrQ29uZmlnIiwiaGFzT3duUHJvcGVydHkiLCJSZWdFeHAiLCJ0ZXN0IiwidG9VcHBlckNhc2UiLCJlbXVsYXRlVHJhbnNpdGlvbkVuZCIsImV2ZW50Iiwic3BlY2lhbCIsIkRJU01JU1MiLCJDTE9TRSIsIkNMT1NFRCIsIkNMSUNLX0RBVEFfQVBJIiwiQUxFUlQiLCJGQURFIiwiU0hPVyIsImgiLCJfZWxlbWVudCIsImNsb3NlIiwiX2dldFJvb3RFbGVtZW50IiwiX3RyaWdnZXJDbG9zZUV2ZW50IiwiaXNEZWZhdWx0UHJldmVudGVkIiwiX3JlbW92ZUVsZW1lbnQiLCJkaXNwb3NlIiwicmVtb3ZlRGF0YSIsImNsb3Nlc3QiLCJFdmVudCIsInJlbW92ZUNsYXNzIiwiaGFzQ2xhc3MiLCJfZGVzdHJveUVsZW1lbnQiLCJkZXRhY2giLCJyZW1vdmUiLCJfalF1ZXJ5SW50ZXJmYWNlIiwiZWFjaCIsImRhdGEiLCJfaGFuZGxlRGlzbWlzcyIsInByZXZlbnREZWZhdWx0IiwiZ2V0Iiwib24iLCJDb25zdHJ1Y3RvciIsIm5vQ29uZmxpY3QiLCJBQ1RJVkUiLCJCVVRUT04iLCJGT0NVUyIsIkRBVEFfVE9HR0xFX0NBUlJPVCIsIkRBVEFfVE9HR0xFIiwiSU5QVVQiLCJGT0NVU19CTFVSX0RBVEFfQVBJIiwidG9nZ2xlIiwiZmluZCIsInR5cGUiLCJjaGVja2VkIiwiaGFzQXR0cmlidXRlIiwiY2xhc3NMaXN0IiwiY29udGFpbnMiLCJmb2N1cyIsInNldEF0dHJpYnV0ZSIsInRvZ2dsZUNsYXNzIiwiaW50ZXJ2YWwiLCJrZXlib2FyZCIsInNsaWRlIiwicGF1c2UiLCJ3cmFwIiwiYyIsInUiLCJORVhUIiwiUFJFViIsIkxFRlQiLCJSSUdIVCIsImQiLCJTTElERSIsIlNMSUQiLCJLRVlET1dOIiwiTU9VU0VFTlRFUiIsIk1PVVNFTEVBVkUiLCJUT1VDSEVORCIsIkxPQURfREFUQV9BUEkiLCJmIiwiQ0FST1VTRUwiLCJJVEVNIiwicCIsIkFDVElWRV9JVEVNIiwiTkVYVF9QUkVWIiwiSU5ESUNBVE9SUyIsIkRBVEFfU0xJREUiLCJEQVRBX1JJREUiLCJfIiwiX2l0ZW1zIiwiX2ludGVydmFsIiwiX2FjdGl2ZUVsZW1lbnQiLCJfaXNQYXVzZWQiLCJfaXNTbGlkaW5nIiwidG91Y2hUaW1lb3V0IiwiX2NvbmZpZyIsIl9nZXRDb25maWciLCJfaW5kaWNhdG9yc0VsZW1lbnQiLCJfYWRkRXZlbnRMaXN0ZW5lcnMiLCJuZXh0IiwiX3NsaWRlIiwibmV4dFdoZW5WaXNpYmxlIiwiaGlkZGVuIiwicHJldiIsImN5Y2xlIiwiY2xlYXJJbnRlcnZhbCIsInNldEludGVydmFsIiwidmlzaWJpbGl0eVN0YXRlIiwiYmluZCIsInRvIiwiX2dldEl0ZW1JbmRleCIsIm9mZiIsImV4dGVuZCIsIl9rZXlkb3duIiwiZG9jdW1lbnRFbGVtZW50IiwiY2xlYXJUaW1lb3V0IiwidGFnTmFtZSIsIndoaWNoIiwibWFrZUFycmF5IiwicGFyZW50IiwiaW5kZXhPZiIsIl9nZXRJdGVtQnlEaXJlY3Rpb24iLCJfdHJpZ2dlclNsaWRlRXZlbnQiLCJyZWxhdGVkVGFyZ2V0IiwiZGlyZWN0aW9uIiwiZnJvbSIsIl9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50IiwiY2hpbGRyZW4iLCJhZGRDbGFzcyIsImciLCJtIiwiX2RhdGFBcGlDbGlja0hhbmRsZXIiLCJTSE9XTiIsIkhJREUiLCJISURERU4iLCJDT0xMQVBTRSIsIkNPTExBUFNJTkciLCJDT0xMQVBTRUQiLCJXSURUSCIsIkhFSUdIVCIsIkFDVElWRVMiLCJfaXNUcmFuc2l0aW9uaW5nIiwiX3RyaWdnZXJBcnJheSIsImlkIiwiZmlsdGVyIiwicHVzaCIsIl9wYXJlbnQiLCJfZ2V0UGFyZW50IiwiX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyIsImhpZGUiLCJzaG93IiwiX2dldERpbWVuc2lvbiIsImF0dHIiLCJzZXRUcmFuc2l0aW9uaW5nIiwic2xpY2UiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJfZ2V0VGFyZ2V0RnJvbUVsZW1lbnQiLCJQb3BwZXIiLCJDTElDSyIsIktFWURPV05fREFUQV9BUEkiLCJLRVlVUF9EQVRBX0FQSSIsIkRJU0FCTEVEIiwiRFJPUFVQIiwiTUVOVVJJR0hUIiwiTUVOVUxFRlQiLCJGT1JNX0NISUxEIiwiTUVOVSIsIk5BVkJBUl9OQVYiLCJWSVNJQkxFX0lURU1TIiwiVE9QIiwiVE9QRU5EIiwiQk9UVE9NIiwiQk9UVE9NRU5EIiwicGxhY2VtZW50Iiwib2Zmc2V0IiwiZmxpcCIsIl9wb3BwZXIiLCJfbWVudSIsIl9nZXRNZW51RWxlbWVudCIsIl9pbk5hdmJhciIsIl9kZXRlY3ROYXZiYXIiLCJkaXNhYmxlZCIsIl9nZXRQYXJlbnRGcm9tRWxlbWVudCIsIl9jbGVhck1lbnVzIiwiX2dldFBvcHBlckNvbmZpZyIsIm5vb3AiLCJkZXN0cm95IiwidXBkYXRlIiwic2NoZWR1bGVVcGRhdGUiLCJzdG9wUHJvcGFnYXRpb24iLCJEZWZhdWx0IiwiRGVmYXVsdFR5cGUiLCJfZ2V0UGxhY2VtZW50IiwibW9kaWZpZXJzIiwiZW5hYmxlZCIsImFwcGx5U3R5bGUiLCJwYXJlbnROb2RlIiwiX2RhdGFBcGlLZXlkb3duSGFuZGxlciIsImJhY2tkcm9wIiwiRk9DVVNJTiIsIlJFU0laRSIsIkNMSUNLX0RJU01JU1MiLCJLRVlET1dOX0RJU01JU1MiLCJNT1VTRVVQX0RJU01JU1MiLCJNT1VTRURPV05fRElTTUlTUyIsIlNDUk9MTEJBUl9NRUFTVVJFUiIsIkJBQ0tEUk9QIiwiT1BFTiIsIkRJQUxPRyIsIkRBVEFfRElTTUlTUyIsIkZJWEVEX0NPTlRFTlQiLCJOQVZCQVJfVE9HR0xFUiIsIl9kaWFsb2ciLCJfYmFja2Ryb3AiLCJfaXNTaG93biIsIl9pc0JvZHlPdmVyZmxvd2luZyIsIl9pZ25vcmVCYWNrZHJvcENsaWNrIiwiX29yaWdpbmFsQm9keVBhZGRpbmciLCJfc2Nyb2xsYmFyV2lkdGgiLCJfY2hlY2tTY3JvbGxiYXIiLCJfc2V0U2Nyb2xsYmFyIiwiYm9keSIsIl9zZXRFc2NhcGVFdmVudCIsIl9zZXRSZXNpemVFdmVudCIsIl9zaG93QmFja2Ryb3AiLCJfc2hvd0VsZW1lbnQiLCJfaGlkZU1vZGFsIiwiaGFuZGxlVXBkYXRlIiwiX2FkanVzdERpYWxvZyIsIk5vZGUiLCJFTEVNRU5UX05PREUiLCJhcHBlbmRDaGlsZCIsImRpc3BsYXkiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzY3JvbGxUb3AiLCJfZW5mb3JjZUZvY3VzIiwiaGFzIiwiX3Jlc2V0QWRqdXN0bWVudHMiLCJfcmVzZXRTY3JvbGxiYXIiLCJfcmVtb3ZlQmFja2Ryb3AiLCJjbGFzc05hbWUiLCJhcHBlbmRUbyIsImN1cnJlbnRUYXJnZXQiLCJzY3JvbGxIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsImNsaWVudFdpZHRoIiwiaW5uZXJXaWR0aCIsIl9nZXRTY3JvbGxiYXJXaWR0aCIsImNzcyIsInBhcnNlRmxvYXQiLCJtYXJnaW5SaWdodCIsIndpZHRoIiwicmVtb3ZlQ2hpbGQiLCJtZXRob2QiLCJBQ1RJVkFURSIsIlNDUk9MTCIsIkRST1BET1dOX0lURU0iLCJEUk9QRE9XTl9NRU5VIiwiREFUQV9TUFkiLCJOQVZfTElTVF9HUk9VUCIsIk5BVl9MSU5LUyIsIkxJU1RfSVRFTVMiLCJEUk9QRE9XTiIsIkRST1BET1dOX0lURU1TIiwiRFJPUERPV05fVE9HR0xFIiwiT0ZGU0VUIiwiUE9TSVRJT04iLCJfc2Nyb2xsRWxlbWVudCIsIl9zZWxlY3RvciIsIl9vZmZzZXRzIiwiX3RhcmdldHMiLCJfYWN0aXZlVGFyZ2V0IiwiX3Njcm9sbEhlaWdodCIsIl9wcm9jZXNzIiwicmVmcmVzaCIsIl9nZXRTY3JvbGxUb3AiLCJfZ2V0U2Nyb2xsSGVpZ2h0IiwibWFwIiwiaGVpZ2h0IiwidG9wIiwic29ydCIsImZvckVhY2giLCJwYWdlWU9mZnNldCIsIm1heCIsIl9nZXRPZmZzZXRIZWlnaHQiLCJpbm5lckhlaWdodCIsIl9hY3RpdmF0ZSIsIl9jbGVhciIsImpvaW4iLCJwYXJlbnRzIiwidGFiIiwiRFJPUERPV05fQUNUSVZFX0NISUxEIiwiX3RyYW5zaXRpb25Db21wbGV0ZSIsImFuaW1hdGlvbiIsInRlbXBsYXRlIiwidGl0bGUiLCJkZWxheSIsImh0bWwiLCJzZWxlY3RvciIsImNvbnRhaW5lciIsImZhbGxiYWNrUGxhY2VtZW50IiwiQVVUTyIsIk9VVCIsIklOU0VSVEVEIiwiRk9DVVNPVVQiLCJUT09MVElQIiwiVE9PTFRJUF9JTk5FUiIsIkFSUk9XIiwiSE9WRVIiLCJNQU5VQUwiLCJfaXNFbmFibGVkIiwiX3RpbWVvdXQiLCJfaG92ZXJTdGF0ZSIsIl9hY3RpdmVUcmlnZ2VyIiwiZWxlbWVudCIsImNvbmZpZyIsInRpcCIsIl9zZXRMaXN0ZW5lcnMiLCJlbmFibGUiLCJkaXNhYmxlIiwidG9nZ2xlRW5hYmxlZCIsIkRBVEFfS0VZIiwiX2dldERlbGVnYXRlQ29uZmlnIiwiY2xpY2siLCJfaXNXaXRoQWN0aXZlVHJpZ2dlciIsIl9lbnRlciIsIl9sZWF2ZSIsImdldFRpcEVsZW1lbnQiLCJFVkVOVF9LRVkiLCJpc1dpdGhDb250ZW50Iiwib3duZXJEb2N1bWVudCIsIk5BTUUiLCJzZXRDb250ZW50IiwiX2dldEF0dGFjaG1lbnQiLCJhZGRBdHRhY2htZW50Q2xhc3MiLCJiZWhhdmlvciIsImFycm93Iiwib25DcmVhdGUiLCJvcmlnaW5hbFBsYWNlbWVudCIsIl9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UiLCJvblVwZGF0ZSIsIl9maXhUcmFuc2l0aW9uIiwiX1RSQU5TSVRJT05fRFVSQVRJT04iLCJfY2xlYW5UaXBDbGFzcyIsImdldFRpdGxlIiwic2V0RWxlbWVudENvbnRlbnQiLCJlbXB0eSIsImFwcGVuZCIsInRleHQiLCJfZml4VGl0bGUiLCJjb250ZW50IiwiVElUTEUiLCJDT05URU5UIiwiX2dldENvbnRlbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7QUFLQSxJQUFHLGVBQWEsT0FBT0EsTUFBdkIsRUFBOEIsTUFBTSxJQUFJQyxLQUFKLENBQVUsZ0dBQVYsQ0FBTjtBQUFrSCxDQUFDLFVBQVNDLENBQVQsRUFBVztBQUFDLE1BQUlDLENBQUMsR0FBQ0gsTUFBTSxDQUFDSSxFQUFQLENBQVVDLE1BQVYsQ0FBaUJDLEtBQWpCLENB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Z0QsQ0FBdG9COztBQUE4b0VQLElBQUFBLENBQUMsQ0FBQ3ZCLEVBQUYsQ0FBSzRDLENBQUwsSUFBUW9KLENBQUMsQ0FBQy9GLGdCQUFWLEVBQTJCMUUsQ0FBQyxDQUFDdkIsRUFBRixDQUFLNEMsQ0FBTCxFQUFRNEQsV0FBUixHQUFvQndGLENBQS9DLEVBQWlEekssQ0FBQyxDQUFDdkIsRUFBRixDQUFLNEMsQ0FBTCxFQUFRNkQsVUFBUixHQUFtQixZQUFVO0FBQUMsYUFBT2xGLENBQUMsQ0FBQ3ZCLEVBQUYsQ0FBSzRDLENBQUwsSUFBUXFDLENBQVIsRUFBVStHLENBQUMsQ0FBQy9GLGdCQUFuQjtBQUFvQyxLQUFuSDtBQUFvSCxHQUE5d0UsQ0FBK3dFckcsTUFBL3dFLENBQUQ7QUFBd3hFLENBQWozaUQsRUFBcE4iLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcclxuICogQm9vdHN0cmFwIHY0LjAuMC1iZXRhIChodHRwczovL2dldGJvb3RzdHJhcC5jb20pXHJcbiAqIENvcHlyaWdodCAyMDExLTIwMTcgVGhlIEJvb3RzdHJhcCBBdXRob3JzIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvZ3JhcGhzL2NvbnRyaWJ1dG9ycylcclxuICogTGljZW5zZWQgdW5kZXIgTUlUIChodHRwczovL2dpdGh1Yi5jb20vdHdicy9ib290c3RyYXAvYmxvYi9tYXN0ZXIvTElDRU5TRSlcclxuICovXHJcbmlmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBqUXVlcnkpdGhyb3cgbmV3IEVycm9yKFwiQm9vdHN0cmFwJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBqUXVlcnkuIGpRdWVyeSBtdXN0IGJlIGluY2x1ZGVkIGJlZm9yZSBCb290c3RyYXAncyBKYXZhU2NyaXB0LlwiKTshZnVuY3Rpb24odCl7dmFyIGU9alF1ZXJ5LmZuLmpxdWVyeS5zcGxpdChcIiBcIilbMF0uc3BsaXQoXCIuXCIpO2lmKGVbMF08MiYmZVsxXTw5fHwxPT1lWzBdJiY5PT1lWzFdJiZlWzJdPDF8fGVbMF0+PTQpdGhyb3cgbmV3IEVycm9yKFwiQm9vdHN0cmFwJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBhdCBsZWFzdCBqUXVlcnkgdjEuOS4xIGJ1dCBsZXNzIHRoYW4gdjQuMC4wXCIpfSgpLGZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe2lmKCF0KXRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtyZXR1cm4hZXx8XCJvYmplY3RcIiE9dHlwZW9mIGUmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIGU/dDplfWZ1bmN0aW9uIGUodCxlKXtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlJiZudWxsIT09ZSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIit0eXBlb2YgZSk7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlJiZlLnByb3RvdHlwZSx7Y29uc3RydWN0b3I6e3ZhbHVlOnQsZW51bWVyYWJsZTohMSx3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9fSksZSYmKE9iamVjdC5zZXRQcm90b3R5cGVPZj9PYmplY3Quc2V0UHJvdG90eXBlT2YodCxlKTp0Ll9fcHJvdG9fXz1lKX1mdW5jdGlvbiBuKHQsZSl7aWYoISh0IGluc3RhbmNlb2YgZSkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX12YXIgaT1cImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJlwic3ltYm9sXCI9PXR5cGVvZiBTeW1ib2wuaXRlcmF0b3I/ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fTpmdW5jdGlvbih0KXtyZXR1cm4gdCYmXCJmdW5jdGlvblwiPT10eXBlb2YgU3ltYm9sJiZ0LmNvbnN0cnVjdG9yPT09U3ltYm9sJiZ0IT09U3ltYm9sLnByb3RvdHlwZT9cInN5bWJvbFwiOnR5cGVvZiB0fSxvPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0LGUpe2Zvcih2YXIgbj0wO248ZS5sZW5ndGg7bisrKXt2YXIgaT1lW25dO2kuZW51bWVyYWJsZT1pLmVudW1lcmFibGV8fCExLGkuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIGkmJihpLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodCxpLmtleSxpKX19cmV0dXJuIGZ1bmN0aW9uKGUsbixpKXtyZXR1cm4gbiYmdChlLnByb3RvdHlwZSxuKSxpJiZ0KGUsaSksZX19KCkscj1mdW5jdGlvbih0KXtmdW5jdGlvbiBlKHQpe3JldHVybnt9LnRvU3RyaW5nLmNhbGwodCkubWF0Y2goL1xccyhbYS16QS1aXSspLylbMV0udG9Mb3dlckNhc2UoKX1mdW5jdGlvbiBuKHQpe3JldHVybih0WzBdfHx0KS5ub2RlVHlwZX1mdW5jdGlvbiBpKCl7cmV0dXJue2JpbmRUeXBlOnMuZW5kLGRlbGVnYXRlVHlwZTpzLmVuZCxoYW5kbGU6ZnVuY3Rpb24oZSl7aWYodChlLnRhcmdldCkuaXModGhpcykpcmV0dXJuIGUuaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpfX19ZnVuY3Rpb24gbygpe2lmKHdpbmRvdy5RVW5pdClyZXR1cm4hMTt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYm9vdHN0cmFwXCIpO2Zvcih2YXIgZSBpbiBhKWlmKHZvaWQgMCE9PXQuc3R5bGVbZV0pcmV0dXJue2VuZDphW2VdfTtyZXR1cm4hMX1mdW5jdGlvbiByKGUpe3ZhciBuPXRoaXMsaT0hMTtyZXR1cm4gdCh0aGlzKS5vbmUobC5UUkFOU0lUSU9OX0VORCxmdW5jdGlvbigpe2k9ITB9KSxzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7aXx8bC50cmlnZ2VyVHJhbnNpdGlvbkVuZChuKX0sZSksdGhpc312YXIgcz0hMSxhPXtXZWJraXRUcmFuc2l0aW9uOlwid2Via2l0VHJhbnNpdGlvbkVuZFwiLE1velRyYW5zaXRpb246XCJ0cmFuc2l0aW9uZW5kXCIsT1RyYW5zaXRpb246XCJvVHJhbnNpdGlvbkVuZCBvdHJhbnNpdGlvbmVuZFwiLHRyYW5zaXRpb246XCJ0cmFuc2l0aW9uZW5kXCJ9LGw9e1RSQU5TSVRJT05fRU5EOlwiYnNUcmFuc2l0aW9uRW5kXCIsZ2V0VUlEOmZ1bmN0aW9uKHQpe2Rve3QrPX5+KDFlNipNYXRoLnJhbmRvbSgpKX13aGlsZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0KSk7cmV0dXJuIHR9LGdldFNlbGVjdG9yRnJvbUVsZW1lbnQ6ZnVuY3Rpb24oZSl7dmFyIG49ZS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXRhcmdldFwiKTtuJiZcIiNcIiE9PW58fChuPWUuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKXx8XCJcIik7dHJ5e3JldHVybiB0KG4pLmxlbmd0aD4wP246bnVsbH1jYXRjaCh0KXtyZXR1cm4gbnVsbH19LHJlZmxvdzpmdW5jdGlvbih0KXtyZXR1cm4gdC5vZmZzZXRIZWlnaHR9LHRyaWdnZXJUcmFuc2l0aW9uRW5kOmZ1bmN0aW9uKGUpe3QoZSkudHJpZ2dlcihzLmVuZCl9LHN1cHBvcnRzVHJhbnNpdGlvbkVuZDpmdW5jdGlvbigpe3JldHVybiBCb29sZWFuKHMpfSx0eXBlQ2hlY2tDb25maWc6ZnVuY3Rpb24odCxpLG8pe2Zvcih2YXIgciBpbiBvKWlmKG8uaGFzT3duUHJvcGVydHkocikpe3ZhciBzPW9bcl0sYT1pW3JdLGw9YSYmbihhKT9cImVsZW1lbnRcIjplKGEpO2lmKCFuZXcgUmVnRXhwKHMpLnRlc3QobCkpdGhyb3cgbmV3IEVycm9yKHQudG9VcHBlckNhc2UoKSsnOiBPcHRpb24gXCInK3IrJ1wiIHByb3ZpZGVkIHR5cGUgXCInK2wrJ1wiIGJ1dCBleHBlY3RlZCB0eXBlIFwiJytzKydcIi4nKX19fTtyZXR1cm4gcz1vKCksdC5mbi5lbXVsYXRlVHJhbnNpdGlvbkVuZD1yLGwuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkmJih0LmV2ZW50LnNwZWNpYWxbbC5UUkFOU0lUSU9OX0VORF09aSgpKSxsfShqUXVlcnkpLHM9KGZ1bmN0aW9uKHQpe3ZhciBlPVwiYWxlcnRcIixpPXQuZm5bZV0scz17RElTTUlTUzonW2RhdGEtZGlzbWlzcz1cImFsZXJ0XCJdJ30sYT17Q0xPU0U6XCJjbG9zZS5icy5hbGVydFwiLENMT1NFRDpcImNsb3NlZC5icy5hbGVydFwiLENMSUNLX0RBVEFfQVBJOlwiY2xpY2suYnMuYWxlcnQuZGF0YS1hcGlcIn0sbD17QUxFUlQ6XCJhbGVydFwiLEZBREU6XCJmYWRlXCIsU0hPVzpcInNob3dcIn0saD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCl7bih0aGlzLGUpLHRoaXMuX2VsZW1lbnQ9dH1yZXR1cm4gZS5wcm90b3R5cGUuY2xvc2U9ZnVuY3Rpb24odCl7dD10fHx0aGlzLl9lbGVtZW50O3ZhciBlPXRoaXMuX2dldFJvb3RFbGVtZW50KHQpO3RoaXMuX3RyaWdnZXJDbG9zZUV2ZW50KGUpLmlzRGVmYXVsdFByZXZlbnRlZCgpfHx0aGlzLl9yZW1vdmVFbGVtZW50KGUpfSxlLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7dC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsXCJicy5hbGVydFwiKSx0aGlzLl9lbGVtZW50PW51bGx9LGUucHJvdG90eXBlLl9nZXRSb290RWxlbWVudD1mdW5jdGlvbihlKXt2YXIgbj1yLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZSksaT0hMTtyZXR1cm4gbiYmKGk9dChuKVswXSksaXx8KGk9dChlKS5jbG9zZXN0KFwiLlwiK2wuQUxFUlQpWzBdKSxpfSxlLnByb3RvdHlwZS5fdHJpZ2dlckNsb3NlRXZlbnQ9ZnVuY3Rpb24oZSl7dmFyIG49dC5FdmVudChhLkNMT1NFKTtyZXR1cm4gdChlKS50cmlnZ2VyKG4pLG59LGUucHJvdG90eXBlLl9yZW1vdmVFbGVtZW50PWZ1bmN0aW9uKGUpe3ZhciBuPXRoaXM7dChlKS5yZW1vdmVDbGFzcyhsLlNIT1cpLHIuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkmJnQoZSkuaGFzQ2xhc3MobC5GQURFKT90KGUpLm9uZShyLlRSQU5TSVRJT05fRU5ELGZ1bmN0aW9uKHQpe3JldHVybiBuLl9kZXN0cm95RWxlbWVudChlLHQpfSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoMTUwKTp0aGlzLl9kZXN0cm95RWxlbWVudChlKX0sZS5wcm90b3R5cGUuX2Rlc3Ryb3lFbGVtZW50PWZ1bmN0aW9uKGUpe3QoZSkuZGV0YWNoKCkudHJpZ2dlcihhLkNMT1NFRCkucmVtb3ZlKCl9LGUuX2pRdWVyeUludGVyZmFjZT1mdW5jdGlvbihuKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGk9dCh0aGlzKSxvPWkuZGF0YShcImJzLmFsZXJ0XCIpO298fChvPW5ldyBlKHRoaXMpLGkuZGF0YShcImJzLmFsZXJ0XCIsbykpLFwiY2xvc2VcIj09PW4mJm9bbl0odGhpcyl9KX0sZS5faGFuZGxlRGlzbWlzcz1mdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oZSl7ZSYmZS5wcmV2ZW50RGVmYXVsdCgpLHQuY2xvc2UodGhpcyl9fSxvKGUsbnVsbCxbe2tleTpcIlZFUlNJT05cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIjQuMC4wLWJldGFcIn19XSksZX0oKTt0KGRvY3VtZW50KS5vbihhLkNMSUNLX0RBVEFfQVBJLHMuRElTTUlTUyxoLl9oYW5kbGVEaXNtaXNzKG5ldyBoKSksdC5mbltlXT1oLl9qUXVlcnlJbnRlcmZhY2UsdC5mbltlXS5Db25zdHJ1Y3Rvcj1oLHQuZm5bZV0ubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiB0LmZuW2VdPWksaC5falF1ZXJ5SW50ZXJmYWNlfX0oalF1ZXJ5KSxmdW5jdGlvbih0KXt2YXIgZT1cImJ1dHRvblwiLGk9dC5mbltlXSxyPXtBQ1RJVkU6XCJhY3RpdmVcIixCVVRUT046XCJidG5cIixGT0NVUzpcImZvY3VzXCJ9LHM9e0RBVEFfVE9HR0xFX0NBUlJPVDonW2RhdGEtdG9nZ2xlXj1cImJ1dHRvblwiXScsREFUQV9UT0dHTEU6J1tkYXRhLXRvZ2dsZT1cImJ1dHRvbnNcIl0nLElOUFVUOlwiaW5wdXRcIixBQ1RJVkU6XCIuYWN0aXZlXCIsQlVUVE9OOlwiLmJ0blwifSxhPXtDTElDS19EQVRBX0FQSTpcImNsaWNrLmJzLmJ1dHRvbi5kYXRhLWFwaVwiLEZPQ1VTX0JMVVJfREFUQV9BUEk6XCJmb2N1cy5icy5idXR0b24uZGF0YS1hcGkgYmx1ci5icy5idXR0b24uZGF0YS1hcGlcIn0sbD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCl7bih0aGlzLGUpLHRoaXMuX2VsZW1lbnQ9dH1yZXR1cm4gZS5wcm90b3R5cGUudG9nZ2xlPWZ1bmN0aW9uKCl7dmFyIGU9ITAsbj0hMCxpPXQodGhpcy5fZWxlbWVudCkuY2xvc2VzdChzLkRBVEFfVE9HR0xFKVswXTtpZihpKXt2YXIgbz10KHRoaXMuX2VsZW1lbnQpLmZpbmQocy5JTlBVVClbMF07aWYobyl7aWYoXCJyYWRpb1wiPT09by50eXBlKWlmKG8uY2hlY2tlZCYmdCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhyLkFDVElWRSkpZT0hMTtlbHNle3ZhciBhPXQoaSkuZmluZChzLkFDVElWRSlbMF07YSYmdChhKS5yZW1vdmVDbGFzcyhyLkFDVElWRSl9aWYoZSl7aWYoby5oYXNBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKXx8aS5oYXNBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKXx8by5jbGFzc0xpc3QuY29udGFpbnMoXCJkaXNhYmxlZFwiKXx8aS5jbGFzc0xpc3QuY29udGFpbnMoXCJkaXNhYmxlZFwiKSlyZXR1cm47by5jaGVja2VkPSF0KHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKHIuQUNUSVZFKSx0KG8pLnRyaWdnZXIoXCJjaGFuZ2VcIil9by5mb2N1cygpLG49ITF9fW4mJnRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1wcmVzc2VkXCIsIXQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3Moci5BQ1RJVkUpKSxlJiZ0KHRoaXMuX2VsZW1lbnQpLnRvZ2dsZUNsYXNzKHIuQUNUSVZFKX0sZS5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe3QucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LFwiYnMuYnV0dG9uXCIpLHRoaXMuX2VsZW1lbnQ9bnVsbH0sZS5falF1ZXJ5SW50ZXJmYWNlPWZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgaT10KHRoaXMpLmRhdGEoXCJicy5idXR0b25cIik7aXx8KGk9bmV3IGUodGhpcyksdCh0aGlzKS5kYXRhKFwiYnMuYnV0dG9uXCIsaSkpLFwidG9nZ2xlXCI9PT1uJiZpW25dKCl9KX0sbyhlLG51bGwsW3trZXk6XCJWRVJTSU9OXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI0LjAuMC1iZXRhXCJ9fV0pLGV9KCk7dChkb2N1bWVudCkub24oYS5DTElDS19EQVRBX0FQSSxzLkRBVEFfVE9HR0xFX0NBUlJPVCxmdW5jdGlvbihlKXtlLnByZXZlbnREZWZhdWx0KCk7dmFyIG49ZS50YXJnZXQ7dChuKS5oYXNDbGFzcyhyLkJVVFRPTil8fChuPXQobikuY2xvc2VzdChzLkJVVFRPTikpLGwuX2pRdWVyeUludGVyZmFjZS5jYWxsKHQobiksXCJ0b2dnbGVcIil9KS5vbihhLkZPQ1VTX0JMVVJfREFUQV9BUEkscy5EQVRBX1RPR0dMRV9DQVJST1QsZnVuY3Rpb24oZSl7dmFyIG49dChlLnRhcmdldCkuY2xvc2VzdChzLkJVVFRPTilbMF07dChuKS50b2dnbGVDbGFzcyhyLkZPQ1VTLC9eZm9jdXMoaW4pPyQvLnRlc3QoZS50eXBlKSl9KSx0LmZuW2VdPWwuX2pRdWVyeUludGVyZmFjZSx0LmZuW2VdLkNvbnN0cnVjdG9yPWwsdC5mbltlXS5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIHQuZm5bZV09aSxsLl9qUXVlcnlJbnRlcmZhY2V9fShqUXVlcnkpLGZ1bmN0aW9uKHQpe3ZhciBlPVwiY2Fyb3VzZWxcIixzPVwiYnMuY2Fyb3VzZWxcIixhPVwiLlwiK3MsbD10LmZuW2VdLGg9e2ludGVydmFsOjVlMyxrZXlib2FyZDohMCxzbGlkZTohMSxwYXVzZTpcImhvdmVyXCIsd3JhcDohMH0sYz17aW50ZXJ2YWw6XCIobnVtYmVyfGJvb2xlYW4pXCIsa2V5Ym9hcmQ6XCJib29sZWFuXCIsc2xpZGU6XCIoYm9vbGVhbnxzdHJpbmcpXCIscGF1c2U6XCIoc3RyaW5nfGJvb2xlYW4pXCIsd3JhcDpcImJvb2xlYW5cIn0sdT17TkVYVDpcIm5leHRcIixQUkVWOlwicHJldlwiLExFRlQ6XCJsZWZ0XCIsUklHSFQ6XCJyaWdodFwifSxkPXtTTElERTpcInNsaWRlXCIrYSxTTElEOlwic2xpZFwiK2EsS0VZRE9XTjpcImtleWRvd25cIithLE1PVVNFRU5URVI6XCJtb3VzZWVudGVyXCIrYSxNT1VTRUxFQVZFOlwibW91c2VsZWF2ZVwiK2EsVE9VQ0hFTkQ6XCJ0b3VjaGVuZFwiK2EsTE9BRF9EQVRBX0FQSTpcImxvYWQuYnMuY2Fyb3VzZWwuZGF0YS1hcGlcIixDTElDS19EQVRBX0FQSTpcImNsaWNrLmJzLmNhcm91c2VsLmRhdGEtYXBpXCJ9LGY9e0NBUk9VU0VMOlwiY2Fyb3VzZWxcIixBQ1RJVkU6XCJhY3RpdmVcIixTTElERTpcInNsaWRlXCIsUklHSFQ6XCJjYXJvdXNlbC1pdGVtLXJpZ2h0XCIsTEVGVDpcImNhcm91c2VsLWl0ZW0tbGVmdFwiLE5FWFQ6XCJjYXJvdXNlbC1pdGVtLW5leHRcIixQUkVWOlwiY2Fyb3VzZWwtaXRlbS1wcmV2XCIsSVRFTTpcImNhcm91c2VsLWl0ZW1cIn0scD17QUNUSVZFOlwiLmFjdGl2ZVwiLEFDVElWRV9JVEVNOlwiLmFjdGl2ZS5jYXJvdXNlbC1pdGVtXCIsSVRFTTpcIi5jYXJvdXNlbC1pdGVtXCIsTkVYVF9QUkVWOlwiLmNhcm91c2VsLWl0ZW0tbmV4dCwgLmNhcm91c2VsLWl0ZW0tcHJldlwiLElORElDQVRPUlM6XCIuY2Fyb3VzZWwtaW5kaWNhdG9yc1wiLERBVEFfU0xJREU6XCJbZGF0YS1zbGlkZV0sIFtkYXRhLXNsaWRlLXRvXVwiLERBVEFfUklERTonW2RhdGEtcmlkZT1cImNhcm91c2VsXCJdJ30sXz1mdW5jdGlvbigpe2Z1bmN0aW9uIGwoZSxpKXtuKHRoaXMsbCksdGhpcy5faXRlbXM9bnVsbCx0aGlzLl9pbnRlcnZhbD1udWxsLHRoaXMuX2FjdGl2ZUVsZW1lbnQ9bnVsbCx0aGlzLl9pc1BhdXNlZD0hMSx0aGlzLl9pc1NsaWRpbmc9ITEsdGhpcy50b3VjaFRpbWVvdXQ9bnVsbCx0aGlzLl9jb25maWc9dGhpcy5fZ2V0Q29uZmlnKGkpLHRoaXMuX2VsZW1lbnQ9dChlKVswXSx0aGlzLl9pbmRpY2F0b3JzRWxlbWVudD10KHRoaXMuX2VsZW1lbnQpLmZpbmQocC5JTkRJQ0FUT1JTKVswXSx0aGlzLl9hZGRFdmVudExpc3RlbmVycygpfXJldHVybiBsLnByb3RvdHlwZS5uZXh0PWZ1bmN0aW9uKCl7dGhpcy5faXNTbGlkaW5nfHx0aGlzLl9zbGlkZSh1Lk5FWFQpfSxsLnByb3RvdHlwZS5uZXh0V2hlblZpc2libGU9ZnVuY3Rpb24oKXtkb2N1bWVudC5oaWRkZW58fHRoaXMubmV4dCgpfSxsLnByb3RvdHlwZS5wcmV2PWZ1bmN0aW9uKCl7dGhpcy5faXNTbGlkaW5nfHx0aGlzLl9zbGlkZSh1LlBSRVYpfSxsLnByb3RvdHlwZS5wYXVzZT1mdW5jdGlvbihlKXtlfHwodGhpcy5faXNQYXVzZWQ9ITApLHQodGhpcy5fZWxlbWVudCkuZmluZChwLk5FWFRfUFJFVilbMF0mJnIuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkmJihyLnRyaWdnZXJUcmFuc2l0aW9uRW5kKHRoaXMuX2VsZW1lbnQpLHRoaXMuY3ljbGUoITApKSxjbGVhckludGVydmFsKHRoaXMuX2ludGVydmFsKSx0aGlzLl9pbnRlcnZhbD1udWxsfSxsLnByb3RvdHlwZS5jeWNsZT1mdW5jdGlvbih0KXt0fHwodGhpcy5faXNQYXVzZWQ9ITEpLHRoaXMuX2ludGVydmFsJiYoY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCksdGhpcy5faW50ZXJ2YWw9bnVsbCksdGhpcy5fY29uZmlnLmludGVydmFsJiYhdGhpcy5faXNQYXVzZWQmJih0aGlzLl9pbnRlcnZhbD1zZXRJbnRlcnZhbCgoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlP3RoaXMubmV4dFdoZW5WaXNpYmxlOnRoaXMubmV4dCkuYmluZCh0aGlzKSx0aGlzLl9jb25maWcuaW50ZXJ2YWwpKX0sbC5wcm90b3R5cGUudG89ZnVuY3Rpb24oZSl7dmFyIG49dGhpczt0aGlzLl9hY3RpdmVFbGVtZW50PXQodGhpcy5fZWxlbWVudCkuZmluZChwLkFDVElWRV9JVEVNKVswXTt2YXIgaT10aGlzLl9nZXRJdGVtSW5kZXgodGhpcy5fYWN0aXZlRWxlbWVudCk7aWYoIShlPnRoaXMuX2l0ZW1zLmxlbmd0aC0xfHxlPDApKWlmKHRoaXMuX2lzU2xpZGluZyl0KHRoaXMuX2VsZW1lbnQpLm9uZShkLlNMSUQsZnVuY3Rpb24oKXtyZXR1cm4gbi50byhlKX0pO2Vsc2V7aWYoaT09PWUpcmV0dXJuIHRoaXMucGF1c2UoKSx2b2lkIHRoaXMuY3ljbGUoKTt2YXIgbz1lPmk/dS5ORVhUOnUuUFJFVjt0aGlzLl9zbGlkZShvLHRoaXMuX2l0ZW1zW2VdKX19LGwucHJvdG90eXBlLmRpc3Bvc2U9ZnVuY3Rpb24oKXt0KHRoaXMuX2VsZW1lbnQpLm9mZihhKSx0LnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCxzKSx0aGlzLl9pdGVtcz1udWxsLHRoaXMuX2NvbmZpZz1udWxsLHRoaXMuX2VsZW1lbnQ9bnVsbCx0aGlzLl9pbnRlcnZhbD1udWxsLHRoaXMuX2lzUGF1c2VkPW51bGwsdGhpcy5faXNTbGlkaW5nPW51bGwsdGhpcy5fYWN0aXZlRWxlbWVudD1udWxsLHRoaXMuX2luZGljYXRvcnNFbGVtZW50PW51bGx9LGwucHJvdG90eXBlLl9nZXRDb25maWc9ZnVuY3Rpb24obil7cmV0dXJuIG49dC5leHRlbmQoe30saCxuKSxyLnR5cGVDaGVja0NvbmZpZyhlLG4sYyksbn0sbC5wcm90b3R5cGUuX2FkZEV2ZW50TGlzdGVuZXJzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0aGlzLl9jb25maWcua2V5Ym9hcmQmJnQodGhpcy5fZWxlbWVudCkub24oZC5LRVlET1dOLGZ1bmN0aW9uKHQpe3JldHVybiBlLl9rZXlkb3duKHQpfSksXCJob3ZlclwiPT09dGhpcy5fY29uZmlnLnBhdXNlJiYodCh0aGlzLl9lbGVtZW50KS5vbihkLk1PVVNFRU5URVIsZnVuY3Rpb24odCl7cmV0dXJuIGUucGF1c2UodCl9KS5vbihkLk1PVVNFTEVBVkUsZnVuY3Rpb24odCl7cmV0dXJuIGUuY3ljbGUodCl9KSxcIm9udG91Y2hzdGFydFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50JiZ0KHRoaXMuX2VsZW1lbnQpLm9uKGQuVE9VQ0hFTkQsZnVuY3Rpb24oKXtlLnBhdXNlKCksZS50b3VjaFRpbWVvdXQmJmNsZWFyVGltZW91dChlLnRvdWNoVGltZW91dCksZS50b3VjaFRpbWVvdXQ9c2V0VGltZW91dChmdW5jdGlvbih0KXtyZXR1cm4gZS5jeWNsZSh0KX0sNTAwK2UuX2NvbmZpZy5pbnRlcnZhbCl9KSl9LGwucHJvdG90eXBlLl9rZXlkb3duPWZ1bmN0aW9uKHQpe2lmKCEvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KHQudGFyZ2V0LnRhZ05hbWUpKXN3aXRjaCh0LndoaWNoKXtjYXNlIDM3OnQucHJldmVudERlZmF1bHQoKSx0aGlzLnByZXYoKTticmVhaztjYXNlIDM5OnQucHJldmVudERlZmF1bHQoKSx0aGlzLm5leHQoKTticmVhaztkZWZhdWx0OnJldHVybn19LGwucHJvdG90eXBlLl9nZXRJdGVtSW5kZXg9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuX2l0ZW1zPXQubWFrZUFycmF5KHQoZSkucGFyZW50KCkuZmluZChwLklURU0pKSx0aGlzLl9pdGVtcy5pbmRleE9mKGUpfSxsLnByb3RvdHlwZS5fZ2V0SXRlbUJ5RGlyZWN0aW9uPWZ1bmN0aW9uKHQsZSl7dmFyIG49dD09PXUuTkVYVCxpPXQ9PT11LlBSRVYsbz10aGlzLl9nZXRJdGVtSW5kZXgoZSkscj10aGlzLl9pdGVtcy5sZW5ndGgtMTtpZigoaSYmMD09PW98fG4mJm89PT1yKSYmIXRoaXMuX2NvbmZpZy53cmFwKXJldHVybiBlO3ZhciBzPShvKyh0PT09dS5QUkVWPy0xOjEpKSV0aGlzLl9pdGVtcy5sZW5ndGg7cmV0dXJuLTE9PT1zP3RoaXMuX2l0ZW1zW3RoaXMuX2l0ZW1zLmxlbmd0aC0xXTp0aGlzLl9pdGVtc1tzXX0sbC5wcm90b3R5cGUuX3RyaWdnZXJTbGlkZUV2ZW50PWZ1bmN0aW9uKGUsbil7dmFyIGk9dGhpcy5fZ2V0SXRlbUluZGV4KGUpLG89dGhpcy5fZ2V0SXRlbUluZGV4KHQodGhpcy5fZWxlbWVudCkuZmluZChwLkFDVElWRV9JVEVNKVswXSkscj10LkV2ZW50KGQuU0xJREUse3JlbGF0ZWRUYXJnZXQ6ZSxkaXJlY3Rpb246bixmcm9tOm8sdG86aX0pO3JldHVybiB0KHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIocikscn0sbC5wcm90b3R5cGUuX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQ9ZnVuY3Rpb24oZSl7aWYodGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpe3QodGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpLmZpbmQocC5BQ1RJVkUpLnJlbW92ZUNsYXNzKGYuQUNUSVZFKTt2YXIgbj10aGlzLl9pbmRpY2F0b3JzRWxlbWVudC5jaGlsZHJlblt0aGlzLl9nZXRJdGVtSW5kZXgoZSldO24mJnQobikuYWRkQ2xhc3MoZi5BQ1RJVkUpfX0sbC5wcm90b3R5cGUuX3NsaWRlPWZ1bmN0aW9uKGUsbil7dmFyIGk9dGhpcyxvPXQodGhpcy5fZWxlbWVudCkuZmluZChwLkFDVElWRV9JVEVNKVswXSxzPXRoaXMuX2dldEl0ZW1JbmRleChvKSxhPW58fG8mJnRoaXMuX2dldEl0ZW1CeURpcmVjdGlvbihlLG8pLGw9dGhpcy5fZ2V0SXRlbUluZGV4KGEpLGg9Qm9vbGVhbih0aGlzLl9pbnRlcnZhbCksYz12b2lkIDAsXz12b2lkIDAsZz12b2lkIDA7aWYoZT09PXUuTkVYVD8oYz1mLkxFRlQsXz1mLk5FWFQsZz11LkxFRlQpOihjPWYuUklHSFQsXz1mLlBSRVYsZz11LlJJR0hUKSxhJiZ0KGEpLmhhc0NsYXNzKGYuQUNUSVZFKSl0aGlzLl9pc1NsaWRpbmc9ITE7ZWxzZSBpZighdGhpcy5fdHJpZ2dlclNsaWRlRXZlbnQoYSxnKS5pc0RlZmF1bHRQcmV2ZW50ZWQoKSYmbyYmYSl7dGhpcy5faXNTbGlkaW5nPSEwLGgmJnRoaXMucGF1c2UoKSx0aGlzLl9zZXRBY3RpdmVJbmRpY2F0b3JFbGVtZW50KGEpO3ZhciBtPXQuRXZlbnQoZC5TTElELHtyZWxhdGVkVGFyZ2V0OmEsZGlyZWN0aW9uOmcsZnJvbTpzLHRvOmx9KTtyLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpJiZ0KHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKGYuU0xJREUpPyh0KGEpLmFkZENsYXNzKF8pLHIucmVmbG93KGEpLHQobykuYWRkQ2xhc3MoYyksdChhKS5hZGRDbGFzcyhjKSx0KG8pLm9uZShyLlRSQU5TSVRJT05fRU5ELGZ1bmN0aW9uKCl7dChhKS5yZW1vdmVDbGFzcyhjK1wiIFwiK18pLmFkZENsYXNzKGYuQUNUSVZFKSx0KG8pLnJlbW92ZUNsYXNzKGYuQUNUSVZFK1wiIFwiK18rXCIgXCIrYyksaS5faXNTbGlkaW5nPSExLHNldFRpbWVvdXQoZnVuY3Rpb24oKXtyZXR1cm4gdChpLl9lbGVtZW50KS50cmlnZ2VyKG0pfSwwKX0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKDYwMCkpOih0KG8pLnJlbW92ZUNsYXNzKGYuQUNUSVZFKSx0KGEpLmFkZENsYXNzKGYuQUNUSVZFKSx0aGlzLl9pc1NsaWRpbmc9ITEsdCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKG0pKSxoJiZ0aGlzLmN5Y2xlKCl9fSxsLl9qUXVlcnlJbnRlcmZhY2U9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBuPXQodGhpcykuZGF0YShzKSxvPXQuZXh0ZW5kKHt9LGgsdCh0aGlzKS5kYXRhKCkpO1wib2JqZWN0XCI9PT0odm9pZCAwPT09ZT9cInVuZGVmaW5lZFwiOmkoZSkpJiZ0LmV4dGVuZChvLGUpO3ZhciByPVwic3RyaW5nXCI9PXR5cGVvZiBlP2U6by5zbGlkZTtpZihufHwobj1uZXcgbCh0aGlzLG8pLHQodGhpcykuZGF0YShzLG4pKSxcIm51bWJlclwiPT10eXBlb2YgZSluLnRvKGUpO2Vsc2UgaWYoXCJzdHJpbmdcIj09dHlwZW9mIHIpe2lmKHZvaWQgMD09PW5bcl0pdGhyb3cgbmV3IEVycm9yKCdObyBtZXRob2QgbmFtZWQgXCInK3IrJ1wiJyk7bltyXSgpfWVsc2Ugby5pbnRlcnZhbCYmKG4ucGF1c2UoKSxuLmN5Y2xlKCkpfSl9LGwuX2RhdGFBcGlDbGlja0hhbmRsZXI9ZnVuY3Rpb24oZSl7dmFyIG49ci5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMpO2lmKG4pe3ZhciBpPXQobilbMF07aWYoaSYmdChpKS5oYXNDbGFzcyhmLkNBUk9VU0VMKSl7dmFyIG89dC5leHRlbmQoe30sdChpKS5kYXRhKCksdCh0aGlzKS5kYXRhKCkpLGE9dGhpcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNsaWRlLXRvXCIpO2EmJihvLmludGVydmFsPSExKSxsLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCh0KGkpLG8pLGEmJnQoaSkuZGF0YShzKS50byhhKSxlLnByZXZlbnREZWZhdWx0KCl9fX0sbyhsLG51bGwsW3trZXk6XCJWRVJTSU9OXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI0LjAuMC1iZXRhXCJ9fSx7a2V5OlwiRGVmYXVsdFwiLGdldDpmdW5jdGlvbigpe3JldHVybiBofX1dKSxsfSgpO3QoZG9jdW1lbnQpLm9uKGQuQ0xJQ0tfREFUQV9BUEkscC5EQVRBX1NMSURFLF8uX2RhdGFBcGlDbGlja0hhbmRsZXIpLHQod2luZG93KS5vbihkLkxPQURfREFUQV9BUEksZnVuY3Rpb24oKXt0KHAuREFUQV9SSURFKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIGU9dCh0aGlzKTtfLl9qUXVlcnlJbnRlcmZhY2UuY2FsbChlLGUuZGF0YSgpKX0pfSksdC5mbltlXT1fLl9qUXVlcnlJbnRlcmZhY2UsdC5mbltlXS5Db25zdHJ1Y3Rvcj1fLHQuZm5bZV0ubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiB0LmZuW2VdPWwsXy5falF1ZXJ5SW50ZXJmYWNlfX0oalF1ZXJ5KSxmdW5jdGlvbih0KXt2YXIgZT1cImNvbGxhcHNlXCIscz1cImJzLmNvbGxhcHNlXCIsYT10LmZuW2VdLGw9e3RvZ2dsZTohMCxwYXJlbnQ6XCJcIn0saD17dG9nZ2xlOlwiYm9vbGVhblwiLHBhcmVudDpcInN0cmluZ1wifSxjPXtTSE9XOlwic2hvdy5icy5jb2xsYXBzZVwiLFNIT1dOOlwic2hvd24uYnMuY29sbGFwc2VcIixISURFOlwiaGlkZS5icy5jb2xsYXBzZVwiLEhJRERFTjpcImhpZGRlbi5icy5jb2xsYXBzZVwiLENMSUNLX0RBVEFfQVBJOlwiY2xpY2suYnMuY29sbGFwc2UuZGF0YS1hcGlcIn0sdT17U0hPVzpcInNob3dcIixDT0xMQVBTRTpcImNvbGxhcHNlXCIsQ09MTEFQU0lORzpcImNvbGxhcHNpbmdcIixDT0xMQVBTRUQ6XCJjb2xsYXBzZWRcIn0sZD17V0lEVEg6XCJ3aWR0aFwiLEhFSUdIVDpcImhlaWdodFwifSxmPXtBQ1RJVkVTOlwiLnNob3csIC5jb2xsYXBzaW5nXCIsREFUQV9UT0dHTEU6J1tkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdJ30scD1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoZSxpKXtuKHRoaXMsYSksdGhpcy5faXNUcmFuc2l0aW9uaW5nPSExLHRoaXMuX2VsZW1lbnQ9ZSx0aGlzLl9jb25maWc9dGhpcy5fZ2V0Q29uZmlnKGkpLHRoaXMuX3RyaWdnZXJBcnJheT10Lm1ha2VBcnJheSh0KCdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtocmVmPVwiIycrZS5pZCsnXCJdLFtkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2RhdGEtdGFyZ2V0PVwiIycrZS5pZCsnXCJdJykpO2Zvcih2YXIgbz10KGYuREFUQV9UT0dHTEUpLHM9MDtzPG8ubGVuZ3RoO3MrKyl7dmFyIGw9b1tzXSxoPXIuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChsKTtudWxsIT09aCYmdChoKS5maWx0ZXIoZSkubGVuZ3RoPjAmJnRoaXMuX3RyaWdnZXJBcnJheS5wdXNoKGwpfXRoaXMuX3BhcmVudD10aGlzLl9jb25maWcucGFyZW50P3RoaXMuX2dldFBhcmVudCgpOm51bGwsdGhpcy5fY29uZmlnLnBhcmVudHx8dGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuX2VsZW1lbnQsdGhpcy5fdHJpZ2dlckFycmF5KSx0aGlzLl9jb25maWcudG9nZ2xlJiZ0aGlzLnRvZ2dsZSgpfXJldHVybiBhLnByb3RvdHlwZS50b2dnbGU9ZnVuY3Rpb24oKXt0KHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKHUuU0hPVyk/dGhpcy5oaWRlKCk6dGhpcy5zaG93KCl9LGEucHJvdG90eXBlLnNob3c9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2lmKCF0aGlzLl9pc1RyYW5zaXRpb25pbmcmJiF0KHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKHUuU0hPVykpe3ZhciBuPXZvaWQgMCxpPXZvaWQgMDtpZih0aGlzLl9wYXJlbnQmJigobj10Lm1ha2VBcnJheSh0KHRoaXMuX3BhcmVudCkuY2hpbGRyZW4oKS5jaGlsZHJlbihmLkFDVElWRVMpKSkubGVuZ3RofHwobj1udWxsKSksIShuJiYoaT10KG4pLmRhdGEocykpJiZpLl9pc1RyYW5zaXRpb25pbmcpKXt2YXIgbz10LkV2ZW50KGMuU0hPVyk7aWYodCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKG8pLCFvLmlzRGVmYXVsdFByZXZlbnRlZCgpKXtuJiYoYS5falF1ZXJ5SW50ZXJmYWNlLmNhbGwodChuKSxcImhpZGVcIiksaXx8dChuKS5kYXRhKHMsbnVsbCkpO3ZhciBsPXRoaXMuX2dldERpbWVuc2lvbigpO3QodGhpcy5fZWxlbWVudCkucmVtb3ZlQ2xhc3ModS5DT0xMQVBTRSkuYWRkQ2xhc3ModS5DT0xMQVBTSU5HKSx0aGlzLl9lbGVtZW50LnN0eWxlW2xdPTAsdGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aCYmdCh0aGlzLl90cmlnZ2VyQXJyYXkpLnJlbW92ZUNsYXNzKHUuQ09MTEFQU0VEKS5hdHRyKFwiYXJpYS1leHBhbmRlZFwiLCEwKSx0aGlzLnNldFRyYW5zaXRpb25pbmcoITApO3ZhciBoPWZ1bmN0aW9uKCl7dChlLl9lbGVtZW50KS5yZW1vdmVDbGFzcyh1LkNPTExBUFNJTkcpLmFkZENsYXNzKHUuQ09MTEFQU0UpLmFkZENsYXNzKHUuU0hPVyksZS5fZWxlbWVudC5zdHlsZVtsXT1cIlwiLGUuc2V0VHJhbnNpdGlvbmluZyghMSksdChlLl9lbGVtZW50KS50cmlnZ2VyKGMuU0hPV04pfTtpZihyLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpKXt2YXIgZD1cInNjcm9sbFwiKyhsWzBdLnRvVXBwZXJDYXNlKCkrbC5zbGljZSgxKSk7dCh0aGlzLl9lbGVtZW50KS5vbmUoci5UUkFOU0lUSU9OX0VORCxoKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCg2MDApLHRoaXMuX2VsZW1lbnQuc3R5bGVbbF09dGhpcy5fZWxlbWVudFtkXStcInB4XCJ9ZWxzZSBoKCl9fX19LGEucHJvdG90eXBlLmhpZGU9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO2lmKCF0aGlzLl9pc1RyYW5zaXRpb25pbmcmJnQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3ModS5TSE9XKSl7dmFyIG49dC5FdmVudChjLkhJREUpO2lmKHQodGhpcy5fZWxlbWVudCkudHJpZ2dlcihuKSwhbi5pc0RlZmF1bHRQcmV2ZW50ZWQoKSl7dmFyIGk9dGhpcy5fZ2V0RGltZW5zaW9uKCk7aWYodGhpcy5fZWxlbWVudC5zdHlsZVtpXT10aGlzLl9lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpW2ldK1wicHhcIixyLnJlZmxvdyh0aGlzLl9lbGVtZW50KSx0KHRoaXMuX2VsZW1lbnQpLmFkZENsYXNzKHUuQ09MTEFQU0lORykucmVtb3ZlQ2xhc3ModS5DT0xMQVBTRSkucmVtb3ZlQ2xhc3ModS5TSE9XKSx0aGlzLl90cmlnZ2VyQXJyYXkubGVuZ3RoKWZvcih2YXIgbz0wO288dGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aDtvKyspe3ZhciBzPXRoaXMuX3RyaWdnZXJBcnJheVtvXSxhPXIuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChzKTtudWxsIT09YSYmKHQoYSkuaGFzQ2xhc3ModS5TSE9XKXx8dChzKS5hZGRDbGFzcyh1LkNPTExBUFNFRCkuYXR0cihcImFyaWEtZXhwYW5kZWRcIiwhMSkpfXRoaXMuc2V0VHJhbnNpdGlvbmluZyghMCk7dmFyIGw9ZnVuY3Rpb24oKXtlLnNldFRyYW5zaXRpb25pbmcoITEpLHQoZS5fZWxlbWVudCkucmVtb3ZlQ2xhc3ModS5DT0xMQVBTSU5HKS5hZGRDbGFzcyh1LkNPTExBUFNFKS50cmlnZ2VyKGMuSElEREVOKX07dGhpcy5fZWxlbWVudC5zdHlsZVtpXT1cIlwiLHIuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCk/dCh0aGlzLl9lbGVtZW50KS5vbmUoci5UUkFOU0lUSU9OX0VORCxsKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCg2MDApOmwoKX19fSxhLnByb3RvdHlwZS5zZXRUcmFuc2l0aW9uaW5nPWZ1bmN0aW9uKHQpe3RoaXMuX2lzVHJhbnNpdGlvbmluZz10fSxhLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7dC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQscyksdGhpcy5fY29uZmlnPW51bGwsdGhpcy5fcGFyZW50PW51bGwsdGhpcy5fZWxlbWVudD1udWxsLHRoaXMuX3RyaWdnZXJBcnJheT1udWxsLHRoaXMuX2lzVHJhbnNpdGlvbmluZz1udWxsfSxhLnByb3RvdHlwZS5fZ2V0Q29uZmlnPWZ1bmN0aW9uKG4pe3JldHVybiBuPXQuZXh0ZW5kKHt9LGwsbiksbi50b2dnbGU9Qm9vbGVhbihuLnRvZ2dsZSksci50eXBlQ2hlY2tDb25maWcoZSxuLGgpLG59LGEucHJvdG90eXBlLl9nZXREaW1lbnNpb249ZnVuY3Rpb24oKXtyZXR1cm4gdCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhkLldJRFRIKT9kLldJRFRIOmQuSEVJR0hUfSxhLnByb3RvdHlwZS5fZ2V0UGFyZW50PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcyxuPXQodGhpcy5fY29uZmlnLnBhcmVudClbMF0saT0nW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl1bZGF0YS1wYXJlbnQ9XCInK3RoaXMuX2NvbmZpZy5wYXJlbnQrJ1wiXSc7cmV0dXJuIHQobikuZmluZChpKS5lYWNoKGZ1bmN0aW9uKHQsbil7ZS5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKGEuX2dldFRhcmdldEZyb21FbGVtZW50KG4pLFtuXSl9KSxufSxhLnByb3RvdHlwZS5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzPWZ1bmN0aW9uKGUsbil7aWYoZSl7dmFyIGk9dChlKS5oYXNDbGFzcyh1LlNIT1cpO24ubGVuZ3RoJiZ0KG4pLnRvZ2dsZUNsYXNzKHUuQ09MTEFQU0VELCFpKS5hdHRyKFwiYXJpYS1leHBhbmRlZFwiLGkpfX0sYS5fZ2V0VGFyZ2V0RnJvbUVsZW1lbnQ9ZnVuY3Rpb24oZSl7dmFyIG49ci5nZXRTZWxlY3RvckZyb21FbGVtZW50KGUpO3JldHVybiBuP3QobilbMF06bnVsbH0sYS5falF1ZXJ5SW50ZXJmYWNlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgbj10KHRoaXMpLG89bi5kYXRhKHMpLHI9dC5leHRlbmQoe30sbCxuLmRhdGEoKSxcIm9iamVjdFwiPT09KHZvaWQgMD09PWU/XCJ1bmRlZmluZWRcIjppKGUpKSYmZSk7aWYoIW8mJnIudG9nZ2xlJiYvc2hvd3xoaWRlLy50ZXN0KGUpJiYoci50b2dnbGU9ITEpLG98fChvPW5ldyBhKHRoaXMsciksbi5kYXRhKHMsbykpLFwic3RyaW5nXCI9PXR5cGVvZiBlKXtpZih2b2lkIDA9PT1vW2VdKXRocm93IG5ldyBFcnJvcignTm8gbWV0aG9kIG5hbWVkIFwiJytlKydcIicpO29bZV0oKX19KX0sbyhhLG51bGwsW3trZXk6XCJWRVJTSU9OXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI0LjAuMC1iZXRhXCJ9fSx7a2V5OlwiRGVmYXVsdFwiLGdldDpmdW5jdGlvbigpe3JldHVybiBsfX1dKSxhfSgpO3QoZG9jdW1lbnQpLm9uKGMuQ0xJQ0tfREFUQV9BUEksZi5EQVRBX1RPR0dMRSxmdW5jdGlvbihlKXsvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGUudGFyZ2V0LnRhZ05hbWUpfHxlLnByZXZlbnREZWZhdWx0KCk7dmFyIG49dCh0aGlzKSxpPXIuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzKTt0KGkpLmVhY2goZnVuY3Rpb24oKXt2YXIgZT10KHRoaXMpLGk9ZS5kYXRhKHMpP1widG9nZ2xlXCI6bi5kYXRhKCk7cC5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoZSxpKX0pfSksdC5mbltlXT1wLl9qUXVlcnlJbnRlcmZhY2UsdC5mbltlXS5Db25zdHJ1Y3Rvcj1wLHQuZm5bZV0ubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiB0LmZuW2VdPWEscC5falF1ZXJ5SW50ZXJmYWNlfX0oalF1ZXJ5KSxmdW5jdGlvbih0KXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2YgUG9wcGVyKXRocm93IG5ldyBFcnJvcihcIkJvb3RzdHJhcCBkcm9wZG93biByZXF1aXJlIFBvcHBlci5qcyAoaHR0cHM6Ly9wb3BwZXIuanMub3JnKVwiKTt2YXIgZT1cImRyb3Bkb3duXCIscz1cImJzLmRyb3Bkb3duXCIsYT1cIi5cIitzLGw9dC5mbltlXSxoPW5ldyBSZWdFeHAoXCIzOHw0MHwyN1wiKSxjPXtISURFOlwiaGlkZVwiK2EsSElEREVOOlwiaGlkZGVuXCIrYSxTSE9XOlwic2hvd1wiK2EsU0hPV046XCJzaG93blwiK2EsQ0xJQ0s6XCJjbGlja1wiK2EsQ0xJQ0tfREFUQV9BUEk6XCJjbGljay5icy5kcm9wZG93bi5kYXRhLWFwaVwiLEtFWURPV05fREFUQV9BUEk6XCJrZXlkb3duLmJzLmRyb3Bkb3duLmRhdGEtYXBpXCIsS0VZVVBfREFUQV9BUEk6XCJrZXl1cC5icy5kcm9wZG93bi5kYXRhLWFwaVwifSx1PXtESVNBQkxFRDpcImRpc2FibGVkXCIsU0hPVzpcInNob3dcIixEUk9QVVA6XCJkcm9wdXBcIixNRU5VUklHSFQ6XCJkcm9wZG93bi1tZW51LXJpZ2h0XCIsTUVOVUxFRlQ6XCJkcm9wZG93bi1tZW51LWxlZnRcIn0sZD17REFUQV9UT0dHTEU6J1tkYXRhLXRvZ2dsZT1cImRyb3Bkb3duXCJdJyxGT1JNX0NISUxEOlwiLmRyb3Bkb3duIGZvcm1cIixNRU5VOlwiLmRyb3Bkb3duLW1lbnVcIixOQVZCQVJfTkFWOlwiLm5hdmJhci1uYXZcIixWSVNJQkxFX0lURU1TOlwiLmRyb3Bkb3duLW1lbnUgLmRyb3Bkb3duLWl0ZW06bm90KC5kaXNhYmxlZClcIn0sZj17VE9QOlwidG9wLXN0YXJ0XCIsVE9QRU5EOlwidG9wLWVuZFwiLEJPVFRPTTpcImJvdHRvbS1zdGFydFwiLEJPVFRPTUVORDpcImJvdHRvbS1lbmRcIn0scD17cGxhY2VtZW50OmYuQk9UVE9NLG9mZnNldDowLGZsaXA6ITB9LF89e3BsYWNlbWVudDpcInN0cmluZ1wiLG9mZnNldDpcIihudW1iZXJ8c3RyaW5nKVwiLGZsaXA6XCJib29sZWFuXCJ9LGc9ZnVuY3Rpb24oKXtmdW5jdGlvbiBsKHQsZSl7bih0aGlzLGwpLHRoaXMuX2VsZW1lbnQ9dCx0aGlzLl9wb3BwZXI9bnVsbCx0aGlzLl9jb25maWc9dGhpcy5fZ2V0Q29uZmlnKGUpLHRoaXMuX21lbnU9dGhpcy5fZ2V0TWVudUVsZW1lbnQoKSx0aGlzLl9pbk5hdmJhcj10aGlzLl9kZXRlY3ROYXZiYXIoKSx0aGlzLl9hZGRFdmVudExpc3RlbmVycygpfXJldHVybiBsLnByb3RvdHlwZS50b2dnbGU9ZnVuY3Rpb24oKXtpZighdGhpcy5fZWxlbWVudC5kaXNhYmxlZCYmIXQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3ModS5ESVNBQkxFRCkpe3ZhciBlPWwuX2dldFBhcmVudEZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpLG49dCh0aGlzLl9tZW51KS5oYXNDbGFzcyh1LlNIT1cpO2lmKGwuX2NsZWFyTWVudXMoKSwhbil7dmFyIGk9e3JlbGF0ZWRUYXJnZXQ6dGhpcy5fZWxlbWVudH0sbz10LkV2ZW50KGMuU0hPVyxpKTtpZih0KGUpLnRyaWdnZXIobyksIW8uaXNEZWZhdWx0UHJldmVudGVkKCkpe3ZhciByPXRoaXMuX2VsZW1lbnQ7dChlKS5oYXNDbGFzcyh1LkRST1BVUCkmJih0KHRoaXMuX21lbnUpLmhhc0NsYXNzKHUuTUVOVUxFRlQpfHx0KHRoaXMuX21lbnUpLmhhc0NsYXNzKHUuTUVOVVJJR0hUKSkmJihyPWUpLHRoaXMuX3BvcHBlcj1uZXcgUG9wcGVyKHIsdGhpcy5fbWVudSx0aGlzLl9nZXRQb3BwZXJDb25maWcoKSksXCJvbnRvdWNoc3RhcnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCYmIXQoZSkuY2xvc2VzdChkLk5BVkJBUl9OQVYpLmxlbmd0aCYmdChcImJvZHlcIikuY2hpbGRyZW4oKS5vbihcIm1vdXNlb3ZlclwiLG51bGwsdC5ub29wKSx0aGlzLl9lbGVtZW50LmZvY3VzKCksdGhpcy5fZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsITApLHQodGhpcy5fbWVudSkudG9nZ2xlQ2xhc3ModS5TSE9XKSx0KGUpLnRvZ2dsZUNsYXNzKHUuU0hPVykudHJpZ2dlcih0LkV2ZW50KGMuU0hPV04saSkpfX19fSxsLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7dC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQscyksdCh0aGlzLl9lbGVtZW50KS5vZmYoYSksdGhpcy5fZWxlbWVudD1udWxsLHRoaXMuX21lbnU9bnVsbCxudWxsIT09dGhpcy5fcG9wcGVyJiZ0aGlzLl9wb3BwZXIuZGVzdHJveSgpLHRoaXMuX3BvcHBlcj1udWxsfSxsLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXt0aGlzLl9pbk5hdmJhcj10aGlzLl9kZXRlY3ROYXZiYXIoKSxudWxsIT09dGhpcy5fcG9wcGVyJiZ0aGlzLl9wb3BwZXIuc2NoZWR1bGVVcGRhdGUoKX0sbC5wcm90b3R5cGUuX2FkZEV2ZW50TGlzdGVuZXJzPWZ1bmN0aW9uKCl7dmFyIGU9dGhpczt0KHRoaXMuX2VsZW1lbnQpLm9uKGMuQ0xJQ0ssZnVuY3Rpb24odCl7dC5wcmV2ZW50RGVmYXVsdCgpLHQuc3RvcFByb3BhZ2F0aW9uKCksZS50b2dnbGUoKX0pfSxsLnByb3RvdHlwZS5fZ2V0Q29uZmlnPWZ1bmN0aW9uKG4pe3ZhciBpPXQodGhpcy5fZWxlbWVudCkuZGF0YSgpO3JldHVybiB2b2lkIDAhPT1pLnBsYWNlbWVudCYmKGkucGxhY2VtZW50PWZbaS5wbGFjZW1lbnQudG9VcHBlckNhc2UoKV0pLG49dC5leHRlbmQoe30sdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0LHQodGhpcy5fZWxlbWVudCkuZGF0YSgpLG4pLHIudHlwZUNoZWNrQ29uZmlnKGUsbix0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHRUeXBlKSxufSxsLnByb3RvdHlwZS5fZ2V0TWVudUVsZW1lbnQ9ZnVuY3Rpb24oKXtpZighdGhpcy5fbWVudSl7dmFyIGU9bC5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcy5fZWxlbWVudCk7dGhpcy5fbWVudT10KGUpLmZpbmQoZC5NRU5VKVswXX1yZXR1cm4gdGhpcy5fbWVudX0sbC5wcm90b3R5cGUuX2dldFBsYWNlbWVudD1mdW5jdGlvbigpe3ZhciBlPXQodGhpcy5fZWxlbWVudCkucGFyZW50KCksbj10aGlzLl9jb25maWcucGxhY2VtZW50O3JldHVybiBlLmhhc0NsYXNzKHUuRFJPUFVQKXx8dGhpcy5fY29uZmlnLnBsYWNlbWVudD09PWYuVE9QPyhuPWYuVE9QLHQodGhpcy5fbWVudSkuaGFzQ2xhc3ModS5NRU5VUklHSFQpJiYobj1mLlRPUEVORCkpOnQodGhpcy5fbWVudSkuaGFzQ2xhc3ModS5NRU5VUklHSFQpJiYobj1mLkJPVFRPTUVORCksbn0sbC5wcm90b3R5cGUuX2RldGVjdE5hdmJhcj1mdW5jdGlvbigpe3JldHVybiB0KHRoaXMuX2VsZW1lbnQpLmNsb3Nlc3QoXCIubmF2YmFyXCIpLmxlbmd0aD4wfSxsLnByb3RvdHlwZS5fZ2V0UG9wcGVyQ29uZmlnPWZ1bmN0aW9uKCl7dmFyIHQ9e3BsYWNlbWVudDp0aGlzLl9nZXRQbGFjZW1lbnQoKSxtb2RpZmllcnM6e29mZnNldDp7b2Zmc2V0OnRoaXMuX2NvbmZpZy5vZmZzZXR9LGZsaXA6e2VuYWJsZWQ6dGhpcy5fY29uZmlnLmZsaXB9fX07cmV0dXJuIHRoaXMuX2luTmF2YmFyJiYodC5tb2RpZmllcnMuYXBwbHlTdHlsZT17ZW5hYmxlZDohdGhpcy5faW5OYXZiYXJ9KSx0fSxsLl9qUXVlcnlJbnRlcmZhY2U9ZnVuY3Rpb24oZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBuPXQodGhpcykuZGF0YShzKSxvPVwib2JqZWN0XCI9PT0odm9pZCAwPT09ZT9cInVuZGVmaW5lZFwiOmkoZSkpP2U6bnVsbDtpZihufHwobj1uZXcgbCh0aGlzLG8pLHQodGhpcykuZGF0YShzLG4pKSxcInN0cmluZ1wiPT10eXBlb2YgZSl7aWYodm9pZCAwPT09bltlXSl0aHJvdyBuZXcgRXJyb3IoJ05vIG1ldGhvZCBuYW1lZCBcIicrZSsnXCInKTtuW2VdKCl9fSl9LGwuX2NsZWFyTWVudXM9ZnVuY3Rpb24oZSl7aWYoIWV8fDMhPT1lLndoaWNoJiYoXCJrZXl1cFwiIT09ZS50eXBlfHw5PT09ZS53aGljaCkpZm9yKHZhciBuPXQubWFrZUFycmF5KHQoZC5EQVRBX1RPR0dMRSkpLGk9MDtpPG4ubGVuZ3RoO2krKyl7dmFyIG89bC5fZ2V0UGFyZW50RnJvbUVsZW1lbnQobltpXSkscj10KG5baV0pLmRhdGEocyksYT17cmVsYXRlZFRhcmdldDpuW2ldfTtpZihyKXt2YXIgaD1yLl9tZW51O2lmKHQobykuaGFzQ2xhc3ModS5TSE9XKSYmIShlJiYoXCJjbGlja1wiPT09ZS50eXBlJiYvaW5wdXR8dGV4dGFyZWEvaS50ZXN0KGUudGFyZ2V0LnRhZ05hbWUpfHxcImtleXVwXCI9PT1lLnR5cGUmJjk9PT1lLndoaWNoKSYmdC5jb250YWlucyhvLGUudGFyZ2V0KSkpe3ZhciBmPXQuRXZlbnQoYy5ISURFLGEpO3QobykudHJpZ2dlcihmKSxmLmlzRGVmYXVsdFByZXZlbnRlZCgpfHwoXCJvbnRvdWNoc3RhcnRcImluIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCYmdChcImJvZHlcIikuY2hpbGRyZW4oKS5vZmYoXCJtb3VzZW92ZXJcIixudWxsLHQubm9vcCksbltpXS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsXCJmYWxzZVwiKSx0KGgpLnJlbW92ZUNsYXNzKHUuU0hPVyksdChvKS5yZW1vdmVDbGFzcyh1LlNIT1cpLnRyaWdnZXIodC5FdmVudChjLkhJRERFTixhKSkpfX19fSxsLl9nZXRQYXJlbnRGcm9tRWxlbWVudD1mdW5jdGlvbihlKXt2YXIgbj12b2lkIDAsaT1yLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZSk7cmV0dXJuIGkmJihuPXQoaSlbMF0pLG58fGUucGFyZW50Tm9kZX0sbC5fZGF0YUFwaUtleWRvd25IYW5kbGVyPWZ1bmN0aW9uKGUpe2lmKCEoIWgudGVzdChlLndoaWNoKXx8L2J1dHRvbi9pLnRlc3QoZS50YXJnZXQudGFnTmFtZSkmJjMyPT09ZS53aGljaHx8L2lucHV0fHRleHRhcmVhL2kudGVzdChlLnRhcmdldC50YWdOYW1lKXx8KGUucHJldmVudERlZmF1bHQoKSxlLnN0b3BQcm9wYWdhdGlvbigpLHRoaXMuZGlzYWJsZWR8fHQodGhpcykuaGFzQ2xhc3ModS5ESVNBQkxFRCkpKSl7dmFyIG49bC5fZ2V0UGFyZW50RnJvbUVsZW1lbnQodGhpcyksaT10KG4pLmhhc0NsYXNzKHUuU0hPVyk7aWYoKGl8fDI3PT09ZS53aGljaCYmMzI9PT1lLndoaWNoKSYmKCFpfHwyNyE9PWUud2hpY2gmJjMyIT09ZS53aGljaCkpe3ZhciBvPXQobikuZmluZChkLlZJU0lCTEVfSVRFTVMpLmdldCgpO2lmKG8ubGVuZ3RoKXt2YXIgcj1vLmluZGV4T2YoZS50YXJnZXQpOzM4PT09ZS53aGljaCYmcj4wJiZyLS0sNDA9PT1lLndoaWNoJiZyPG8ubGVuZ3RoLTEmJnIrKyxyPDAmJihyPTApLG9bcl0uZm9jdXMoKX19ZWxzZXtpZigyNz09PWUud2hpY2gpe3ZhciBzPXQobikuZmluZChkLkRBVEFfVE9HR0xFKVswXTt0KHMpLnRyaWdnZXIoXCJmb2N1c1wiKX10KHRoaXMpLnRyaWdnZXIoXCJjbGlja1wiKX19fSxvKGwsbnVsbCxbe2tleTpcIlZFUlNJT05cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIjQuMC4wLWJldGFcIn19LHtrZXk6XCJEZWZhdWx0XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHB9fSx7a2V5OlwiRGVmYXVsdFR5cGVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gX319XSksbH0oKTt0KGRvY3VtZW50KS5vbihjLktFWURPV05fREFUQV9BUEksZC5EQVRBX1RPR0dMRSxnLl9kYXRhQXBpS2V5ZG93bkhhbmRsZXIpLm9uKGMuS0VZRE9XTl9EQVRBX0FQSSxkLk1FTlUsZy5fZGF0YUFwaUtleWRvd25IYW5kbGVyKS5vbihjLkNMSUNLX0RBVEFfQVBJK1wiIFwiK2MuS0VZVVBfREFUQV9BUEksZy5fY2xlYXJNZW51cykub24oYy5DTElDS19EQVRBX0FQSSxkLkRBVEFfVE9HR0xFLGZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKSxlLnN0b3BQcm9wYWdhdGlvbigpLGcuX2pRdWVyeUludGVyZmFjZS5jYWxsKHQodGhpcyksXCJ0b2dnbGVcIil9KS5vbihjLkNMSUNLX0RBVEFfQVBJLGQuRk9STV9DSElMRCxmdW5jdGlvbih0KXt0LnN0b3BQcm9wYWdhdGlvbigpfSksdC5mbltlXT1nLl9qUXVlcnlJbnRlcmZhY2UsdC5mbltlXS5Db25zdHJ1Y3Rvcj1nLHQuZm5bZV0ubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiB0LmZuW2VdPWwsZy5falF1ZXJ5SW50ZXJmYWNlfX0oalF1ZXJ5KSxmdW5jdGlvbih0KXt2YXIgZT1cIm1vZGFsXCIscz1cIi5icy5tb2RhbFwiLGE9dC5mbltlXSxsPXtiYWNrZHJvcDohMCxrZXlib2FyZDohMCxmb2N1czohMCxzaG93OiEwfSxoPXtiYWNrZHJvcDpcIihib29sZWFufHN0cmluZylcIixrZXlib2FyZDpcImJvb2xlYW5cIixmb2N1czpcImJvb2xlYW5cIixzaG93OlwiYm9vbGVhblwifSxjPXtISURFOlwiaGlkZS5icy5tb2RhbFwiLEhJRERFTjpcImhpZGRlbi5icy5tb2RhbFwiLFNIT1c6XCJzaG93LmJzLm1vZGFsXCIsU0hPV046XCJzaG93bi5icy5tb2RhbFwiLEZPQ1VTSU46XCJmb2N1c2luLmJzLm1vZGFsXCIsUkVTSVpFOlwicmVzaXplLmJzLm1vZGFsXCIsQ0xJQ0tfRElTTUlTUzpcImNsaWNrLmRpc21pc3MuYnMubW9kYWxcIixLRVlET1dOX0RJU01JU1M6XCJrZXlkb3duLmRpc21pc3MuYnMubW9kYWxcIixNT1VTRVVQX0RJU01JU1M6XCJtb3VzZXVwLmRpc21pc3MuYnMubW9kYWxcIixNT1VTRURPV05fRElTTUlTUzpcIm1vdXNlZG93bi5kaXNtaXNzLmJzLm1vZGFsXCIsQ0xJQ0tfREFUQV9BUEk6XCJjbGljay5icy5tb2RhbC5kYXRhLWFwaVwifSx1PXtTQ1JPTExCQVJfTUVBU1VSRVI6XCJtb2RhbC1zY3JvbGxiYXItbWVhc3VyZVwiLEJBQ0tEUk9QOlwibW9kYWwtYmFja2Ryb3BcIixPUEVOOlwibW9kYWwtb3BlblwiLEZBREU6XCJmYWRlXCIsU0hPVzpcInNob3dcIn0sZD17RElBTE9HOlwiLm1vZGFsLWRpYWxvZ1wiLERBVEFfVE9HR0xFOidbZGF0YS10b2dnbGU9XCJtb2RhbFwiXScsREFUQV9ESVNNSVNTOidbZGF0YS1kaXNtaXNzPVwibW9kYWxcIl0nLEZJWEVEX0NPTlRFTlQ6XCIuZml4ZWQtdG9wLCAuZml4ZWQtYm90dG9tLCAuaXMtZml4ZWQsIC5zdGlja3ktdG9wXCIsTkFWQkFSX1RPR0dMRVI6XCIubmF2YmFyLXRvZ2dsZXJcIn0sZj1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoZSxpKXtuKHRoaXMsYSksdGhpcy5fY29uZmlnPXRoaXMuX2dldENvbmZpZyhpKSx0aGlzLl9lbGVtZW50PWUsdGhpcy5fZGlhbG9nPXQoZSkuZmluZChkLkRJQUxPRylbMF0sdGhpcy5fYmFja2Ryb3A9bnVsbCx0aGlzLl9pc1Nob3duPSExLHRoaXMuX2lzQm9keU92ZXJmbG93aW5nPSExLHRoaXMuX2lnbm9yZUJhY2tkcm9wQ2xpY2s9ITEsdGhpcy5fb3JpZ2luYWxCb2R5UGFkZGluZz0wLHRoaXMuX3Njcm9sbGJhcldpZHRoPTB9cmV0dXJuIGEucHJvdG90eXBlLnRvZ2dsZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5faXNTaG93bj90aGlzLmhpZGUoKTp0aGlzLnNob3codCl9LGEucHJvdG90eXBlLnNob3c9ZnVuY3Rpb24oZSl7dmFyIG49dGhpcztpZighdGhpcy5faXNUcmFuc2l0aW9uaW5nKXtyLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpJiZ0KHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKHUuRkFERSkmJih0aGlzLl9pc1RyYW5zaXRpb25pbmc9ITApO3ZhciBpPXQuRXZlbnQoYy5TSE9XLHtyZWxhdGVkVGFyZ2V0OmV9KTt0KHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoaSksdGhpcy5faXNTaG93bnx8aS5pc0RlZmF1bHRQcmV2ZW50ZWQoKXx8KHRoaXMuX2lzU2hvd249ITAsdGhpcy5fY2hlY2tTY3JvbGxiYXIoKSx0aGlzLl9zZXRTY3JvbGxiYXIoKSx0KGRvY3VtZW50LmJvZHkpLmFkZENsYXNzKHUuT1BFTiksdGhpcy5fc2V0RXNjYXBlRXZlbnQoKSx0aGlzLl9zZXRSZXNpemVFdmVudCgpLHQodGhpcy5fZWxlbWVudCkub24oYy5DTElDS19ESVNNSVNTLGQuREFUQV9ESVNNSVNTLGZ1bmN0aW9uKHQpe3JldHVybiBuLmhpZGUodCl9KSx0KHRoaXMuX2RpYWxvZykub24oYy5NT1VTRURPV05fRElTTUlTUyxmdW5jdGlvbigpe3Qobi5fZWxlbWVudCkub25lKGMuTU9VU0VVUF9ESVNNSVNTLGZ1bmN0aW9uKGUpe3QoZS50YXJnZXQpLmlzKG4uX2VsZW1lbnQpJiYobi5faWdub3JlQmFja2Ryb3BDbGljaz0hMCl9KX0pLHRoaXMuX3Nob3dCYWNrZHJvcChmdW5jdGlvbigpe3JldHVybiBuLl9zaG93RWxlbWVudChlKX0pKX19LGEucHJvdG90eXBlLmhpZGU9ZnVuY3Rpb24oZSl7dmFyIG49dGhpcztpZihlJiZlLnByZXZlbnREZWZhdWx0KCksIXRoaXMuX2lzVHJhbnNpdGlvbmluZyYmdGhpcy5faXNTaG93bil7dmFyIGk9ci5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSYmdCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyh1LkZBREUpO2kmJih0aGlzLl9pc1RyYW5zaXRpb25pbmc9ITApO3ZhciBvPXQuRXZlbnQoYy5ISURFKTt0KHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIobyksdGhpcy5faXNTaG93biYmIW8uaXNEZWZhdWx0UHJldmVudGVkKCkmJih0aGlzLl9pc1Nob3duPSExLHRoaXMuX3NldEVzY2FwZUV2ZW50KCksdGhpcy5fc2V0UmVzaXplRXZlbnQoKSx0KGRvY3VtZW50KS5vZmYoYy5GT0NVU0lOKSx0KHRoaXMuX2VsZW1lbnQpLnJlbW92ZUNsYXNzKHUuU0hPVyksdCh0aGlzLl9lbGVtZW50KS5vZmYoYy5DTElDS19ESVNNSVNTKSx0KHRoaXMuX2RpYWxvZykub2ZmKGMuTU9VU0VET1dOX0RJU01JU1MpLGk/dCh0aGlzLl9lbGVtZW50KS5vbmUoci5UUkFOU0lUSU9OX0VORCxmdW5jdGlvbih0KXtyZXR1cm4gbi5faGlkZU1vZGFsKHQpfSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoMzAwKTp0aGlzLl9oaWRlTW9kYWwoKSl9fSxhLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7dC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsXCJicy5tb2RhbFwiKSx0KHdpbmRvdyxkb2N1bWVudCx0aGlzLl9lbGVtZW50LHRoaXMuX2JhY2tkcm9wKS5vZmYocyksdGhpcy5fY29uZmlnPW51bGwsdGhpcy5fZWxlbWVudD1udWxsLHRoaXMuX2RpYWxvZz1udWxsLHRoaXMuX2JhY2tkcm9wPW51bGwsdGhpcy5faXNTaG93bj1udWxsLHRoaXMuX2lzQm9keU92ZXJmbG93aW5nPW51bGwsdGhpcy5faWdub3JlQmFja2Ryb3BDbGljaz1udWxsLHRoaXMuX3Njcm9sbGJhcldpZHRoPW51bGx9LGEucHJvdG90eXBlLmhhbmRsZVVwZGF0ZT1mdW5jdGlvbigpe3RoaXMuX2FkanVzdERpYWxvZygpfSxhLnByb3RvdHlwZS5fZ2V0Q29uZmlnPWZ1bmN0aW9uKG4pe3JldHVybiBuPXQuZXh0ZW5kKHt9LGwsbiksci50eXBlQ2hlY2tDb25maWcoZSxuLGgpLG59LGEucHJvdG90eXBlLl9zaG93RWxlbWVudD1mdW5jdGlvbihlKXt2YXIgbj10aGlzLGk9ci5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSYmdCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyh1LkZBREUpO3RoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSYmdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlLm5vZGVUeXBlPT09Tm9kZS5FTEVNRU5UX05PREV8fGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5fZWxlbWVudCksdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5PVwiYmxvY2tcIix0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIpLHRoaXMuX2VsZW1lbnQuc2Nyb2xsVG9wPTAsaSYmci5yZWZsb3codGhpcy5fZWxlbWVudCksdCh0aGlzLl9lbGVtZW50KS5hZGRDbGFzcyh1LlNIT1cpLHRoaXMuX2NvbmZpZy5mb2N1cyYmdGhpcy5fZW5mb3JjZUZvY3VzKCk7dmFyIG89dC5FdmVudChjLlNIT1dOLHtyZWxhdGVkVGFyZ2V0OmV9KSxzPWZ1bmN0aW9uKCl7bi5fY29uZmlnLmZvY3VzJiZuLl9lbGVtZW50LmZvY3VzKCksbi5faXNUcmFuc2l0aW9uaW5nPSExLHQobi5fZWxlbWVudCkudHJpZ2dlcihvKX07aT90KHRoaXMuX2RpYWxvZykub25lKHIuVFJBTlNJVElPTl9FTkQscykuZW11bGF0ZVRyYW5zaXRpb25FbmQoMzAwKTpzKCl9LGEucHJvdG90eXBlLl9lbmZvcmNlRm9jdXM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3QoZG9jdW1lbnQpLm9mZihjLkZPQ1VTSU4pLm9uKGMuRk9DVVNJTixmdW5jdGlvbihuKXtkb2N1bWVudD09PW4udGFyZ2V0fHxlLl9lbGVtZW50PT09bi50YXJnZXR8fHQoZS5fZWxlbWVudCkuaGFzKG4udGFyZ2V0KS5sZW5ndGh8fGUuX2VsZW1lbnQuZm9jdXMoKX0pfSxhLnByb3RvdHlwZS5fc2V0RXNjYXBlRXZlbnQ9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuX2lzU2hvd24mJnRoaXMuX2NvbmZpZy5rZXlib2FyZD90KHRoaXMuX2VsZW1lbnQpLm9uKGMuS0VZRE9XTl9ESVNNSVNTLGZ1bmN0aW9uKHQpezI3PT09dC53aGljaCYmKHQucHJldmVudERlZmF1bHQoKSxlLmhpZGUoKSl9KTp0aGlzLl9pc1Nob3dufHx0KHRoaXMuX2VsZW1lbnQpLm9mZihjLktFWURPV05fRElTTUlTUyl9LGEucHJvdG90eXBlLl9zZXRSZXNpemVFdmVudD1mdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy5faXNTaG93bj90KHdpbmRvdykub24oYy5SRVNJWkUsZnVuY3Rpb24odCl7cmV0dXJuIGUuaGFuZGxlVXBkYXRlKHQpfSk6dCh3aW5kb3cpLm9mZihjLlJFU0laRSl9LGEucHJvdG90eXBlLl9oaWRlTW9kYWw9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuX2VsZW1lbnQuc3R5bGUuZGlzcGxheT1cIm5vbmVcIix0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIsITApLHRoaXMuX2lzVHJhbnNpdGlvbmluZz0hMSx0aGlzLl9zaG93QmFja2Ryb3AoZnVuY3Rpb24oKXt0KGRvY3VtZW50LmJvZHkpLnJlbW92ZUNsYXNzKHUuT1BFTiksZS5fcmVzZXRBZGp1c3RtZW50cygpLGUuX3Jlc2V0U2Nyb2xsYmFyKCksdChlLl9lbGVtZW50KS50cmlnZ2VyKGMuSElEREVOKX0pfSxhLnByb3RvdHlwZS5fcmVtb3ZlQmFja2Ryb3A9ZnVuY3Rpb24oKXt0aGlzLl9iYWNrZHJvcCYmKHQodGhpcy5fYmFja2Ryb3ApLnJlbW92ZSgpLHRoaXMuX2JhY2tkcm9wPW51bGwpfSxhLnByb3RvdHlwZS5fc2hvd0JhY2tkcm9wPWZ1bmN0aW9uKGUpe3ZhciBuPXRoaXMsaT10KHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKHUuRkFERSk/dS5GQURFOlwiXCI7aWYodGhpcy5faXNTaG93biYmdGhpcy5fY29uZmlnLmJhY2tkcm9wKXt2YXIgbz1yLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpJiZpO2lmKHRoaXMuX2JhY2tkcm9wPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksdGhpcy5fYmFja2Ryb3AuY2xhc3NOYW1lPXUuQkFDS0RST1AsaSYmdCh0aGlzLl9iYWNrZHJvcCkuYWRkQ2xhc3MoaSksdCh0aGlzLl9iYWNrZHJvcCkuYXBwZW5kVG8oZG9jdW1lbnQuYm9keSksdCh0aGlzLl9lbGVtZW50KS5vbihjLkNMSUNLX0RJU01JU1MsZnVuY3Rpb24odCl7bi5faWdub3JlQmFja2Ryb3BDbGljaz9uLl9pZ25vcmVCYWNrZHJvcENsaWNrPSExOnQudGFyZ2V0PT09dC5jdXJyZW50VGFyZ2V0JiYoXCJzdGF0aWNcIj09PW4uX2NvbmZpZy5iYWNrZHJvcD9uLl9lbGVtZW50LmZvY3VzKCk6bi5oaWRlKCkpfSksbyYmci5yZWZsb3codGhpcy5fYmFja2Ryb3ApLHQodGhpcy5fYmFja2Ryb3ApLmFkZENsYXNzKHUuU0hPVyksIWUpcmV0dXJuO2lmKCFvKXJldHVybiB2b2lkIGUoKTt0KHRoaXMuX2JhY2tkcm9wKS5vbmUoci5UUkFOU0lUSU9OX0VORCxlKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCgxNTApfWVsc2UgaWYoIXRoaXMuX2lzU2hvd24mJnRoaXMuX2JhY2tkcm9wKXt0KHRoaXMuX2JhY2tkcm9wKS5yZW1vdmVDbGFzcyh1LlNIT1cpO3ZhciBzPWZ1bmN0aW9uKCl7bi5fcmVtb3ZlQmFja2Ryb3AoKSxlJiZlKCl9O3Iuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkmJnQodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3ModS5GQURFKT90KHRoaXMuX2JhY2tkcm9wKS5vbmUoci5UUkFOU0lUSU9OX0VORCxzKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCgxNTApOnMoKX1lbHNlIGUmJmUoKX0sYS5wcm90b3R5cGUuX2FkanVzdERpYWxvZz1mdW5jdGlvbigpe3ZhciB0PXRoaXMuX2VsZW1lbnQuc2Nyb2xsSGVpZ2h0PmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7IXRoaXMuX2lzQm9keU92ZXJmbG93aW5nJiZ0JiYodGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nTGVmdD10aGlzLl9zY3JvbGxiYXJXaWR0aCtcInB4XCIpLHRoaXMuX2lzQm9keU92ZXJmbG93aW5nJiYhdCYmKHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0PXRoaXMuX3Njcm9sbGJhcldpZHRoK1wicHhcIil9LGEucHJvdG90eXBlLl9yZXNldEFkanVzdG1lbnRzPWZ1bmN0aW9uKCl7dGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nTGVmdD1cIlwiLHRoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ1JpZ2h0PVwiXCJ9LGEucHJvdG90eXBlLl9jaGVja1Njcm9sbGJhcj1mdW5jdGlvbigpe3RoaXMuX2lzQm9keU92ZXJmbG93aW5nPWRvY3VtZW50LmJvZHkuY2xpZW50V2lkdGg8d2luZG93LmlubmVyV2lkdGgsdGhpcy5fc2Nyb2xsYmFyV2lkdGg9dGhpcy5fZ2V0U2Nyb2xsYmFyV2lkdGgoKX0sYS5wcm90b3R5cGUuX3NldFNjcm9sbGJhcj1mdW5jdGlvbigpe3ZhciBlPXRoaXM7aWYodGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcpe3QoZC5GSVhFRF9DT05URU5UKS5lYWNoKGZ1bmN0aW9uKG4saSl7dmFyIG89dChpKVswXS5zdHlsZS5wYWRkaW5nUmlnaHQscj10KGkpLmNzcyhcInBhZGRpbmctcmlnaHRcIik7dChpKS5kYXRhKFwicGFkZGluZy1yaWdodFwiLG8pLmNzcyhcInBhZGRpbmctcmlnaHRcIixwYXJzZUZsb2F0KHIpK2UuX3Njcm9sbGJhcldpZHRoK1wicHhcIil9KSx0KGQuTkFWQkFSX1RPR0dMRVIpLmVhY2goZnVuY3Rpb24obixpKXt2YXIgbz10KGkpWzBdLnN0eWxlLm1hcmdpblJpZ2h0LHI9dChpKS5jc3MoXCJtYXJnaW4tcmlnaHRcIik7dChpKS5kYXRhKFwibWFyZ2luLXJpZ2h0XCIsbykuY3NzKFwibWFyZ2luLXJpZ2h0XCIscGFyc2VGbG9hdChyKStlLl9zY3JvbGxiYXJXaWR0aCtcInB4XCIpfSk7dmFyIG49ZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQsaT10KFwiYm9keVwiKS5jc3MoXCJwYWRkaW5nLXJpZ2h0XCIpO3QoXCJib2R5XCIpLmRhdGEoXCJwYWRkaW5nLXJpZ2h0XCIsbikuY3NzKFwicGFkZGluZy1yaWdodFwiLHBhcnNlRmxvYXQoaSkrdGhpcy5fc2Nyb2xsYmFyV2lkdGgrXCJweFwiKX19LGEucHJvdG90eXBlLl9yZXNldFNjcm9sbGJhcj1mdW5jdGlvbigpe3QoZC5GSVhFRF9DT05URU5UKS5lYWNoKGZ1bmN0aW9uKGUsbil7dmFyIGk9dChuKS5kYXRhKFwicGFkZGluZy1yaWdodFwiKTt2b2lkIDAhPT1pJiZ0KG4pLmNzcyhcInBhZGRpbmctcmlnaHRcIixpKS5yZW1vdmVEYXRhKFwicGFkZGluZy1yaWdodFwiKX0pLHQoZC5OQVZCQVJfVE9HR0xFUikuZWFjaChmdW5jdGlvbihlLG4pe3ZhciBpPXQobikuZGF0YShcIm1hcmdpbi1yaWdodFwiKTt2b2lkIDAhPT1pJiZ0KG4pLmNzcyhcIm1hcmdpbi1yaWdodFwiLGkpLnJlbW92ZURhdGEoXCJtYXJnaW4tcmlnaHRcIil9KTt2YXIgZT10KFwiYm9keVwiKS5kYXRhKFwicGFkZGluZy1yaWdodFwiKTt2b2lkIDAhPT1lJiZ0KFwiYm9keVwiKS5jc3MoXCJwYWRkaW5nLXJpZ2h0XCIsZSkucmVtb3ZlRGF0YShcInBhZGRpbmctcmlnaHRcIil9LGEucHJvdG90eXBlLl9nZXRTY3JvbGxiYXJXaWR0aD1mdW5jdGlvbigpe3ZhciB0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7dC5jbGFzc05hbWU9dS5TQ1JPTExCQVJfTUVBU1VSRVIsZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh0KTt2YXIgZT10LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoLXQuY2xpZW50V2lkdGg7cmV0dXJuIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQodCksZX0sYS5falF1ZXJ5SW50ZXJmYWNlPWZ1bmN0aW9uKGUsbil7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBvPXQodGhpcykuZGF0YShcImJzLm1vZGFsXCIpLHI9dC5leHRlbmQoe30sYS5EZWZhdWx0LHQodGhpcykuZGF0YSgpLFwib2JqZWN0XCI9PT0odm9pZCAwPT09ZT9cInVuZGVmaW5lZFwiOmkoZSkpJiZlKTtpZihvfHwobz1uZXcgYSh0aGlzLHIpLHQodGhpcykuZGF0YShcImJzLm1vZGFsXCIsbykpLFwic3RyaW5nXCI9PXR5cGVvZiBlKXtpZih2b2lkIDA9PT1vW2VdKXRocm93IG5ldyBFcnJvcignTm8gbWV0aG9kIG5hbWVkIFwiJytlKydcIicpO29bZV0obil9ZWxzZSByLnNob3cmJm8uc2hvdyhuKX0pfSxvKGEsbnVsbCxbe2tleTpcIlZFUlNJT05cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIjQuMC4wLWJldGFcIn19LHtrZXk6XCJEZWZhdWx0XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGx9fV0pLGF9KCk7dChkb2N1bWVudCkub24oYy5DTElDS19EQVRBX0FQSSxkLkRBVEFfVE9HR0xFLGZ1bmN0aW9uKGUpe3ZhciBuPXRoaXMsaT12b2lkIDAsbz1yLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodGhpcyk7byYmKGk9dChvKVswXSk7dmFyIHM9dChpKS5kYXRhKFwiYnMubW9kYWxcIik/XCJ0b2dnbGVcIjp0LmV4dGVuZCh7fSx0KGkpLmRhdGEoKSx0KHRoaXMpLmRhdGEoKSk7XCJBXCIhPT10aGlzLnRhZ05hbWUmJlwiQVJFQVwiIT09dGhpcy50YWdOYW1lfHxlLnByZXZlbnREZWZhdWx0KCk7dmFyIGE9dChpKS5vbmUoYy5TSE9XLGZ1bmN0aW9uKGUpe2UuaXNEZWZhdWx0UHJldmVudGVkKCl8fGEub25lKGMuSElEREVOLGZ1bmN0aW9uKCl7dChuKS5pcyhcIjp2aXNpYmxlXCIpJiZuLmZvY3VzKCl9KX0pO2YuX2pRdWVyeUludGVyZmFjZS5jYWxsKHQoaSkscyx0aGlzKX0pLHQuZm5bZV09Zi5falF1ZXJ5SW50ZXJmYWNlLHQuZm5bZV0uQ29uc3RydWN0b3I9Zix0LmZuW2VdLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdC5mbltlXT1hLGYuX2pRdWVyeUludGVyZmFjZX19KGpRdWVyeSksZnVuY3Rpb24odCl7dmFyIGU9XCJzY3JvbGxzcHlcIixzPXQuZm5bZV0sYT17b2Zmc2V0OjEwLG1ldGhvZDpcImF1dG9cIix0YXJnZXQ6XCJcIn0sbD17b2Zmc2V0OlwibnVtYmVyXCIsbWV0aG9kOlwic3RyaW5nXCIsdGFyZ2V0OlwiKHN0cmluZ3xlbGVtZW50KVwifSxoPXtBQ1RJVkFURTpcImFjdGl2YXRlLmJzLnNjcm9sbHNweVwiLFNDUk9MTDpcInNjcm9sbC5icy5zY3JvbGxzcHlcIixMT0FEX0RBVEFfQVBJOlwibG9hZC5icy5zY3JvbGxzcHkuZGF0YS1hcGlcIn0sYz17RFJPUERPV05fSVRFTTpcImRyb3Bkb3duLWl0ZW1cIixEUk9QRE9XTl9NRU5VOlwiZHJvcGRvd24tbWVudVwiLEFDVElWRTpcImFjdGl2ZVwifSx1PXtEQVRBX1NQWTonW2RhdGEtc3B5PVwic2Nyb2xsXCJdJyxBQ1RJVkU6XCIuYWN0aXZlXCIsTkFWX0xJU1RfR1JPVVA6XCIubmF2LCAubGlzdC1ncm91cFwiLE5BVl9MSU5LUzpcIi5uYXYtbGlua1wiLExJU1RfSVRFTVM6XCIubGlzdC1ncm91cC1pdGVtXCIsRFJPUERPV046XCIuZHJvcGRvd25cIixEUk9QRE9XTl9JVEVNUzpcIi5kcm9wZG93bi1pdGVtXCIsRFJPUERPV05fVE9HR0xFOlwiLmRyb3Bkb3duLXRvZ2dsZVwifSxkPXtPRkZTRVQ6XCJvZmZzZXRcIixQT1NJVElPTjpcInBvc2l0aW9uXCJ9LGY9ZnVuY3Rpb24oKXtmdW5jdGlvbiBzKGUsaSl7dmFyIG89dGhpcztuKHRoaXMscyksdGhpcy5fZWxlbWVudD1lLHRoaXMuX3Njcm9sbEVsZW1lbnQ9XCJCT0RZXCI9PT1lLnRhZ05hbWU/d2luZG93OmUsdGhpcy5fY29uZmlnPXRoaXMuX2dldENvbmZpZyhpKSx0aGlzLl9zZWxlY3Rvcj10aGlzLl9jb25maWcudGFyZ2V0K1wiIFwiK3UuTkFWX0xJTktTK1wiLFwiK3RoaXMuX2NvbmZpZy50YXJnZXQrXCIgXCIrdS5MSVNUX0lURU1TK1wiLFwiK3RoaXMuX2NvbmZpZy50YXJnZXQrXCIgXCIrdS5EUk9QRE9XTl9JVEVNUyx0aGlzLl9vZmZzZXRzPVtdLHRoaXMuX3RhcmdldHM9W10sdGhpcy5fYWN0aXZlVGFyZ2V0PW51bGwsdGhpcy5fc2Nyb2xsSGVpZ2h0PTAsdCh0aGlzLl9zY3JvbGxFbGVtZW50KS5vbihoLlNDUk9MTCxmdW5jdGlvbih0KXtyZXR1cm4gby5fcHJvY2Vzcyh0KX0pLHRoaXMucmVmcmVzaCgpLHRoaXMuX3Byb2Nlc3MoKX1yZXR1cm4gcy5wcm90b3R5cGUucmVmcmVzaD1mdW5jdGlvbigpe3ZhciBlPXRoaXMsbj10aGlzLl9zY3JvbGxFbGVtZW50IT09dGhpcy5fc2Nyb2xsRWxlbWVudC53aW5kb3c/ZC5QT1NJVElPTjpkLk9GRlNFVCxpPVwiYXV0b1wiPT09dGhpcy5fY29uZmlnLm1ldGhvZD9uOnRoaXMuX2NvbmZpZy5tZXRob2Qsbz1pPT09ZC5QT1NJVElPTj90aGlzLl9nZXRTY3JvbGxUb3AoKTowO3RoaXMuX29mZnNldHM9W10sdGhpcy5fdGFyZ2V0cz1bXSx0aGlzLl9zY3JvbGxIZWlnaHQ9dGhpcy5fZ2V0U2Nyb2xsSGVpZ2h0KCksdC5tYWtlQXJyYXkodCh0aGlzLl9zZWxlY3RvcikpLm1hcChmdW5jdGlvbihlKXt2YXIgbj12b2lkIDAscz1yLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQoZSk7aWYocyYmKG49dChzKVswXSksbil7dmFyIGE9bi5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtpZihhLndpZHRofHxhLmhlaWdodClyZXR1cm5bdChuKVtpXSgpLnRvcCtvLHNdfXJldHVybiBudWxsfSkuZmlsdGVyKGZ1bmN0aW9uKHQpe3JldHVybiB0fSkuc29ydChmdW5jdGlvbih0LGUpe3JldHVybiB0WzBdLWVbMF19KS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2UuX29mZnNldHMucHVzaCh0WzBdKSxlLl90YXJnZXRzLnB1c2godFsxXSl9KX0scy5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe3QucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LFwiYnMuc2Nyb2xsc3B5XCIpLHQodGhpcy5fc2Nyb2xsRWxlbWVudCkub2ZmKFwiLmJzLnNjcm9sbHNweVwiKSx0aGlzLl9lbGVtZW50PW51bGwsdGhpcy5fc2Nyb2xsRWxlbWVudD1udWxsLHRoaXMuX2NvbmZpZz1udWxsLHRoaXMuX3NlbGVjdG9yPW51bGwsdGhpcy5fb2Zmc2V0cz1udWxsLHRoaXMuX3RhcmdldHM9bnVsbCx0aGlzLl9hY3RpdmVUYXJnZXQ9bnVsbCx0aGlzLl9zY3JvbGxIZWlnaHQ9bnVsbH0scy5wcm90b3R5cGUuX2dldENvbmZpZz1mdW5jdGlvbihuKXtpZihcInN0cmluZ1wiIT10eXBlb2Yobj10LmV4dGVuZCh7fSxhLG4pKS50YXJnZXQpe3ZhciBpPXQobi50YXJnZXQpLmF0dHIoXCJpZFwiKTtpfHwoaT1yLmdldFVJRChlKSx0KG4udGFyZ2V0KS5hdHRyKFwiaWRcIixpKSksbi50YXJnZXQ9XCIjXCIraX1yZXR1cm4gci50eXBlQ2hlY2tDb25maWcoZSxuLGwpLG59LHMucHJvdG90eXBlLl9nZXRTY3JvbGxUb3A9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fc2Nyb2xsRWxlbWVudD09PXdpbmRvdz90aGlzLl9zY3JvbGxFbGVtZW50LnBhZ2VZT2Zmc2V0OnRoaXMuX3Njcm9sbEVsZW1lbnQuc2Nyb2xsVG9wfSxzLnByb3RvdHlwZS5fZ2V0U2Nyb2xsSGVpZ2h0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQuc2Nyb2xsSGVpZ2h0fHxNYXRoLm1heChkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0KX0scy5wcm90b3R5cGUuX2dldE9mZnNldEhlaWdodD1mdW5jdGlvbigpe3JldHVybiB0aGlzLl9zY3JvbGxFbGVtZW50PT09d2luZG93P3dpbmRvdy5pbm5lckhlaWdodDp0aGlzLl9zY3JvbGxFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodH0scy5wcm90b3R5cGUuX3Byb2Nlc3M9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLl9nZXRTY3JvbGxUb3AoKSt0aGlzLl9jb25maWcub2Zmc2V0LGU9dGhpcy5fZ2V0U2Nyb2xsSGVpZ2h0KCksbj10aGlzLl9jb25maWcub2Zmc2V0K2UtdGhpcy5fZ2V0T2Zmc2V0SGVpZ2h0KCk7aWYodGhpcy5fc2Nyb2xsSGVpZ2h0IT09ZSYmdGhpcy5yZWZyZXNoKCksdD49bil7dmFyIGk9dGhpcy5fdGFyZ2V0c1t0aGlzLl90YXJnZXRzLmxlbmd0aC0xXTt0aGlzLl9hY3RpdmVUYXJnZXQhPT1pJiZ0aGlzLl9hY3RpdmF0ZShpKX1lbHNle2lmKHRoaXMuX2FjdGl2ZVRhcmdldCYmdDx0aGlzLl9vZmZzZXRzWzBdJiZ0aGlzLl9vZmZzZXRzWzBdPjApcmV0dXJuIHRoaXMuX2FjdGl2ZVRhcmdldD1udWxsLHZvaWQgdGhpcy5fY2xlYXIoKTtmb3IodmFyIG89dGhpcy5fb2Zmc2V0cy5sZW5ndGg7by0tOyl0aGlzLl9hY3RpdmVUYXJnZXQhPT10aGlzLl90YXJnZXRzW29dJiZ0Pj10aGlzLl9vZmZzZXRzW29dJiYodm9pZCAwPT09dGhpcy5fb2Zmc2V0c1tvKzFdfHx0PHRoaXMuX29mZnNldHNbbysxXSkmJnRoaXMuX2FjdGl2YXRlKHRoaXMuX3RhcmdldHNbb10pfX0scy5wcm90b3R5cGUuX2FjdGl2YXRlPWZ1bmN0aW9uKGUpe3RoaXMuX2FjdGl2ZVRhcmdldD1lLHRoaXMuX2NsZWFyKCk7dmFyIG49dGhpcy5fc2VsZWN0b3Iuc3BsaXQoXCIsXCIpO249bi5tYXAoZnVuY3Rpb24odCl7cmV0dXJuIHQrJ1tkYXRhLXRhcmdldD1cIicrZSsnXCJdLCcrdCsnW2hyZWY9XCInK2UrJ1wiXSd9KTt2YXIgaT10KG4uam9pbihcIixcIikpO2kuaGFzQ2xhc3MoYy5EUk9QRE9XTl9JVEVNKT8oaS5jbG9zZXN0KHUuRFJPUERPV04pLmZpbmQodS5EUk9QRE9XTl9UT0dHTEUpLmFkZENsYXNzKGMuQUNUSVZFKSxpLmFkZENsYXNzKGMuQUNUSVZFKSk6KGkuYWRkQ2xhc3MoYy5BQ1RJVkUpLGkucGFyZW50cyh1Lk5BVl9MSVNUX0dST1VQKS5wcmV2KHUuTkFWX0xJTktTK1wiLCBcIit1LkxJU1RfSVRFTVMpLmFkZENsYXNzKGMuQUNUSVZFKSksdCh0aGlzLl9zY3JvbGxFbGVtZW50KS50cmlnZ2VyKGguQUNUSVZBVEUse3JlbGF0ZWRUYXJnZXQ6ZX0pfSxzLnByb3RvdHlwZS5fY2xlYXI9ZnVuY3Rpb24oKXt0KHRoaXMuX3NlbGVjdG9yKS5maWx0ZXIodS5BQ1RJVkUpLnJlbW92ZUNsYXNzKGMuQUNUSVZFKX0scy5falF1ZXJ5SW50ZXJmYWNlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgbj10KHRoaXMpLmRhdGEoXCJicy5zY3JvbGxzcHlcIiksbz1cIm9iamVjdFwiPT09KHZvaWQgMD09PWU/XCJ1bmRlZmluZWRcIjppKGUpKSYmZTtpZihufHwobj1uZXcgcyh0aGlzLG8pLHQodGhpcykuZGF0YShcImJzLnNjcm9sbHNweVwiLG4pKSxcInN0cmluZ1wiPT10eXBlb2YgZSl7aWYodm9pZCAwPT09bltlXSl0aHJvdyBuZXcgRXJyb3IoJ05vIG1ldGhvZCBuYW1lZCBcIicrZSsnXCInKTtuW2VdKCl9fSl9LG8ocyxudWxsLFt7a2V5OlwiVkVSU0lPTlwiLGdldDpmdW5jdGlvbigpe3JldHVyblwiNC4wLjAtYmV0YVwifX0se2tleTpcIkRlZmF1bHRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYX19XSksc30oKTt0KHdpbmRvdykub24oaC5MT0FEX0RBVEFfQVBJLGZ1bmN0aW9uKCl7Zm9yKHZhciBlPXQubWFrZUFycmF5KHQodS5EQVRBX1NQWSkpLG49ZS5sZW5ndGg7bi0tOyl7dmFyIGk9dChlW25dKTtmLl9qUXVlcnlJbnRlcmZhY2UuY2FsbChpLGkuZGF0YSgpKX19KSx0LmZuW2VdPWYuX2pRdWVyeUludGVyZmFjZSx0LmZuW2VdLkNvbnN0cnVjdG9yPWYsdC5mbltlXS5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIHQuZm5bZV09cyxmLl9qUXVlcnlJbnRlcmZhY2V9fShqUXVlcnkpLGZ1bmN0aW9uKHQpe3ZhciBlPXQuZm4udGFiLGk9e0hJREU6XCJoaWRlLmJzLnRhYlwiLEhJRERFTjpcImhpZGRlbi5icy50YWJcIixTSE9XOlwic2hvdy5icy50YWJcIixTSE9XTjpcInNob3duLmJzLnRhYlwiLENMSUNLX0RBVEFfQVBJOlwiY2xpY2suYnMudGFiLmRhdGEtYXBpXCJ9LHM9e0RST1BET1dOX01FTlU6XCJkcm9wZG93bi1tZW51XCIsQUNUSVZFOlwiYWN0aXZlXCIsRElTQUJMRUQ6XCJkaXNhYmxlZFwiLEZBREU6XCJmYWRlXCIsU0hPVzpcInNob3dcIn0sYT17RFJPUERPV046XCIuZHJvcGRvd25cIixOQVZfTElTVF9HUk9VUDpcIi5uYXYsIC5saXN0LWdyb3VwXCIsQUNUSVZFOlwiLmFjdGl2ZVwiLERBVEFfVE9HR0xFOidbZGF0YS10b2dnbGU9XCJ0YWJcIl0sIFtkYXRhLXRvZ2dsZT1cInBpbGxcIl0sIFtkYXRhLXRvZ2dsZT1cImxpc3RcIl0nLERST1BET1dOX1RPR0dMRTpcIi5kcm9wZG93bi10b2dnbGVcIixEUk9QRE9XTl9BQ1RJVkVfQ0hJTEQ6XCI+IC5kcm9wZG93bi1tZW51IC5hY3RpdmVcIn0sbD1mdW5jdGlvbigpe2Z1bmN0aW9uIGUodCl7bih0aGlzLGUpLHRoaXMuX2VsZW1lbnQ9dH1yZXR1cm4gZS5wcm90b3R5cGUuc2hvdz1mdW5jdGlvbigpe3ZhciBlPXRoaXM7aWYoISh0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUmJnRoaXMuX2VsZW1lbnQucGFyZW50Tm9kZS5ub2RlVHlwZT09PU5vZGUuRUxFTUVOVF9OT0RFJiZ0KHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKHMuQUNUSVZFKXx8dCh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhzLkRJU0FCTEVEKSkpe3ZhciBuPXZvaWQgMCxvPXZvaWQgMCxsPXQodGhpcy5fZWxlbWVudCkuY2xvc2VzdChhLk5BVl9MSVNUX0dST1VQKVswXSxoPXIuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KTtsJiYobz10Lm1ha2VBcnJheSh0KGwpLmZpbmQoYS5BQ1RJVkUpKSxvPW9bby5sZW5ndGgtMV0pO3ZhciBjPXQuRXZlbnQoaS5ISURFLHtyZWxhdGVkVGFyZ2V0OnRoaXMuX2VsZW1lbnR9KSx1PXQuRXZlbnQoaS5TSE9XLHtyZWxhdGVkVGFyZ2V0Om99KTtpZihvJiZ0KG8pLnRyaWdnZXIoYyksdCh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHUpLCF1LmlzRGVmYXVsdFByZXZlbnRlZCgpJiYhYy5pc0RlZmF1bHRQcmV2ZW50ZWQoKSl7aCYmKG49dChoKVswXSksdGhpcy5fYWN0aXZhdGUodGhpcy5fZWxlbWVudCxsKTt2YXIgZD1mdW5jdGlvbigpe3ZhciBuPXQuRXZlbnQoaS5ISURERU4se3JlbGF0ZWRUYXJnZXQ6ZS5fZWxlbWVudH0pLHI9dC5FdmVudChpLlNIT1dOLHtyZWxhdGVkVGFyZ2V0Om99KTt0KG8pLnRyaWdnZXIobiksdChlLl9lbGVtZW50KS50cmlnZ2VyKHIpfTtuP3RoaXMuX2FjdGl2YXRlKG4sbi5wYXJlbnROb2RlLGQpOmQoKX19fSxlLnByb3RvdHlwZS5kaXNwb3NlPWZ1bmN0aW9uKCl7dC5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsXCJicy50YWJcIiksdGhpcy5fZWxlbWVudD1udWxsfSxlLnByb3RvdHlwZS5fYWN0aXZhdGU9ZnVuY3Rpb24oZSxuLGkpe3ZhciBvPXRoaXMsbD10KG4pLmZpbmQoYS5BQ1RJVkUpWzBdLGg9aSYmci5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSYmbCYmdChsKS5oYXNDbGFzcyhzLkZBREUpLGM9ZnVuY3Rpb24oKXtyZXR1cm4gby5fdHJhbnNpdGlvbkNvbXBsZXRlKGUsbCxoLGkpfTtsJiZoP3QobCkub25lKHIuVFJBTlNJVElPTl9FTkQsYykuZW11bGF0ZVRyYW5zaXRpb25FbmQoMTUwKTpjKCksbCYmdChsKS5yZW1vdmVDbGFzcyhzLlNIT1cpfSxlLnByb3RvdHlwZS5fdHJhbnNpdGlvbkNvbXBsZXRlPWZ1bmN0aW9uKGUsbixpLG8pe2lmKG4pe3QobikucmVtb3ZlQ2xhc3Mocy5BQ1RJVkUpO3ZhciBsPXQobi5wYXJlbnROb2RlKS5maW5kKGEuRFJPUERPV05fQUNUSVZFX0NISUxEKVswXTtsJiZ0KGwpLnJlbW92ZUNsYXNzKHMuQUNUSVZFKSxuLnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIiwhMSl9aWYodChlKS5hZGRDbGFzcyhzLkFDVElWRSksZS5zZXRBdHRyaWJ1dGUoXCJhcmlhLWV4cGFuZGVkXCIsITApLGk/KHIucmVmbG93KGUpLHQoZSkuYWRkQ2xhc3Mocy5TSE9XKSk6dChlKS5yZW1vdmVDbGFzcyhzLkZBREUpLGUucGFyZW50Tm9kZSYmdChlLnBhcmVudE5vZGUpLmhhc0NsYXNzKHMuRFJPUERPV05fTUVOVSkpe3ZhciBoPXQoZSkuY2xvc2VzdChhLkRST1BET1dOKVswXTtoJiZ0KGgpLmZpbmQoYS5EUk9QRE9XTl9UT0dHTEUpLmFkZENsYXNzKHMuQUNUSVZFKSxlLnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIiwhMCl9byYmbygpfSxlLl9qUXVlcnlJbnRlcmZhY2U9ZnVuY3Rpb24obil7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBpPXQodGhpcyksbz1pLmRhdGEoXCJicy50YWJcIik7aWYob3x8KG89bmV3IGUodGhpcyksaS5kYXRhKFwiYnMudGFiXCIsbykpLFwic3RyaW5nXCI9PXR5cGVvZiBuKXtpZih2b2lkIDA9PT1vW25dKXRocm93IG5ldyBFcnJvcignTm8gbWV0aG9kIG5hbWVkIFwiJytuKydcIicpO29bbl0oKX19KX0sbyhlLG51bGwsW3trZXk6XCJWRVJTSU9OXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI0LjAuMC1iZXRhXCJ9fV0pLGV9KCk7dChkb2N1bWVudCkub24oaS5DTElDS19EQVRBX0FQSSxhLkRBVEFfVE9HR0xFLGZ1bmN0aW9uKGUpe2UucHJldmVudERlZmF1bHQoKSxsLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCh0KHRoaXMpLFwic2hvd1wiKX0pLHQuZm4udGFiPWwuX2pRdWVyeUludGVyZmFjZSx0LmZuLnRhYi5Db25zdHJ1Y3Rvcj1sLHQuZm4udGFiLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdC5mbi50YWI9ZSxsLl9qUXVlcnlJbnRlcmZhY2V9fShqUXVlcnkpLGZ1bmN0aW9uKHQpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBQb3BwZXIpdGhyb3cgbmV3IEVycm9yKFwiQm9vdHN0cmFwIHRvb2x0aXBzIHJlcXVpcmUgUG9wcGVyLmpzIChodHRwczovL3BvcHBlci5qcy5vcmcpXCIpO3ZhciBlPVwidG9vbHRpcFwiLHM9XCIuYnMudG9vbHRpcFwiLGE9dC5mbltlXSxsPW5ldyBSZWdFeHAoXCIoXnxcXFxccylicy10b29sdGlwXFxcXFMrXCIsXCJnXCIpLGg9e2FuaW1hdGlvbjpcImJvb2xlYW5cIix0ZW1wbGF0ZTpcInN0cmluZ1wiLHRpdGxlOlwiKHN0cmluZ3xlbGVtZW50fGZ1bmN0aW9uKVwiLHRyaWdnZXI6XCJzdHJpbmdcIixkZWxheTpcIihudW1iZXJ8b2JqZWN0KVwiLGh0bWw6XCJib29sZWFuXCIsc2VsZWN0b3I6XCIoc3RyaW5nfGJvb2xlYW4pXCIscGxhY2VtZW50OlwiKHN0cmluZ3xmdW5jdGlvbilcIixvZmZzZXQ6XCIobnVtYmVyfHN0cmluZylcIixjb250YWluZXI6XCIoc3RyaW5nfGVsZW1lbnR8Ym9vbGVhbilcIixmYWxsYmFja1BsYWNlbWVudDpcIihzdHJpbmd8YXJyYXkpXCJ9LGM9e0FVVE86XCJhdXRvXCIsVE9QOlwidG9wXCIsUklHSFQ6XCJyaWdodFwiLEJPVFRPTTpcImJvdHRvbVwiLExFRlQ6XCJsZWZ0XCJ9LHU9e2FuaW1hdGlvbjohMCx0ZW1wbGF0ZTonPGRpdiBjbGFzcz1cInRvb2x0aXBcIiByb2xlPVwidG9vbHRpcFwiPjxkaXYgY2xhc3M9XCJhcnJvd1wiPjwvZGl2PjxkaXYgY2xhc3M9XCJ0b29sdGlwLWlubmVyXCI+PC9kaXY+PC9kaXY+Jyx0cmlnZ2VyOlwiaG92ZXIgZm9jdXNcIix0aXRsZTpcIlwiLGRlbGF5OjAsaHRtbDohMSxzZWxlY3RvcjohMSxwbGFjZW1lbnQ6XCJ0b3BcIixvZmZzZXQ6MCxjb250YWluZXI6ITEsZmFsbGJhY2tQbGFjZW1lbnQ6XCJmbGlwXCJ9LGQ9e1NIT1c6XCJzaG93XCIsT1VUOlwib3V0XCJ9LGY9e0hJREU6XCJoaWRlXCIrcyxISURERU46XCJoaWRkZW5cIitzLFNIT1c6XCJzaG93XCIrcyxTSE9XTjpcInNob3duXCIrcyxJTlNFUlRFRDpcImluc2VydGVkXCIrcyxDTElDSzpcImNsaWNrXCIrcyxGT0NVU0lOOlwiZm9jdXNpblwiK3MsRk9DVVNPVVQ6XCJmb2N1c291dFwiK3MsTU9VU0VFTlRFUjpcIm1vdXNlZW50ZXJcIitzLE1PVVNFTEVBVkU6XCJtb3VzZWxlYXZlXCIrc30scD17RkFERTpcImZhZGVcIixTSE9XOlwic2hvd1wifSxfPXtUT09MVElQOlwiLnRvb2x0aXBcIixUT09MVElQX0lOTkVSOlwiLnRvb2x0aXAtaW5uZXJcIixBUlJPVzpcIi5hcnJvd1wifSxnPXtIT1ZFUjpcImhvdmVyXCIsRk9DVVM6XCJmb2N1c1wiLENMSUNLOlwiY2xpY2tcIixNQU5VQUw6XCJtYW51YWxcIn0sbT1mdW5jdGlvbigpe2Z1bmN0aW9uIGEodCxlKXtuKHRoaXMsYSksdGhpcy5faXNFbmFibGVkPSEwLHRoaXMuX3RpbWVvdXQ9MCx0aGlzLl9ob3ZlclN0YXRlPVwiXCIsdGhpcy5fYWN0aXZlVHJpZ2dlcj17fSx0aGlzLl9wb3BwZXI9bnVsbCx0aGlzLmVsZW1lbnQ9dCx0aGlzLmNvbmZpZz10aGlzLl9nZXRDb25maWcoZSksdGhpcy50aXA9bnVsbCx0aGlzLl9zZXRMaXN0ZW5lcnMoKX1yZXR1cm4gYS5wcm90b3R5cGUuZW5hYmxlPWZ1bmN0aW9uKCl7dGhpcy5faXNFbmFibGVkPSEwfSxhLnByb3RvdHlwZS5kaXNhYmxlPWZ1bmN0aW9uKCl7dGhpcy5faXNFbmFibGVkPSExfSxhLnByb3RvdHlwZS50b2dnbGVFbmFibGVkPWZ1bmN0aW9uKCl7dGhpcy5faXNFbmFibGVkPSF0aGlzLl9pc0VuYWJsZWR9LGEucHJvdG90eXBlLnRvZ2dsZT1mdW5jdGlvbihlKXtpZihlKXt2YXIgbj10aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZLGk9dChlLmN1cnJlbnRUYXJnZXQpLmRhdGEobik7aXx8KGk9bmV3IHRoaXMuY29uc3RydWN0b3IoZS5jdXJyZW50VGFyZ2V0LHRoaXMuX2dldERlbGVnYXRlQ29uZmlnKCkpLHQoZS5jdXJyZW50VGFyZ2V0KS5kYXRhKG4saSkpLGkuX2FjdGl2ZVRyaWdnZXIuY2xpY2s9IWkuX2FjdGl2ZVRyaWdnZXIuY2xpY2ssaS5faXNXaXRoQWN0aXZlVHJpZ2dlcigpP2kuX2VudGVyKG51bGwsaSk6aS5fbGVhdmUobnVsbCxpKX1lbHNle2lmKHQodGhpcy5nZXRUaXBFbGVtZW50KCkpLmhhc0NsYXNzKHAuU0hPVykpcmV0dXJuIHZvaWQgdGhpcy5fbGVhdmUobnVsbCx0aGlzKTt0aGlzLl9lbnRlcihudWxsLHRoaXMpfX0sYS5wcm90b3R5cGUuZGlzcG9zZT1mdW5jdGlvbigpe2NsZWFyVGltZW91dCh0aGlzLl90aW1lb3V0KSx0LnJlbW92ZURhdGEodGhpcy5lbGVtZW50LHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVkpLHQodGhpcy5lbGVtZW50KS5vZmYodGhpcy5jb25zdHJ1Y3Rvci5FVkVOVF9LRVkpLHQodGhpcy5lbGVtZW50KS5jbG9zZXN0KFwiLm1vZGFsXCIpLm9mZihcImhpZGUuYnMubW9kYWxcIiksdGhpcy50aXAmJnQodGhpcy50aXApLnJlbW92ZSgpLHRoaXMuX2lzRW5hYmxlZD1udWxsLHRoaXMuX3RpbWVvdXQ9bnVsbCx0aGlzLl9ob3ZlclN0YXRlPW51bGwsdGhpcy5fYWN0aXZlVHJpZ2dlcj1udWxsLG51bGwhPT10aGlzLl9wb3BwZXImJnRoaXMuX3BvcHBlci5kZXN0cm95KCksdGhpcy5fcG9wcGVyPW51bGwsdGhpcy5lbGVtZW50PW51bGwsdGhpcy5jb25maWc9bnVsbCx0aGlzLnRpcD1udWxsfSxhLnByb3RvdHlwZS5zaG93PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZihcIm5vbmVcIj09PXQodGhpcy5lbGVtZW50KS5jc3MoXCJkaXNwbGF5XCIpKXRocm93IG5ldyBFcnJvcihcIlBsZWFzZSB1c2Ugc2hvdyBvbiB2aXNpYmxlIGVsZW1lbnRzXCIpO3ZhciBuPXQuRXZlbnQodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5TSE9XKTtpZih0aGlzLmlzV2l0aENvbnRlbnQoKSYmdGhpcy5faXNFbmFibGVkKXt0KHRoaXMuZWxlbWVudCkudHJpZ2dlcihuKTt2YXIgaT10LmNvbnRhaW5zKHRoaXMuZWxlbWVudC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCx0aGlzLmVsZW1lbnQpO2lmKG4uaXNEZWZhdWx0UHJldmVudGVkKCl8fCFpKXJldHVybjt2YXIgbz10aGlzLmdldFRpcEVsZW1lbnQoKSxzPXIuZ2V0VUlEKHRoaXMuY29uc3RydWN0b3IuTkFNRSk7by5zZXRBdHRyaWJ1dGUoXCJpZFwiLHMpLHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJhcmlhLWRlc2NyaWJlZGJ5XCIscyksdGhpcy5zZXRDb250ZW50KCksdGhpcy5jb25maWcuYW5pbWF0aW9uJiZ0KG8pLmFkZENsYXNzKHAuRkFERSk7dmFyIGw9XCJmdW5jdGlvblwiPT10eXBlb2YgdGhpcy5jb25maWcucGxhY2VtZW50P3RoaXMuY29uZmlnLnBsYWNlbWVudC5jYWxsKHRoaXMsbyx0aGlzLmVsZW1lbnQpOnRoaXMuY29uZmlnLnBsYWNlbWVudCxoPXRoaXMuX2dldEF0dGFjaG1lbnQobCk7dGhpcy5hZGRBdHRhY2htZW50Q2xhc3MoaCk7dmFyIGM9ITE9PT10aGlzLmNvbmZpZy5jb250YWluZXI/ZG9jdW1lbnQuYm9keTp0KHRoaXMuY29uZmlnLmNvbnRhaW5lcik7dChvKS5kYXRhKHRoaXMuY29uc3RydWN0b3IuREFUQV9LRVksdGhpcyksdC5jb250YWlucyh0aGlzLmVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsdGhpcy50aXApfHx0KG8pLmFwcGVuZFRvKGMpLHQodGhpcy5lbGVtZW50KS50cmlnZ2VyKHRoaXMuY29uc3RydWN0b3IuRXZlbnQuSU5TRVJURUQpLHRoaXMuX3BvcHBlcj1uZXcgUG9wcGVyKHRoaXMuZWxlbWVudCxvLHtwbGFjZW1lbnQ6aCxtb2RpZmllcnM6e29mZnNldDp7b2Zmc2V0OnRoaXMuY29uZmlnLm9mZnNldH0sZmxpcDp7YmVoYXZpb3I6dGhpcy5jb25maWcuZmFsbGJhY2tQbGFjZW1lbnR9LGFycm93OntlbGVtZW50Ol8uQVJST1d9fSxvbkNyZWF0ZTpmdW5jdGlvbih0KXt0Lm9yaWdpbmFsUGxhY2VtZW50IT09dC5wbGFjZW1lbnQmJmUuX2hhbmRsZVBvcHBlclBsYWNlbWVudENoYW5nZSh0KX0sb25VcGRhdGU6ZnVuY3Rpb24odCl7ZS5faGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKHQpfX0pLHQobykuYWRkQ2xhc3MocC5TSE9XKSxcIm9udG91Y2hzdGFydFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50JiZ0KFwiYm9keVwiKS5jaGlsZHJlbigpLm9uKFwibW91c2VvdmVyXCIsbnVsbCx0Lm5vb3ApO3ZhciB1PWZ1bmN0aW9uKCl7ZS5jb25maWcuYW5pbWF0aW9uJiZlLl9maXhUcmFuc2l0aW9uKCk7dmFyIG49ZS5faG92ZXJTdGF0ZTtlLl9ob3ZlclN0YXRlPW51bGwsdChlLmVsZW1lbnQpLnRyaWdnZXIoZS5jb25zdHJ1Y3Rvci5FdmVudC5TSE9XTiksbj09PWQuT1VUJiZlLl9sZWF2ZShudWxsLGUpfTtyLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpJiZ0KHRoaXMudGlwKS5oYXNDbGFzcyhwLkZBREUpP3QodGhpcy50aXApLm9uZShyLlRSQU5TSVRJT05fRU5ELHUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKGEuX1RSQU5TSVRJT05fRFVSQVRJT04pOnUoKX19LGEucHJvdG90eXBlLmhpZGU9ZnVuY3Rpb24oZSl7dmFyIG49dGhpcyxpPXRoaXMuZ2V0VGlwRWxlbWVudCgpLG89dC5FdmVudCh0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LkhJREUpLHM9ZnVuY3Rpb24oKXtuLl9ob3ZlclN0YXRlIT09ZC5TSE9XJiZpLnBhcmVudE5vZGUmJmkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChpKSxuLl9jbGVhblRpcENsYXNzKCksbi5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtZGVzY3JpYmVkYnlcIiksdChuLmVsZW1lbnQpLnRyaWdnZXIobi5jb25zdHJ1Y3Rvci5FdmVudC5ISURERU4pLG51bGwhPT1uLl9wb3BwZXImJm4uX3BvcHBlci5kZXN0cm95KCksZSYmZSgpfTt0KHRoaXMuZWxlbWVudCkudHJpZ2dlcihvKSxvLmlzRGVmYXVsdFByZXZlbnRlZCgpfHwodChpKS5yZW1vdmVDbGFzcyhwLlNIT1cpLFwib250b3VjaHN0YXJ0XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQmJnQoXCJib2R5XCIpLmNoaWxkcmVuKCkub2ZmKFwibW91c2VvdmVyXCIsbnVsbCx0Lm5vb3ApLHRoaXMuX2FjdGl2ZVRyaWdnZXJbZy5DTElDS109ITEsdGhpcy5fYWN0aXZlVHJpZ2dlcltnLkZPQ1VTXT0hMSx0aGlzLl9hY3RpdmVUcmlnZ2VyW2cuSE9WRVJdPSExLHIuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkmJnQodGhpcy50aXApLmhhc0NsYXNzKHAuRkFERSk/dChpKS5vbmUoci5UUkFOU0lUSU9OX0VORCxzKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCgxNTApOnMoKSx0aGlzLl9ob3ZlclN0YXRlPVwiXCIpfSxhLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXtudWxsIT09dGhpcy5fcG9wcGVyJiZ0aGlzLl9wb3BwZXIuc2NoZWR1bGVVcGRhdGUoKX0sYS5wcm90b3R5cGUuaXNXaXRoQ29udGVudD1mdW5jdGlvbigpe3JldHVybiBCb29sZWFuKHRoaXMuZ2V0VGl0bGUoKSl9LGEucHJvdG90eXBlLmFkZEF0dGFjaG1lbnRDbGFzcz1mdW5jdGlvbihlKXt0KHRoaXMuZ2V0VGlwRWxlbWVudCgpKS5hZGRDbGFzcyhcImJzLXRvb2x0aXAtXCIrZSl9LGEucHJvdG90eXBlLmdldFRpcEVsZW1lbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aXA9dGhpcy50aXB8fHQodGhpcy5jb25maWcudGVtcGxhdGUpWzBdfSxhLnByb3RvdHlwZS5zZXRDb250ZW50PWZ1bmN0aW9uKCl7dmFyIGU9dCh0aGlzLmdldFRpcEVsZW1lbnQoKSk7dGhpcy5zZXRFbGVtZW50Q29udGVudChlLmZpbmQoXy5UT09MVElQX0lOTkVSKSx0aGlzLmdldFRpdGxlKCkpLGUucmVtb3ZlQ2xhc3MocC5GQURFK1wiIFwiK3AuU0hPVyl9LGEucHJvdG90eXBlLnNldEVsZW1lbnRDb250ZW50PWZ1bmN0aW9uKGUsbil7dmFyIG89dGhpcy5jb25maWcuaHRtbDtcIm9iamVjdFwiPT09KHZvaWQgMD09PW4/XCJ1bmRlZmluZWRcIjppKG4pKSYmKG4ubm9kZVR5cGV8fG4uanF1ZXJ5KT9vP3QobikucGFyZW50KCkuaXMoZSl8fGUuZW1wdHkoKS5hcHBlbmQobik6ZS50ZXh0KHQobikudGV4dCgpKTplW28/XCJodG1sXCI6XCJ0ZXh0XCJdKG4pfSxhLnByb3RvdHlwZS5nZXRUaXRsZT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW9yaWdpbmFsLXRpdGxlXCIpO3JldHVybiB0fHwodD1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLmNvbmZpZy50aXRsZT90aGlzLmNvbmZpZy50aXRsZS5jYWxsKHRoaXMuZWxlbWVudCk6dGhpcy5jb25maWcudGl0bGUpLHR9LGEucHJvdG90eXBlLl9nZXRBdHRhY2htZW50PWZ1bmN0aW9uKHQpe3JldHVybiBjW3QudG9VcHBlckNhc2UoKV19LGEucHJvdG90eXBlLl9zZXRMaXN0ZW5lcnM9ZnVuY3Rpb24oKXt2YXIgZT10aGlzO3RoaXMuY29uZmlnLnRyaWdnZXIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24obil7aWYoXCJjbGlja1wiPT09bil0KGUuZWxlbWVudCkub24oZS5jb25zdHJ1Y3Rvci5FdmVudC5DTElDSyxlLmNvbmZpZy5zZWxlY3RvcixmdW5jdGlvbih0KXtyZXR1cm4gZS50b2dnbGUodCl9KTtlbHNlIGlmKG4hPT1nLk1BTlVBTCl7dmFyIGk9bj09PWcuSE9WRVI/ZS5jb25zdHJ1Y3Rvci5FdmVudC5NT1VTRUVOVEVSOmUuY29uc3RydWN0b3IuRXZlbnQuRk9DVVNJTixvPW49PT1nLkhPVkVSP2UuY29uc3RydWN0b3IuRXZlbnQuTU9VU0VMRUFWRTplLmNvbnN0cnVjdG9yLkV2ZW50LkZPQ1VTT1VUO3QoZS5lbGVtZW50KS5vbihpLGUuY29uZmlnLnNlbGVjdG9yLGZ1bmN0aW9uKHQpe3JldHVybiBlLl9lbnRlcih0KX0pLm9uKG8sZS5jb25maWcuc2VsZWN0b3IsZnVuY3Rpb24odCl7cmV0dXJuIGUuX2xlYXZlKHQpfSl9dChlLmVsZW1lbnQpLmNsb3Nlc3QoXCIubW9kYWxcIikub24oXCJoaWRlLmJzLm1vZGFsXCIsZnVuY3Rpb24oKXtyZXR1cm4gZS5oaWRlKCl9KX0pLHRoaXMuY29uZmlnLnNlbGVjdG9yP3RoaXMuY29uZmlnPXQuZXh0ZW5kKHt9LHRoaXMuY29uZmlnLHt0cmlnZ2VyOlwibWFudWFsXCIsc2VsZWN0b3I6XCJcIn0pOnRoaXMuX2ZpeFRpdGxlKCl9LGEucHJvdG90eXBlLl9maXhUaXRsZT1mdW5jdGlvbigpe3ZhciB0PWkodGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtb3JpZ2luYWwtdGl0bGVcIikpOyh0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwidGl0bGVcIil8fFwic3RyaW5nXCIhPT10KSYmKHRoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLW9yaWdpbmFsLXRpdGxlXCIsdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcInRpdGxlXCIpfHxcIlwiKSx0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKFwidGl0bGVcIixcIlwiKSl9LGEucHJvdG90eXBlLl9lbnRlcj1mdW5jdGlvbihlLG4pe3ZhciBpPXRoaXMuY29uc3RydWN0b3IuREFUQV9LRVk7KG49bnx8dChlLmN1cnJlbnRUYXJnZXQpLmRhdGEoaSkpfHwobj1uZXcgdGhpcy5jb25zdHJ1Y3RvcihlLmN1cnJlbnRUYXJnZXQsdGhpcy5fZ2V0RGVsZWdhdGVDb25maWcoKSksdChlLmN1cnJlbnRUYXJnZXQpLmRhdGEoaSxuKSksZSYmKG4uX2FjdGl2ZVRyaWdnZXJbXCJmb2N1c2luXCI9PT1lLnR5cGU/Zy5GT0NVUzpnLkhPVkVSXT0hMCksdChuLmdldFRpcEVsZW1lbnQoKSkuaGFzQ2xhc3MocC5TSE9XKXx8bi5faG92ZXJTdGF0ZT09PWQuU0hPVz9uLl9ob3ZlclN0YXRlPWQuU0hPVzooY2xlYXJUaW1lb3V0KG4uX3RpbWVvdXQpLG4uX2hvdmVyU3RhdGU9ZC5TSE9XLG4uY29uZmlnLmRlbGF5JiZuLmNvbmZpZy5kZWxheS5zaG93P24uX3RpbWVvdXQ9c2V0VGltZW91dChmdW5jdGlvbigpe24uX2hvdmVyU3RhdGU9PT1kLlNIT1cmJm4uc2hvdygpfSxuLmNvbmZpZy5kZWxheS5zaG93KTpuLnNob3coKSl9LGEucHJvdG90eXBlLl9sZWF2ZT1mdW5jdGlvbihlLG4pe3ZhciBpPXRoaXMuY29uc3RydWN0b3IuREFUQV9LRVk7KG49bnx8dChlLmN1cnJlbnRUYXJnZXQpLmRhdGEoaSkpfHwobj1uZXcgdGhpcy5jb25zdHJ1Y3RvcihlLmN1cnJlbnRUYXJnZXQsdGhpcy5fZ2V0RGVsZWdhdGVDb25maWcoKSksdChlLmN1cnJlbnRUYXJnZXQpLmRhdGEoaSxuKSksZSYmKG4uX2FjdGl2ZVRyaWdnZXJbXCJmb2N1c291dFwiPT09ZS50eXBlP2cuRk9DVVM6Zy5IT1ZFUl09ITEpLG4uX2lzV2l0aEFjdGl2ZVRyaWdnZXIoKXx8KGNsZWFyVGltZW91dChuLl90aW1lb3V0KSxuLl9ob3ZlclN0YXRlPWQuT1VULG4uY29uZmlnLmRlbGF5JiZuLmNvbmZpZy5kZWxheS5oaWRlP24uX3RpbWVvdXQ9c2V0VGltZW91dChmdW5jdGlvbigpe24uX2hvdmVyU3RhdGU9PT1kLk9VVCYmbi5oaWRlKCl9LG4uY29uZmlnLmRlbGF5LmhpZGUpOm4uaGlkZSgpKX0sYS5wcm90b3R5cGUuX2lzV2l0aEFjdGl2ZVRyaWdnZXI9ZnVuY3Rpb24oKXtmb3IodmFyIHQgaW4gdGhpcy5fYWN0aXZlVHJpZ2dlcilpZih0aGlzLl9hY3RpdmVUcmlnZ2VyW3RdKXJldHVybiEwO3JldHVybiExfSxhLnByb3RvdHlwZS5fZ2V0Q29uZmlnPWZ1bmN0aW9uKG4pe3JldHVybihuPXQuZXh0ZW5kKHt9LHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdCx0KHRoaXMuZWxlbWVudCkuZGF0YSgpLG4pKS5kZWxheSYmXCJudW1iZXJcIj09dHlwZW9mIG4uZGVsYXkmJihuLmRlbGF5PXtzaG93Om4uZGVsYXksaGlkZTpuLmRlbGF5fSksbi50aXRsZSYmXCJudW1iZXJcIj09dHlwZW9mIG4udGl0bGUmJihuLnRpdGxlPW4udGl0bGUudG9TdHJpbmcoKSksbi5jb250ZW50JiZcIm51bWJlclwiPT10eXBlb2Ygbi5jb250ZW50JiYobi5jb250ZW50PW4uY29udGVudC50b1N0cmluZygpKSxyLnR5cGVDaGVja0NvbmZpZyhlLG4sdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSksbn0sYS5wcm90b3R5cGUuX2dldERlbGVnYXRlQ29uZmlnPWZ1bmN0aW9uKCl7dmFyIHQ9e307aWYodGhpcy5jb25maWcpZm9yKHZhciBlIGluIHRoaXMuY29uZmlnKXRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFtlXSE9PXRoaXMuY29uZmlnW2VdJiYodFtlXT10aGlzLmNvbmZpZ1tlXSk7cmV0dXJuIHR9LGEucHJvdG90eXBlLl9jbGVhblRpcENsYXNzPWZ1bmN0aW9uKCl7dmFyIGU9dCh0aGlzLmdldFRpcEVsZW1lbnQoKSksbj1lLmF0dHIoXCJjbGFzc1wiKS5tYXRjaChsKTtudWxsIT09biYmbi5sZW5ndGg+MCYmZS5yZW1vdmVDbGFzcyhuLmpvaW4oXCJcIikpfSxhLnByb3RvdHlwZS5faGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlPWZ1bmN0aW9uKHQpe3RoaXMuX2NsZWFuVGlwQ2xhc3MoKSx0aGlzLmFkZEF0dGFjaG1lbnRDbGFzcyh0aGlzLl9nZXRBdHRhY2htZW50KHQucGxhY2VtZW50KSl9LGEucHJvdG90eXBlLl9maXhUcmFuc2l0aW9uPWZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5nZXRUaXBFbGVtZW50KCksbj10aGlzLmNvbmZpZy5hbmltYXRpb247bnVsbD09PWUuZ2V0QXR0cmlidXRlKFwieC1wbGFjZW1lbnRcIikmJih0KGUpLnJlbW92ZUNsYXNzKHAuRkFERSksdGhpcy5jb25maWcuYW5pbWF0aW9uPSExLHRoaXMuaGlkZSgpLHRoaXMuc2hvdygpLHRoaXMuY29uZmlnLmFuaW1hdGlvbj1uKX0sYS5falF1ZXJ5SW50ZXJmYWNlPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgbj10KHRoaXMpLmRhdGEoXCJicy50b29sdGlwXCIpLG89XCJvYmplY3RcIj09PSh2b2lkIDA9PT1lP1widW5kZWZpbmVkXCI6aShlKSkmJmU7aWYoKG58fCEvZGlzcG9zZXxoaWRlLy50ZXN0KGUpKSYmKG58fChuPW5ldyBhKHRoaXMsbyksdCh0aGlzKS5kYXRhKFwiYnMudG9vbHRpcFwiLG4pKSxcInN0cmluZ1wiPT10eXBlb2YgZSkpe2lmKHZvaWQgMD09PW5bZV0pdGhyb3cgbmV3IEVycm9yKCdObyBtZXRob2QgbmFtZWQgXCInK2UrJ1wiJyk7bltlXSgpfX0pfSxvKGEsbnVsbCxbe2tleTpcIlZFUlNJT05cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIjQuMC4wLWJldGFcIn19LHtrZXk6XCJEZWZhdWx0XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHV9fSx7a2V5OlwiTkFNRVwiLGdldDpmdW5jdGlvbigpe3JldHVybiBlfX0se2tleTpcIkRBVEFfS0VZXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCJicy50b29sdGlwXCJ9fSx7a2V5OlwiRXZlbnRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZn19LHtrZXk6XCJFVkVOVF9LRVlcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gc319LHtrZXk6XCJEZWZhdWx0VHlwZVwiLGdldDpmdW5jdGlvbigpe3JldHVybiBofX1dKSxhfSgpO3JldHVybiB0LmZuW2VdPW0uX2pRdWVyeUludGVyZmFjZSx0LmZuW2VdLkNvbnN0cnVjdG9yPW0sdC5mbltlXS5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIHQuZm5bZV09YSxtLl9qUXVlcnlJbnRlcmZhY2V9LG19KGpRdWVyeSkpOyFmdW5jdGlvbihyKXt2YXIgYT1cInBvcG92ZXJcIixsPVwiLmJzLnBvcG92ZXJcIixoPXIuZm5bYV0sYz1uZXcgUmVnRXhwKFwiKF58XFxcXHMpYnMtcG9wb3ZlclxcXFxTK1wiLFwiZ1wiKSx1PXIuZXh0ZW5kKHt9LHMuRGVmYXVsdCx7cGxhY2VtZW50OlwicmlnaHRcIix0cmlnZ2VyOlwiY2xpY2tcIixjb250ZW50OlwiXCIsdGVtcGxhdGU6JzxkaXYgY2xhc3M9XCJwb3BvdmVyXCIgcm9sZT1cInRvb2x0aXBcIj48ZGl2IGNsYXNzPVwiYXJyb3dcIj48L2Rpdj48aDMgY2xhc3M9XCJwb3BvdmVyLWhlYWRlclwiPjwvaDM+PGRpdiBjbGFzcz1cInBvcG92ZXItYm9keVwiPjwvZGl2PjwvZGl2Pid9KSxkPXIuZXh0ZW5kKHt9LHMuRGVmYXVsdFR5cGUse2NvbnRlbnQ6XCIoc3RyaW5nfGVsZW1lbnR8ZnVuY3Rpb24pXCJ9KSxmPXtGQURFOlwiZmFkZVwiLFNIT1c6XCJzaG93XCJ9LHA9e1RJVExFOlwiLnBvcG92ZXItaGVhZGVyXCIsQ09OVEVOVDpcIi5wb3BvdmVyLWJvZHlcIn0sXz17SElERTpcImhpZGVcIitsLEhJRERFTjpcImhpZGRlblwiK2wsU0hPVzpcInNob3dcIitsLFNIT1dOOlwic2hvd25cIitsLElOU0VSVEVEOlwiaW5zZXJ0ZWRcIitsLENMSUNLOlwiY2xpY2tcIitsLEZPQ1VTSU46XCJmb2N1c2luXCIrbCxGT0NVU09VVDpcImZvY3Vzb3V0XCIrbCxNT1VTRUVOVEVSOlwibW91c2VlbnRlclwiK2wsTU9VU0VMRUFWRTpcIm1vdXNlbGVhdmVcIitsfSxnPWZ1bmN0aW9uKHMpe2Z1bmN0aW9uIGgoKXtyZXR1cm4gbih0aGlzLGgpLHQodGhpcyxzLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9cmV0dXJuIGUoaCxzKSxoLnByb3RvdHlwZS5pc1dpdGhDb250ZW50PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0VGl0bGUoKXx8dGhpcy5fZ2V0Q29udGVudCgpfSxoLnByb3RvdHlwZS5hZGRBdHRhY2htZW50Q2xhc3M9ZnVuY3Rpb24odCl7cih0aGlzLmdldFRpcEVsZW1lbnQoKSkuYWRkQ2xhc3MoXCJicy1wb3BvdmVyLVwiK3QpfSxoLnByb3RvdHlwZS5nZXRUaXBFbGVtZW50PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMudGlwPXRoaXMudGlwfHxyKHRoaXMuY29uZmlnLnRlbXBsYXRlKVswXX0saC5wcm90b3R5cGUuc2V0Q29udGVudD1mdW5jdGlvbigpe3ZhciB0PXIodGhpcy5nZXRUaXBFbGVtZW50KCkpO3RoaXMuc2V0RWxlbWVudENvbnRlbnQodC5maW5kKHAuVElUTEUpLHRoaXMuZ2V0VGl0bGUoKSksdGhpcy5zZXRFbGVtZW50Q29udGVudCh0LmZpbmQocC5DT05URU5UKSx0aGlzLl9nZXRDb250ZW50KCkpLHQucmVtb3ZlQ2xhc3MoZi5GQURFK1wiIFwiK2YuU0hPVyl9LGgucHJvdG90eXBlLl9nZXRDb250ZW50PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWNvbnRlbnRcIil8fChcImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLmNvbmZpZy5jb250ZW50P3RoaXMuY29uZmlnLmNvbnRlbnQuY2FsbCh0aGlzLmVsZW1lbnQpOnRoaXMuY29uZmlnLmNvbnRlbnQpfSxoLnByb3RvdHlwZS5fY2xlYW5UaXBDbGFzcz1mdW5jdGlvbigpe3ZhciB0PXIodGhpcy5nZXRUaXBFbGVtZW50KCkpLGU9dC5hdHRyKFwiY2xhc3NcIikubWF0Y2goYyk7bnVsbCE9PWUmJmUubGVuZ3RoPjAmJnQucmVtb3ZlQ2xhc3MoZS5qb2luKFwiXCIpKX0saC5falF1ZXJ5SW50ZXJmYWNlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgZT1yKHRoaXMpLmRhdGEoXCJicy5wb3BvdmVyXCIpLG49XCJvYmplY3RcIj09PSh2b2lkIDA9PT10P1widW5kZWZpbmVkXCI6aSh0KSk/dDpudWxsO2lmKChlfHwhL2Rlc3Ryb3l8aGlkZS8udGVzdCh0KSkmJihlfHwoZT1uZXcgaCh0aGlzLG4pLHIodGhpcykuZGF0YShcImJzLnBvcG92ZXJcIixlKSksXCJzdHJpbmdcIj09dHlwZW9mIHQpKXtpZih2b2lkIDA9PT1lW3RdKXRocm93IG5ldyBFcnJvcignTm8gbWV0aG9kIG5hbWVkIFwiJyt0KydcIicpO2VbdF0oKX19KX0sbyhoLG51bGwsW3trZXk6XCJWRVJTSU9OXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI0LjAuMC1iZXRhXCJ9fSx7a2V5OlwiRGVmYXVsdFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB1fX0se2tleTpcIk5BTUVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYX19LHtrZXk6XCJEQVRBX0tFWVwiLGdldDpmdW5jdGlvbigpe3JldHVyblwiYnMucG9wb3ZlclwifX0se2tleTpcIkV2ZW50XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIF99fSx7a2V5OlwiRVZFTlRfS0VZXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGx9fSx7a2V5OlwiRGVmYXVsdFR5cGVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZH19XSksaH0ocyk7ci5mblthXT1nLl9qUXVlcnlJbnRlcmZhY2Usci5mblthXS5Db25zdHJ1Y3Rvcj1nLHIuZm5bYV0ubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiByLmZuW2FdPWgsZy5falF1ZXJ5SW50ZXJmYWNlfX0oalF1ZXJ5KX0oKTsiXX0=